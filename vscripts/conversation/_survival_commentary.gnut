global function SurvivalCommentary_Init
global function SetCommentaryEnabled
global function IsCommentaryEventEnabled
global function PlayCommentaryLineToAllPlayers
global function PlayCommentaryLineToAllPlayersDelayed
global function PlayCommentaryLineToPlayerArray

global function SurvivalCommentary_SetEventEnabled

global function SurvivalCommentary_GetKillLeaderEEH
global function SurvivalCommentary_GetChampionTeam
global function SurvivalCommentary_GetChampionEEH
global function AddSurvivalCommentaryEvent
global function SurvivalCommentary_HostAnnounce
global function SurvivalCommentary_KilledPlayerAnnounce
global function SurvivalCommentary_ResetAllData

global function GetKillLeader
global function SetChampion
global function GetChampion

global function PlayBattleChatterLineToTeamButNotSpeaker
global function PlayBattleChatterLineToSpeakerAndTeamThatBlocksLowerPriorityLines
global function PlayBattleChatterLineToSpeakerAndOtherPlayer
global function PlayBattleChatterLineDelayedToPlayer
global function TryPlayWeaponBattleChatterLine
global function PlayBattleChatterLineDelayedToSpeakerAndTeam
global function PlayBattleChatterLineToSpeakerAndTeam
global function PlayBattleChatterLineToSpeakerWithDebounceTime
global function PlayBattleChatterLineToSpeakerAndTeamWithDebounceTime

global function PlayBattleChatterLineToPlayer

global const DELAY_COMMENTARY = 2
global const int COMMENTARY_ANNOUNCER_DIALOGUE_FLAGS = eDialogueFlags.SURVIVAL_HOST_ALL_SPEAKERS

struct 
{
	bool commentarySystemActive = true
	entity currentKillLeader = null
	array<int>                     disabledCommentaryEvents
	table<entity, table<string, float> > battleChatterDebounceTimes
	
	int survival_commentary_kill_leader_min_kills
	bool survival_commentary_kill_leader_enabled
	bool survival_commentary_champion_enabled
	bool survival_commentary_first_blood_enabled
	bool championWasEliminated
	
} file

void function SurvivalCommentary_Init()
{
	ShSurvivalCommentary_Init()
	
	file.survival_commentary_kill_leader_min_kills = GetCurrentPlaylistVarInt( "survival_commentary_kill_leader_min_kills", 0 )
	file.survival_commentary_kill_leader_enabled = GetCurrentPlaylistVarBool( "survival_commentary_kill_leader_enabled", true )
	file.survival_commentary_champion_enabled = GetCurrentPlaylistVarBool( "survival_commentary_champion_enabled", true )
	file.survival_commentary_first_blood_enabled = GetCurrentPlaylistVarBool( "survival_commentary_first_blood_enabled", true )
	
	if( !file.survival_commentary_champion_enabled )
		file.championWasEliminated = true
	
	if ( !IsFiringRangeGameMode() )
	{	
		if
		( 	
			file.survival_commentary_kill_leader_enabled ||
			file.survival_commentary_champion_enabled ||
			file.survival_commentary_first_blood_enabled 
		)
		{
			AddCallback_OnPlayerKilled( OnPlayerKilled )
		}
	}

	FlagInit( "SurvivalCommentary_FirstBloodReached", false )
}

int function SurvivalCommentary_GetKillLeaderEEH()
{
	if ( !IsValid( file.currentKillLeader ))
		return EncodedEHandle_null

	return file.currentKillLeader.GetEncodedEHandle()
}

entity function GetKillLeader()
{
	if ( !IsValid( file.currentKillLeader ) )
		return null

	return file.currentKillLeader
}

int function SurvivalCommentary_GetChampionTeam()
{
	return GetEntityFromEncodedEHandle( GetGlobalNetInt( "championEEH" ) ).GetTeam()
}

void function PlayBattleChatterLineToSpeakerWithDebounceTime( string conversationType, entity listeningPlayer, entity speakingPlayer, float debounceMin, float debounceMax, entity addressee = null )
{
	if ( !ShouldPlayBattleChatter( conversationType, listeningPlayer, speakingPlayer ) )
		return

	if ( !IsValid( speakingPlayer ) )
		return

	if ( !(speakingPlayer in file.battleChatterDebounceTimes) )
	{
		table<string, float> debounceTimes = {}
		file.battleChatterDebounceTimes[ speakingPlayer ] <- debounceTimes
	}

	bool shouldPlayLine = true

	if ( conversationType in file.battleChatterDebounceTimes[ speakingPlayer ] && Time() < file.battleChatterDebounceTimes[ speakingPlayer ][ conversationType ] )
	{
		shouldPlayLine = false
	}

	if ( shouldPlayLine )
	{
		int dialogueFlags = 0
		if ( IsValid( addressee ) && ShouldStompConAltForLine( conversationType, speakingPlayer, addressee ) )
		{
			dialogueFlags = eDialogueFlags.STOMP_CON_ALT
		}

		file.battleChatterDebounceTimes[speakingPlayer][conversationType] <- Time() + RandomFloatRange( debounceMin, debounceMax )
		PlayDialogueForPlayer_NoWait( conversationType, listeningPlayer, speakingPlayer, dialogueFlags )
	}
}

void function PlayBattleChatterLineDelayedToSpeakerAndTeam( entity speakingPlayer, string chatterLine, float delay )
{
	EndSignal( speakingPlayer, "OnDeath" )
	EndSignal( speakingPlayer, "OnDestroy" )

	wait delay

	PlayBattleChatterLineToSpeakerAndTeam( speakingPlayer, chatterLine )
}

void function TryPlayWeaponBattleChatterLine( entity weaponOwner, entity weapon )
{
	string weaponClassName = weapon.GetWeaponClassName()
	var battleChatterLine = GetWeaponInfoFileKeyField_Global( weaponClassName, "battle_chatter_event" )

	if ( battleChatterLine == null )
		return

	PlayBattleChatterLineToSpeakerAndTeam( weaponOwner, expect string( battleChatterLine ) )
}

void function PlayBattleChatterLineToSpeakerAndTeam( entity speakingPlayer, string chatterLine, entity addressee = null )
{
	if ( !IsValid( speakingPlayer ) )
		return

	foreach ( player in GetFriendlySquadArrayForPlayer( speakingPlayer ) )
		PlayBattleChatterLineToPlayer( chatterLine, player, speakingPlayer, addressee )
}

void function PlayBattleChatterLineToSpeakerAndTeamWithDebounceTime( entity speakingPlayer, string chatterLine, float debounceMin, float debounceMax, entity addressee = null, bool isDebounceForAllTeamSpeakers = false )
{
	if ( !IsValid( speakingPlayer ) )
		return

	if ( !(speakingPlayer in file.battleChatterDebounceTimes) )
	{
		table<string, float> debounceTimes = {}
		file.battleChatterDebounceTimes[ speakingPlayer ] <- debounceTimes
	}

	bool shouldPlayLine = true
	// Do we block a dialogue line if any member of the squad has triggered it within the debounce time
	if ( isDebounceForAllTeamSpeakers )
	{
		array< entity > teamPlayersArray = GetPlayerArrayOfTeam( speakingPlayer.GetTeam() )
		foreach ( teamPlayer in teamPlayersArray )
		{
			if ( !IsValid( teamPlayer ) )
				continue

			if ( teamPlayer in file.battleChatterDebounceTimes && chatterLine in file.battleChatterDebounceTimes[ teamPlayer ] && Time() < file.battleChatterDebounceTimes[ teamPlayer ][ chatterLine ] )
			{
				shouldPlayLine = false
				break
			}
		}
	}
	else if ( chatterLine in file.battleChatterDebounceTimes[ speakingPlayer ] && Time() < file.battleChatterDebounceTimes[ speakingPlayer ][ chatterLine ] ) // Otherwise only block the dialogue if the speaker has triggered it within the debounce time
	{
		shouldPlayLine = false
	}

	// If this line is going to be played by the player, make sure we set debounce time on it and play the line
	if ( shouldPlayLine )
	{
		file.battleChatterDebounceTimes[speakingPlayer][chatterLine] <- Time() + RandomFloatRange( debounceMin, debounceMax )
		PlayBattleChatterLineToSpeakerAndTeam( speakingPlayer, chatterLine, addressee )
	}
}

void function PlayBattleChatterLineDelayedToPlayer( entity speakingPlayer, string chatterLine, float delay )
{
	EndSignal( speakingPlayer, "OnDeath" )
	EndSignal( speakingPlayer, "OnDestroy" )

	wait delay

	PlayBattleChatterLineToPlayer( chatterLine, speakingPlayer, speakingPlayer )
}

void function PlayBattleChatterLineToPlayer( string conversationType, entity listeningPlayer, entity speakingPlayer, entity addressee = null )
{
	if ( !ShouldPlayBattleChatter( conversationType, listeningPlayer, speakingPlayer ) )
		return

	int dialogueFlags = 0

	if ( IsValid( addressee ) && ShouldStompConAltForLine( conversationType, speakingPlayer, addressee ) )
	{
		dialogueFlags = eDialogueFlags.STOMP_CON_ALT
	}

	PlayDialogueForPlayer_NoWait( conversationType, listeningPlayer, speakingPlayer, dialogueFlags )
}

void function PlayBattleChatterLineToSpeakerAndTeamThatBlocksLowerPriorityLines( entity speakingPlayer, string chatterLine )
{
	if ( !IsValid( speakingPlayer ) )
		return

	foreach ( player in GetFriendlySquadArrayForPlayer( speakingPlayer ) )
		PlayBattleChatterLineToPlayerThatBlocksLowerPriorityLines( chatterLine, player, speakingPlayer )
}

int function SurvivalCommentary_GetChampionEEH()
{
	return GetGlobalNetInt( "championEEH" )
}

void function PlayBattleChatterLineToSpeakerAndOtherPlayer( entity speakingPlayer, entity otherPlayer, string chatterLine )
{
	PlayBattleChatterLineToPlayer( chatterLine, speakingPlayer, speakingPlayer, otherPlayer )
	PlayBattleChatterLineToPlayer( chatterLine, otherPlayer, speakingPlayer, otherPlayer )
}

void function SurvivalCommentary_ResetAllData()
{
	file.currentKillLeader = null
	FlagClear( "SurvivalCommentary_FirstBloodReached" )
}

void function SetChampion( entity champion )
{
	if( !IsValid( champion ) )
	{
		SetGlobalNetInt( "championEEH", -1 )
		return
	}
	
	SetGlobalNetInt( "championEEH", champion.GetEncodedEHandle() )
	array<entity> championSquadMates = GetPlayerArrayOfTeam( champion.GetTeam() )
	championSquadMates.fastremovebyvalue( champion )
	if( championSquadMates.len() >= 1 )
		SetGlobalNetInt( "championSquad1EEH", championSquadMates[0].GetEncodedEHandle() )
	if( championSquadMates.len() >= 2 )
		SetGlobalNetInt( "championSquad2EEH", championSquadMates[1].GetEncodedEHandle() )
}

entity function GetChampion()
{
	return GetEntityFromEncodedEHandle( SurvivalCommentary_GetChampionEEH() )
}

int function GetMinKillsForKillLeader()
{
	int minKill = file.survival_commentary_kill_leader_min_kills
	if( Gamemode() == eGamemodes.fs_dm )
		minKill = 2
	else if( minKill < 1 )
		minKill = KILL_LEADER_MIN_KILL_REQUIREMENT // From sh_survival_commentary.gnut

	return minKill
}

bool function ShouldStompConAltForLine( string conversationType, entity speakingPlayer, entity addressee )
{
	string foundConAlt = ""
	array<string> squadVoices = [ GetPlayerVoice( speakingPlayer ) ]
	bool duplicateLegendsOnSquad = false

	foreach ( entity squadmate in GetPlayerArrayOfTeam_Alive( speakingPlayer.GetTeam() ) )
	{
		if ( squadmate == speakingPlayer )
			continue

		if ( squadVoices.find( GetPlayerVoice( squadmate ) ) > -1 )
			duplicateLegendsOnSquad = true

		squadVoices.append( GetPlayerVoice( squadmate ) )

		string potentialConAlt = ""//GetConditionalAltDialogue( conversationType, speakingPlayer, squadmate, true )

		if ( potentialConAlt != "" )
		{
			if ( foundConAlt != "" )
			{
				#if DEVELOPER
					if ( !duplicateLegendsOnSquad )
						Assert( false, "More then one condPlayer exists for con alt " + conversationType + " for speaker " + GetPlayerVoice( speakingPlayer ) + " , this is not currently supported." )
				#endif

				return !duplicateLegendsOnSquad // if there are dupe legends, you should not stomp the con alt. if there are not dupe legends, you should stomp the con alt
			}

			foundConAlt = potentialConAlt
		}

	}

	if ( foundConAlt != "" )
	{
		if ( addressee.GetTeam() !=  speakingPlayer.GetTeam() )
			return false

		// if ( DoesConditionalAltRequireAddressee( foundConAlt ) )
		// {
			// ItemFlavor condPlayerCharacter = GetConditionalAltCondPlayerCharacterFromAlias( foundConAlt )
			// ItemFlavor addresseeCharacter = LoadoutSlot_GetItemFlavor( addressee, Loadout_Character() )

			// if ( condPlayerCharacter != addresseeCharacter )
				// return true
		// }
		// else
		// {
			// Assert( false, "Dialogue line " + conversationType + " has a con alt " + foundConAlt + " and was passed an addressee but does not require one." )
			return true
		// }
	}

	return false
}

void function PlayBattleChatterLineToPlayerThatBlocksLowerPriorityLines( string conversationType, entity listeningPlayer, entity speakingPlayer )
{
	if ( !ShouldPlayBattleChatter( conversationType, listeningPlayer, speakingPlayer ) )
		return

	PlayDialogueForPlayer_NoWait( conversationType, listeningPlayer, speakingPlayer, eDialogueFlags.BLOCK_LOWER_PRIORITY_QUEUE_ITEMS )
}

void function OnPlayerKilled( entity victim, entity attacker, var damageInfo )
{
	if( DamageInfo_GetDamage( damageInfo ) == 0 )
		return
		
	if( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.damagedef_despawn )
		return
	
	if ( !IsValid( victim ) || !IsValid( attacker ) || IsValid( victim ) && !victim.IsPlayer() || IsValid( attacker ) && !attacker.IsPlayer() )
		return

	thread function() : ( victim, attacker, damageInfo )
	{
		wait DELAY_COMMENTARY
		
		if ( !IsValid( victim ) || !IsValid( attacker ) )
			return
		
		if ( file.survival_commentary_kill_leader_enabled )
		{
			if ( victim == file.currentKillLeader && victim != GetChampion() )
			{
				thread SurvivalCommentary_KilledPlayerAnnounce( eSurvivalCommentaryBucket.KILL_LEADER_ELIMINATED, attacker, 0.0, "", "bc_weKilledKillLeader" )

				foreach ( player in GetPlayerArray() )
					Remote_CallFunction_NonReplay( player, "ServerCallback_Survival_HighlightedPlayerKilled", victim, attacker, eSurvivalCommentaryPlayerType.KILLLEADER )
			}

			int attackerKills = attacker.GetPlayerNetInt( "kills" )
			if( attacker != GetKillLeader() && attackerKills >= GetMinKillsForKillLeader() && GetKillLeader() == null
			||  attacker != GetKillLeader() && attackerKills >= GetMinKillsForKillLeader() && attackerKills > GetKillLeader().GetPlayerNetInt( "kills" ) )
			{
				file.currentKillLeader = attacker

				thread SurvivalCommentary_KilledPlayerAnnounce( eSurvivalCommentaryBucket.NEW_KILL_LEADER, attacker, 0.0, "bc_killLeaderNew", "bc_squadmateBecomesKillLeader", "bc_iBecomeKillLeader", true )
				
				foreach ( player in GetPlayerArray() )
					Remote_CallFunction_NonReplay( player, "ServerCallback_Survival_NewKillLeader", attacker, attackerKills )
			}
		}
		
		if ( !file.championWasEliminated ) //set to true if survival_commentary_champion_enabled is false.
		{
			entity champion = GetEntityFromEncodedEHandle( SurvivalCommentary_GetChampionEEH() )
			if( victim == champion )
			{
				thread SurvivalCommentary_KilledPlayerAnnounce( eSurvivalCommentaryBucket.CHAMPION_ELIMINATED, attacker, 0.0, "bc_championEliminated", "bc_weKilledChampion" )

				foreach ( player in GetPlayerArray() )
					Remote_CallFunction_NonReplay( player, "ServerCallback_Survival_HighlightedPlayerKilled", victim, attacker, eSurvivalCommentaryPlayerType.CHAMPION )
			}
			
			file.championWasEliminated = true
		}
		
		if ( file.survival_commentary_first_blood_enabled )
		{
			if ( !Flag( "SurvivalCommentary_FirstBloodReached" ) )
			{
				FlagSet( "SurvivalCommentary_FirstBloodReached" )
				thread AddSurvivalCommentaryEvent( eSurvivalEventType.FIRST_BLOOD, attacker )
			}
		}
	}()
}

//  eSurvivalEventType

// 	0  INVALID,
// 	1  FIRST_CIRCLE_MOVING,
// 	2  CIRCLE_MOVING,
// 	3  FINAL_CIRCLE_MOVING,
// 	4  CIRCLE_CLOSING_TO_NOTHING,
// 	5  TITANS_DROPPING,
// 	6  CARE_PACKAGE_DROPPING,
// 	7  HOVER_TANK_INBOUND,
// 	8  TWO_SQUADS_LEFT,
// 	9  ONE_VS_ONE,
// 	10  WINNER_WINNER,
// 	11  FIRST_CIRCLE_TIMER_STARTED,
// 	12  NEXT_CIRCLE_TIMER_STARTED,
// 	13  FINAL_CIRCLE_TIMER_STARTED,
// 	14  CIRCLE_MOVES_1MIN,
// 	15  CIRCLE_MOVES_45SEC,
// 	16  CIRCLE_MOVES_30SEC,
// 	17  CIRCLE_MOVES_10SEC,
// 	18  ROUND_TIMER_STARTED,
// 	19  HALF_PLAYERS_ALIVE,
// 	20  PLAYERS_ALIVE_10,
// 	21  PLAYERS_ALIVE_5,
// 	22  HALF_SQUADS_ALIVE,
// 	23  SQUADS_ALIVE_6,
// 	24  SQUADS_ALIVE_3,
// 	25  FIRST_BLOOD
// 	26  PILOT_KILL,
// 	27  PILOT_DOWNED,
// 	28  PILOT_WOUNDED,
// 	29  PILOT_REVIVED,
// 	30  SQUAD_ELIMINATED,
// 	31  NO_KILLS_FOR_TIME,
// 	32  _count

void function AddSurvivalCommentaryEvent( int event, entity attacker = null, entity victim = null )
{

	// Determine if event is currently enabled
	if ( !IsCommentaryEventEnabled( event ) )
	{
		#if DEVELOPER
			printf( "Event type: " + event + " is disabled" )
		#endif
		
		return
	}

	#if DEVELOPER
	string enumString = GetEnumString( "eSurvivalEventType", event )
	
	printt( FUNC_NAME(), "eSurvivalEventType:", enumString, event )
	#endif

	switch( event )
	{
		case eSurvivalEventType.CIRCLE_MOVING:
			thread SurvivalCommentary_CircleMovingAnnounce( eSurvivalCommentaryBucket.CIRCLE_MOVING, 0 )
			break
		case eSurvivalEventType.CIRCLE_CLOSING_TO_NOTHING:
			thread SurvivalCommentary_CircleMovingAnnounce( eSurvivalCommentaryBucket.CIRCLE_CLOSING_TO_NOTHING, 0 )
			break
		case eSurvivalEventType.FINAL_CIRCLE_MOVING:
			thread SurvivalCommentary_CircleMovingAnnounce( eSurvivalCommentaryBucket.FINAL_CIRCLE_MOVING, 0 )
			break
		case eSurvivalEventType.ROUND_TIMER_STARTED:
			thread SurvivalCommentary_CircleStartAnnounce( GetRoundCommentaryBucket( SURVIVAL_GetCurrentDeathFieldStage() ), 0 )
			break
		case eSurvivalEventType.CARE_PACKAGE_DROPPING:
			thread SurvivalCommentary_HostAnnounce( eSurvivalCommentaryBucket.CARE_PACKAGE_DROPPING, 0, "bc_droppingCarePack" )
			break;
		case eSurvivalEventType.FIRST_BLOOD:
			thread SurvivalCommentary_KilledPlayerAnnounce( eSurvivalCommentaryBucket.FIRST_BLOOD, attacker, 0.0, "bc_firstBlood", "bc_weTookFirstBlood" )
			break;
	}
	// The announcer's voice can be changed with SurvivalCommentary_SetHost()
	// For example, to change to a revenant announcement, execute "SurvivalCommentary_SetHost( eSurvivalHostType.NOC )"
}

int function GetRoundCommentaryBucket( int round )
{
	int roundeNum = eSurvivalCommentaryBucket.BEGIN_ROUND1

	switch( round )
	{
		case 1:
			roundeNum = eSurvivalCommentaryBucket.BEGIN_ROUND2
			break
		case 2:
			roundeNum = eSurvivalCommentaryBucket.BEGIN_ROUND3
			break
		case 3:
			roundeNum = eSurvivalCommentaryBucket.BEGIN_ROUND4
			break
		case 4:
			roundeNum = eSurvivalCommentaryBucket.BEGIN_ROUND5
			break
		case 5:
			roundeNum = eSurvivalCommentaryBucket.BEGIN_ROUND6
			break
		case 6:
			roundeNum = eSurvivalCommentaryBucket.BEGIN_ROUND7
			break
		case 7:
			roundeNum = eSurvivalCommentaryBucket.BEGIN_ROUND8
			break
		case 8:
			roundeNum = eSurvivalCommentaryBucket.BEGIN_ROUND9
			break
		case 9:
			roundeNum = eSurvivalCommentaryBucket.BEGIN_ROUND_FINAL
			break
	}

	if( SURVIVAL_IsFinalDeathFieldStage() )
		roundeNum = eSurvivalCommentaryBucket.BEGIN_ROUND_FINAL

	return roundeNum
}

void function SurvivalCommentary_HostAnnounce( int commentaryBucket, float delay = 0, string responseName = "" )
{
	foreach( player in GetPlayerArray_Alive() )
	{
		if( !IsValid( player ) )
			continue

		thread PlayDialogueForPlayer( PickCommentaryLineFromBucket( commentaryBucket ), player, null, delay, eDialogueFlags.SURVIVAL_HOST_ALL_SPEAKERS, responseName, TryFindSpeakingPlayerOnTeam( player.GetTeam() ) )
	}
}

void function PlayCommentaryLine_Internal( string dialogueRef, array<entity> players, string dialogueResponseRef )
{
	if ( !file.commentarySystemActive )
		return

	foreach ( entity player in players )
	{
		if ( !IsValid( player ) )
			continue

		if ( !IsBattleChatterEnabled() )
		{
			thread PlayDialogueForPlayer( dialogueRef, player, null, 0, COMMENTARY_ANNOUNCER_DIALOGUE_FLAGS )
			continue
		}

		entity responseSpeaker = TryFindSpeakingPlayerOnTeam( player.GetTeam() )

		thread PlayDialogueForPlayer( dialogueRef, player, null, 0, COMMENTARY_ANNOUNCER_DIALOGUE_FLAGS, dialogueResponseRef, responseSpeaker )
	}
}


void function PlayCommentaryLineToAllPlayers( string dialogueRef, string dialogueResponseRef = "" )
{
	array<entity> players = GetPlayerArray()

	thread PlayCommentaryLine_Internal( dialogueRef, players, dialogueResponseRef )
}


void function PlayCommentaryLineToAllPlayersDelayed( string dialogueRef, float delay, string dialogueResponseRef = "" )
{
	if ( delay > 0 )
		wait delay

	PlayCommentaryLineToAllPlayers( dialogueRef, dialogueResponseRef )
}


void function PlayCommentaryLineToPlayerArray( string dialogueRef, array<entity> players, string dialogueResponseRef = "" )
{
	thread PlayCommentaryLine_Internal( dialogueRef, players, dialogueResponseRef )
}


void function SurvivalCommentary_CircleStartAnnounce( int round, float delay )
{
	foreach( player in GetPlayerArray_Alive() )
	{
		if( !IsValid( player ) )
			continue
		
		string responseName
		int insideNextCircleMates = 0
		foreach( squadMates in GetPlayerArrayOfTeam_Alive( player.GetTeam() ) )
		{
			if( !SURVIVAL_PosInSafeZone( squadMates.GetOrigin() ) )
				continue
			
			insideNextCircleMates++
		}
		
		if( RandomInt( 100 ) <= CHANCE_FOR_CIRCLE_TIMER_CHANT || SURVIVAL_IsFinalDeathFieldStage() )
		{
			if( insideNextCircleMates != 0 && insideNextCircleMates != GetPlayerArrayOfTeam_Alive( player.GetTeam() ).len() )
				responseName = "bc_newCircle_wholeSquadNotInCircle"
			else if ( SURVIVAL_IsFinalDeathFieldStage() && RandomInt( 100 ) <= CHANCE_FOR_END_CIRCLE_CHANTING )
				responseName = "bc_circleTimerStartFinal"
			else if( Distance( SURVIVAL_GetSafeZoneCenter(), player.GetOrigin() ) >= FAR_FROM_CIRCLE_DISTANCE * 17500 )
				responseName = "bc_nextCircleFar"
			else if( insideNextCircleMates == GetPlayerArrayOfTeam_Alive( player.GetTeam() ).len() )
				responseName = "bc_insideNextCircle"
		}

		#if DEVELOPER 
			printt( "insideNextCircleMates: " + insideNextCircleMates + " responseName: " + responseName )
			printt( "Distance between player and circle: " + Distance( SURVIVAL_GetSafeZoneCenter(), player.GetOrigin() ) )
		#endif 
		
		thread PlayDialogueForPlayer( PickCommentaryLineFromBucket( round ), player, null, delay, eDialogueFlags.SURVIVAL_HOST_ALL_SPEAKERS, responseName, TryFindSpeakingPlayerOnTeam( player.GetTeam() ) )
	}
}

void function SurvivalCommentary_CircleMovingAnnounce( int bucket, float delay )
{
	foreach( player in GetPlayerArray_Alive() )
	{
		if( !IsValid( player ) )
			continue

		string responseName
		int insideNextCircleMates = 0
		foreach( squadMates in GetPlayerArrayOfTeam_Alive( player.GetTeam() ) )
		{
			if( !SURVIVAL_PosInSafeZone( squadMates.GetOrigin() ) )
				continue
			
			insideNextCircleMates++
		}
		
		if( RandomInt( 100 ) <= CHANCE_FOR_CIRCLE_TIMER_CHANT )
		{
			if( SURVIVAL_IsFinalDeathFieldStage() )
				responseName = "bc_circleClosingFinal"
			else if( !SURVIVAL_PosInSafeZone( player.GetOrigin() ) && insideNextCircleMates == 0 )
				responseName = "bc_circleMoving_allOutside"
		}
		
		#if DEVELOPER 
			printt( "insideNextCircleMates: " + insideNextCircleMates + " responseName: " + responseName )
		#endif
		
		thread PlayDialogueForPlayer( PickCommentaryLineFromBucket( bucket ), player, null, delay, eDialogueFlags.SURVIVAL_HOST_ALL_SPEAKERS, responseName, TryFindSpeakingPlayerOnTeam( player.GetTeam() ) )
	}
}

void function SurvivalCommentary_KilledPlayerAnnounce( int bucket, entity killer, float delay, string responseName = "", string killerMatesResponseName = "", string killerResponseName = "", bool shouldDistinctionResponse = false )
{
	if( !IsValid( killer ) )
		killer = null
	
	foreach( player in GetPlayerArray_Alive() )
	{
		if( !IsValid( player ) )
			continue

		string selectedResponseName
		entity responsePlayer

		if( IsValid( killer ) && killer != null )
		{
			if( killer == player && shouldDistinctionResponse )
			{
				selectedResponseName = killerResponseName
				responsePlayer = player
			}
			else if( killer.GetTeam() == player.GetTeam() )
			{
				selectedResponseName = killerMatesResponseName
				if( shouldDistinctionResponse )
					responsePlayer = TryFindSpeakingPlayerOnTeamDisallowSelf( player.GetTeam(), killer )
				else
					responsePlayer = TryFindSpeakingPlayerOnTeam( player.GetTeam() )
			} else
			{
				selectedResponseName = responseName
				responsePlayer = TryFindSpeakingPlayerOnTeam( player.GetTeam() )
			}
		}

		thread PlayDialogueForPlayer( PickCommentaryLineFromBucket( bucket ), player, null, delay, eDialogueFlags.SURVIVAL_HOST_ALL_SPEAKERS, selectedResponseName, responsePlayer )
	}
}

bool function IsCommentaryEventEnabled( int eventType )
{
	foreach ( disabledEventType in file.disabledCommentaryEvents )
	{
		if ( disabledEventType == eventType )
			return false
	}

	return true
}

void function SurvivalCommentary_SetEventEnabled( int eventType, bool value )
{
	if ( value == true )
	{
		#if DEVELOPER 
			mAssert( !IsCommentaryEventEnabled( eventType ), "Trying to SurvivalCommentary_SetEventEnabled( true ) on a commentary event that is already enabled" )
		#endif
		
		file.disabledCommentaryEvents.fastremovebyvalue( eventType )
	}
	else
	{
		#if DEVELOPER 
			mAssert( IsCommentaryEventEnabled( eventType ), "Trying to SurvivalCommentary_SetEventEnabled( false ) on a commentary event that is already disabled" )
		#endif
		
		file.disabledCommentaryEvents.append( eventType )
	}
}


void function SetCommentaryEnabled( bool value )
{
	file.commentarySystemActive = value
}

void function PlayBattleChatterLineToTeamButNotSpeaker( entity speakingPlayer, string chatterLine )
{
	//printt( "PlayBattleChatterLine, speakingPlayer: " +  speakingPlayer + ", chatterLine: " + chatterLine )
	foreach ( player in GetPlayerArrayOfTeam( speakingPlayer.GetTeam() ) )
	{
		if ( player == speakingPlayer )
			continue

		PlayBattleChatterLineToPlayer( chatterLine, player, speakingPlayer )
	}
}
