untyped //Required for string to functionref conversion to work

global function RemoteFunctions_Init_Begin
global function RemoteFunctions_Init_Finish
global function AddCallback_OnNetworkRegistration

global function GetNV_PreGameStartTime
global function GetNV_FreefallIsFromPlane

global function FindFuncName_ByID
global function FindFuncID_ByRef

// External remote function registration
global function RegisterExternalRemoteFunction_ByRef
global function RegisterExternalRemoteFunction_ByRef_Array
global function IsExternalRemoteFunction
global function GetRemoteFunctionModSource
global function GetTotalRemoteFunctionCount

#if CLIENT
	global function Remote_CallFunction_ByRef_internal
	global function FS_ByRef_ConsistencyCheck
#endif

//			Use entity in typed functions. If an entity is not sent to client  
// 			in a world update before rpc from remote func, the entity will be invalid 

global const int EHANDLE_MIN 			= -1 //(mk): Some custom gamemodes send -1 for invalid. Needs call audits, then remove this and use:  EncodedEHandle_null.
global const int EHANDLE_MAX 			= 0x7FFFFFFF
const int EDAMAGESOURCE_MIN 	= -1
const int DAMAGE_TYPE_MIN		= 1 << 31

struct
{
	table functionrefs	//the actual func ref mapped by function name --  string <- functionref()
	table< int, string > intToFunctionRef				//for client to map: func index -> func name
	table< string, int > functionrefsToInt 				//for server to call by func name
	
	int iConsistencyCheck
	
	#if CLIENT
		bool bConsistencyCheckComplete = false
	#endif
	
	// External remote function registration system
	array<string> externalRemoteFunctions = []
	table<string, string> externalFunctionModSources = {}  // functionName -> modName
	int nextExternalFunctionId = 1000  // Start external IDs at 1000 to avoid conflicts
	int coreFunctionCount = 0  // Track number of core functions
	bool allowExternalRegistration = false
	
} file

// (mk): Do not include any aliased funcs that CAN BE exploited. 
// If they 100% must be executed by client when server calls them, 
// then register the actual function.

// There is no checksum for these, only a length check to compare server/client contain same amount.
// these are called with Remote_CallFunction_ByRef( player, "func_name" )

int function SetupRemoteFuncAliases()
{
	//###############################################
	//#		THESE MUST STAY IN SYNC	CLIENT/SERVER	#
	//###############################################
	// Unified string array for all VMs - functions resolved dynamically using compilestring
	array<string> functions = 
	[
		"Minimap_EnableDraw_Internal",
		"Minimap_DisableDraw_Internal",
		"ServerCallback_DeleteSpawnedClientSideDynamicLights",
		"UpdateRUITest",
		"ServerCallback_KillReplayHud_Activate",
		"ServerCallback_KillReplayHud_Deactivate",
		"TridentBoost_Visuals",
		"RefreshImageAndScaleOnMinimapAndFullmap",
		"ServerCallback_UpdateHeroStats",
		"SCB_WeaponInspectHint",
		"ServerCallback_PlayMatchEndMusic",
		"ServerCallback_DestroyEndAnnouncement",
		"ServerCallback_ShowDeathScreen",
		"ServerCallback_DeathScreenSwitchTab",
		"ServerCallback_ShowFlowstateDeathRecapNoSpectate",
		"ServerCallback_RespawnDNAHint",
		"ServerCallback_PlayerBootsOnGround",
		"ServerCallback_RefreshDeathBoxHighlight",
		"ServerCallback_RefreshLootbinHighlight",
		"ServerCallback_ClearHints",
		"ServerCallback_AnnounceCircleClosing",
		"ServerCallback_PlayScreenFXWarpJump",
		"ServerCallback_GameModeAnnouncement",
		"SCB_AbortCurrentDialogue", /* sh_sp_dialogue.gnut */
		"ServerCallback_CTF_HideCustomUI",
		"ServerToClient_DisplayCancelReviveHintForPlayer",
		"ServerToClient_RemoveCancelReviveHintForPlayer",
		"ServerCallback_FlashScreenForPlayer",
		"ServerCallback_PlayPhaseGateSoundSuite",
		"FS_CreateIntroScreen",
		"FSIntro_ForceEnd",
		"ServerCallback_CTF_CheckUpdatePlayerLegend",
		"ForceScoreboardLoseFocus",
		"ForceScoreboardFocus",
		"UpdateDpadHud_Copy",
		"ServerCallback_Scenarios_MatchEndAnnouncement",
		"Tracker_StatRequestFailed",
		"FS_ForceCompass",
		"FS_DestroyCompass",
		"ServerCallback_ShowWinningSquadSequence",
		"ServerCallback_Ash_OnPlayerDash",
		"ServerCallback_Ash_OnPlayerLanded",
		"ServerCallback_TitanCockpitBoot"
		// ServerCallback_ShotgunKickNoAmmoMessage
	]
	
	int iter = 1
	
	foreach( string func in functions )
	{
		#if CLIENT		
			file.functionrefs[ func ] <- MakeFunctionRefFromString( func )
		#endif
		
		file.functionrefsToInt[ func ] <- iter
		file.intToFunctionRef[ iter ] <- func
		
		iter++
	}
	
	// Store core function count for external registration system
	file.coreFunctionCount = functions.len()
	
	return functions.len()		
}

int function FindFuncID_ByRef( string funcRef )
{
	if( funcRef in file.functionrefsToInt )
		return file.functionrefsToInt[ funcRef ]
		
	return -1
}

string function FindFuncName_ByID( int funcID )
{
	if( funcID in file.intToFunctionRef )
		return file.intToFunctionRef[ funcID ]
		
	return ""
}

//moved to _utility. 
//void function Remote_CallFunction_ByRef( entity player, string funcName )
	
#if CLIENT
	void function Remote_CallFunction_ByRef_internal( int funcID )
	{
		string funcName = FindFuncName_ByID( funcID )
		
		if( funcName == "" )
		{
			printw( "[REMOTE] Error: Invalid function ID: " + funcID )
			return
		}
		
		if( funcName in file.functionrefs )
			file.functionrefs[ funcName ]()
		else
			printw( "[REMOTE] Warning: Remote function '" + funcName + "' (ID: " + funcID + ") not found in function registry" )
	}
#endif

//////////////////////////////////////////
// External Remote Function Registration //
//////////////////////////////////////////
// Use this to register functions to be used with Remote_CallFunction_ByRef, (only function call, no params), externally

void function RegisterExternalRemoteFunction_ByRef( string functionName, string modSource )
{
	if ( !file.allowExternalRegistration )
	{
		printw( "[REMOTE] Error: External registration not allowed. Call during initialization phase." )
		return
	}
	
	if ( functionName == "" )
	{
		printw( "[REMOTE] Error: Function name cannot be empty" )
		return
	}
	
	if ( modSource == "" )
	{
		printw( "[REMOTE] Error: Mod source cannot be empty for function '" + functionName + "'" )
		return
	}
	
	// Check if function already exists in core functions
	if ( functionName in file.functionrefsToInt )
	{
		printw( "[REMOTE] Warning: Function '" + functionName + "' already exists in core functions, skipping external registration" )
		return
	}
	
	// Check if function already exists in external functions
	if ( functionName in file.externalFunctionModSources )
	{
		printw( "[REMOTE] Warning: External function '" + functionName + "' already registered by mod '" + file.externalFunctionModSources[functionName] + "', skipping registration" )
		return
	}
	
	// Register the external function
	file.externalRemoteFunctions.append( functionName )
	file.externalFunctionModSources[ functionName ] <- modSource
	
	// Calculate the new function ID
	int functionId = file.coreFunctionCount + file.externalRemoteFunctions.len()
	
	// Register in lookup tables
	#if CLIENT	
		file.functionrefs[ functionName ] <- MakeFunctionRefFromString( functionName )
	#endif
	
	file.functionrefsToInt[ functionName ] <- functionId
	file.intToFunctionRef[ functionId ] <- functionName
	
	printw( "[REMOTE] Registered external remote function: '" + functionName + "' from mod '" + modSource + "' with ID: " + functionId )
}

void function RegisterExternalRemoteFunction_ByRef_Array( array<string> functionNames, string modSource )
{
	foreach( string functionName in functionNames )
		RegisterExternalRemoteFunction_ByRef( functionName, modSource )
}

bool function IsExternalRemoteFunction( string functionName )
{
	return ( functionName in file.externalFunctionModSources )
}

string function GetRemoteFunctionModSource( string functionName )
{
	if ( functionName in file.externalFunctionModSources )
		return file.externalFunctionModSources[functionName]
	
	return "core"  // Core functions
}

int function GetTotalRemoteFunctionCount()
{
	return file.coreFunctionCount + file.externalRemoteFunctions.len()
}

/*  (mk):

	Always use the script variant wrapper to register remote functions.
	
	ScriptRemote_RegisterClientFunction:
	ScriptRemote_RegisterUIFunction:
	ScriptRemote_RegisterUntypedFunction_deprecated:  ( cannot exceed 10 params )
	
	Register a function name to be used in remote calls. 
	The first paramater can be an optional array<int> of ePlaylist.name, 
	which will only register the function/var if the current playlist is within the array,
	otherwise, the first parameter is string "NameOfFunction".
	
	Optional array and/or function name is followed by argument paramaters:
	Specify argument types with "bool", "int", "float", "vector", and "entity". 
	"int" must be followed by min, max + 1.
	
	"float" and "vector" must be followed by min, max, bit count. 
	The value will be rounded to the nearest 1/2^(bit count) fraction of the specified range. 
	Use 32 to send perfectly precise values. 

*/

/*
	
	ScriptRegisterNetworkedVariable:
	
	OPTIONAL first param ( same as ScriptRemote_Register variants above ): array<int>, 
	string name, int SNDC_category, int SNVT_type, var defaultValue = 0, float rangemin = 0, float rangemax = 0

		=== SNVT_type defaultValue, rangemin/rangemax === Todo: Confirm category limits
		

		- SNVT_BOOL: 										true/false, 						NO range min/max
		- SNVT_INT:											int between -512 and 511, 			NO range min/max
		- SNVT_UNSIGNED_INT:								int between 0 and 1023, 			NO range min/max
		- SNVT_BIG_INT:										int between INT_MIN and INT_MAX, 	NO range min/max 
		- SNVT_FLOAT_RANGE:							 		float between FLT_MIN and FLT_MAX	range min/max ( range must be float..)
		- SNVT_FLOAT_RANGE_OVER_TIME:						float between -1 and 50000  		range min/max ( range must be float..)
		- SNVT_TIME: 										float, between FLT_MIN and FLT_MAX	range min/max ( range can be int/float )
		- SNVT_ENTITY: 										NO default, 						NO range min/max
*/

//(mk): Param ranges are inclusive for min int, NOT inclusive for max int.
// always add + 1 to your max for "int" params.
void function RemoteFunctions_Init_Begin()
{
	DebugRemoteFunctionsInit()
	Remote_BeginRegisteringFunctions()
	_RegisteringFunctions = true

	// Setup core remote functions
	int coreFunctionCount = SetupRemoteFuncAliases()
	
	// Enable external registration phase for mods
	file.allowExternalRegistration = true
	printw( "[REMOTE] External remote function registration enabled. Mods can now register functions." )
	
	// Initial registration with core functions only - will be updated in Init_Finish
	int functionsMax = coreFunctionCount + 100  // Reserve space for external functions
	ScriptRemote_RegisterClientFunction( "Remote_CallFunction_ByRef_internal", "int", 0, functionsMax )
	ScriptRemote_RegisterClientFunction( "FS_LocalizationConsistencyCheck_014" )
	ScriptRemote_RegisterClientFunction( "FS_ByRef_ConsistencyCheck" )
	
	AddCallback_OnNetworkRegistration( ByRef_ConsistencyCheck )
	
	//(mk):This could be a compile time expression if eDamageSourceId enum contained a ._count, 
	// which would require further auditing and checks to make sure it doesn't get treated as a valid damagesource id. 
	int RT_EDAMAGESOURCE_MAX = eDamageSourceId.len() + 2  // starts at -1. int maxrange requires max + 1
	
	if ( MapName() == eMaps.mp_rr_olympus_tt || MapName() == eMaps.mp_rr_olympus_mu1 )
		PathTT_OnNetworkRegistration()

	//Sentinel
	ScriptRemote_RegisterClientFunction( "Flowstate_SentinelChargeHUD", "float", 0.0, 4000.0, 16 ) //Audit 2-22-2025 (mk): 66 mins server time, charge end max
	ScriptRemote_RegisterClientFunction( "ServerCallback_ShouldExitDrone" )
	
	RegisterNetworkedVariable( "coreAvailableFrac", SNDC_TITAN_SOUL, SNVT_FLOAT_RANGE, 0.0, 0.0, 1.0 )
	RegisterNetworkedVariable( "coreExpireFrac", SNDC_TITAN_SOUL, SNVT_FLOAT_RANGE_OVER_TIME, 0.0, 0.0, 1.0 )
	RegisterNetworkedVariable( "upgradeCount", SNDC_TITAN_SOUL, SNVT_INT, 0 )

	//Custom gamemodes
	switch ( Gamemode() )
	{
		case eGamemodes.WINTEREXPRESS:
			ScriptRemote_RegisterClientFunction( "OpenFRChallengesSettingsWpnSelector" )
			ScriptRemote_RegisterClientFunction( "CloseFRChallengesSettingsWpnSelector" )	
			ScriptRemote_RegisterClientFunction( "FS_Scenarios_ChangeAliveStateForPlayer", "entity", "bool" )//Audit 2-22-2025
			ScriptRemote_RegisterClientFunction( "FS_Scenarios_TogglePlayersCardsVisibility", "bool", "bool" )
			ScriptRemote_RegisterClientFunction( "FS_Scenarios_SetupPlayersCards", "bool" )
			ScriptRemote_RegisterClientFunction( "FS_Scenarios_AddEnemyHandle", "entity" )//Audit 2-22-2025
			ScriptRemote_RegisterClientFunction( "FS_Scenarios_AddEnemyHandle2", "entity" )//Audit 2-22-2025
			ScriptRemote_RegisterClientFunction( "FS_Scenarios_AddAllyHandle", "entity" )//Audit 2-22-2025
		break

		case eGamemodes.CUSTOM_CTF:
			// CTF: Server to Client
			
			ScriptRemote_RegisterClientFunction( "ServerCallback_CTF_AddPointIcon", "entity", "entity", "int", 0, 255)
			ScriptRemote_RegisterClientFunction( "ServerCallback_CTF_RecaptureFlag", "int", 0, 999, "float", 0.0, 999.0, 32, "float", 0.0, 999.0, 32, "bool")
			ScriptRemote_RegisterClientFunction("ServerCallback_CTF_FlagCaptured", "entity", "int", 0, 255)
			ScriptRemote_RegisterClientFunction( "ServerCallback_CTF_CustomMessages", "entity", "int", 0, 255 )
			ScriptRemote_RegisterClientFunction( "ServerCallback_CTF_PickedUpFlag", "entity", "bool" )
			ScriptRemote_RegisterClientFunction( "ServerCallback_CTF_SetSelectedLocation", "int", 0, 255)
			ScriptRemote_RegisterClientFunction( "ServerCallback_CTF_SetPointIconHint", "int", 0, 255, "int", 0, 255 )
			ScriptRemote_RegisterClientFunction("ServerCallback_CTF_DoAnnouncement", "float", 0.0, 256.0, 32, "int", 0, 255, "float", 0.0, 1000000.0, 32)
			ScriptRemote_RegisterClientFunction( "ServerCallback_CTF_OpenCTFRespawnMenu", "vector", -32000.0, 32000.0, 32, "int", 0, 255, "int", 0, 255, "entity", "int", 0, 255)
			ScriptRemote_RegisterClientFunction( "ServerCallback_CTF_SetObjectiveText", "int", 0, 255)
			ScriptRemote_RegisterClientFunction( "ServerCallback_CTF_UpdatePlayerStats", "int", 0, 255)
			ScriptRemote_RegisterClientFunction("ServerCallback_CTF_SetScreen", "int", 0, 255, "int", 0, 255, "int", 0, 255, "int", 0, 255)
			ScriptRemote_RegisterClientFunction("ServerCallback_CTF_SetVoteMenuOpen", "bool", "int", 0, 255)
			ScriptRemote_RegisterClientFunction("ServerCallback_CTF_UpdateVotingMaps", "int", 0, 255, "int", 0, 255, "int", 0, 255, "int", 0, 255)
			ScriptRemote_RegisterClientFunction("ServerCallback_CTF_UpdateMapVotesClient", "int", 0, 255, "int", 0, 255, "int", 0, 255, "int", 0, 255)
			ScriptRemote_RegisterClientFunction("FSDM_CustomWinnerScreen_Start", "int", INT_MIN, INT_MAX, "int", 0, 10)
			
			ScriptRegisterNetworkedVariable( "FSDM_GameState", SNDC_GLOBAL, SNVT_INT, -1 )
			ScriptRegisterNetworkedVariable( "flowstate_DMStartTime", SNDC_GLOBAL, SNVT_TIME, -1 )
			ScriptRegisterNetworkedVariable( "flowstate_DMRoundEndTime", SNDC_GLOBAL, SNVT_TIME, -1 )
			ScriptRegisterNetworkedVariable( "imcFlag", SNDC_GLOBAL, SNVT_ENTITY )
			ScriptRegisterNetworkedVariable( "milFlag", SNDC_GLOBAL, SNVT_ENTITY )
			ScriptRegisterNetworkedVariable( "FSIntro_StartTime", SNDC_GLOBAL, SNVT_TIME, -1 )
			ScriptRegisterNetworkedVariable( "FSIntro_EndTime", SNDC_GLOBAL, SNVT_TIME, -1 )
			ScriptRegisterNetworkedVariable( "FSVoteTeam_EndTime", SNDC_GLOBAL, SNVT_TIME, -1 )
			
			ScriptRemote_RegisterClientFunction("ServerCallback_FS_OpenVoteTeamMenu", "bool")
			ScriptRemote_RegisterClientFunction("ServerCallback_AddClientThatVotedToTeam", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX )
			ScriptRemote_RegisterClientFunction("ServerCallback_RemoveClientThatVotedFromTeam", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX )

			ScriptRegisterNetworkedVariable( "captures", SNDC_PLAYER_GLOBAL, SNVT_INT, 0 )
			ScriptRegisterNetworkedVariable( "returns", SNDC_PLAYER_GLOBAL, SNVT_BIG_INT, 0 )
			break					
	}
	
	//TF2 leftovers + Survival base gamemode
	RegisterSignal("OnChangedPlayerClass")
	RegisterSignal("BleedOut_OnStartDying")
	
	ScriptRemote_RegisterClientFunction( "ServerCallback_SkydiveTrailStart", "entity" )
	ScriptRemote_RegisterClientFunction( "ServerCallback_SkydiveTrailEnd", "entity" )
	// ScriptRegisterNetworkedVariable( "skyDiveTrailOverrideIndex", SNDC_PLAYER_GLOBAL, SNVT_INT, -1 )
	ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_EventNotification" )
	ScriptRemote_RegisterClientFunction( "ServerCallback_UpdateHudWeaponData", "entity" )
	
	//ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_BLEEDOUT_ShowWoundedMarker" ) //Audit 2-22-2025 unused
	//ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_BLEEDOUT_HideWoundedMarker" ) //Audit 2-22-2025 unused
	//ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_BLEEDOUT_StartFirstAidProgressBar" ) //Audit 2-22-2025 unused
	//ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_BLEEDOUT_StopFirstAidProgressBar" ) //Audit 2-22-2025 unused
	//ScriptRemote_RegisterClientFunction( "VeryLongFunctionNameVeryLongFunctionNameVeryLongFunctionNameVeryLongVeryLong", "bool", "bool" ) //(mk): test
	
	ScriptRemote_RegisterClientFunction( "SCB_AddGrenadeIndicatorForEntity", "entity", "entity", "float", 0.0, 99999.0, 32 )//Audit 2-22-2025
	ScriptRemote_RegisterUIFunction( "ScriptCallback_UnlockAchievement", "int", 0, achievements.len() + 1 ) //Audit 2-22-2025
	ScriptRemote_RegisterClientFunction( "ServerCallback_SonarPulseFromPosition", "vector", -32000.0, 32000.0, 32, "float", 0.0, 3000.0, 16, "float", 0.0, 10.0, 16, "bool" ) //Audit 2-22-2025
	
	ScriptRemote_RegisterClientFunction( "ServerCallback_SonarPulseConeFromPosition", "vector", -32000.0, 32000.0, 32, "float", 0.0, 32000.0, 16, "vector", -1.0, 1.0, 32, "float", -360.0, 360.0, 16, "int", 0, 128, "float", 0.0, 32000.0, 32, "bool", "bool" )

	ScriptRegisterNetworkedVariable( "playerAllowedToLeech", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, true )

	RegisterEntityVar_AllSyncedEntity( "weaponx", "weaponLockedSet", 0 )
	
	RegisterEntityVar( "player", "nextRespawnTime", 0 )
	RegisterEntityVar( "player", "musicPackAssigned", 0 )

	ScriptRemote_RegisterClientFunction( "ServerCallback_UpdateMarker", "int", 0, 31 )//Audit 2-22-2025
	
	ScriptRemote_RegisterUIFunction( "DisablePrecacheErrors" ) 
	ScriptRemote_RegisterUIFunction( "RestorePrecacheErrors" )

	bool isOptInServer = Dev_CommandLineHasParm( "-optinserver" )
	ScriptRegisterNetworkedVariable( "isOptInServer", SNDC_GLOBAL, SNVT_BOOL, isOptInServer )

	// GAME STATE
	RegisterServerVar( "gameStateChangeTime", null )
	RegisterServerVar( "gameState", -1 )
	RegisterServerVar( "gameStartTime", null )
	RegisterServerVar( "coopStartTime", null )
	RegisterServerVar( "gameEndTime", 0.0 )
	RegisterServerVar( "switchedSides", null )
	RegisterServerVar( "replayDisabled", false )

	// KILL REPLAY
	RegisterServerVar( "roundWinningKillReplayEnabled", false )
	RegisterServerVar( "roundWinningKillReplayPlaying", false )
	RegisterServerVar( "roundScoreLimitComplete", false )
	RegisterServerVar( "roundWinningKillReplayEntHealthFrac", 0.0 )

	RegisterServerVar( "badRepPresent", false )
	RegisterServerVar( "roundBased", false )
	RegisterServerVar( "roundStartTime", null )
	RegisterServerVar( "roundEndTime", 0.0 )
	RegisterServerVar( "roundsPlayed", 0 )

	ScriptRegisterNetworkedVariable( "PreGameStartTime", SNDC_GLOBAL, SNVT_TIME, 0.0 )
	RegisterServerVar( "winningTeam", null )
	
	// Attack/Defend based game modes
	ScriptRegisterNetworkedVariable( "attackingTeam", SNDC_GLOBAL, SNVT_INT, TEAM_UNASSIGNED )
	
	// Riffs
	RegisterServerVar( "minimapState", -1 )
	ScriptRegisterNetworkedVariable( "indicatorId", SNDC_PLAYER_EXCLUSIVE, SNVT_INT, 0 )

	// DEATHBOX: gcard character vars
	ScriptRegisterNetworkedVariable( "characterIndex", SNDC_DEATH_BOX, SNVT_INT, -1 )
	ScriptRegisterNetworkedVariable( "overrideRUI", SNDC_DEATH_BOX, SNVT_BOOL, false )
	ScriptRegisterNetworkedVariable( "skinIndex", SNDC_DEATH_BOX, SNVT_INT, -1 )
	ScriptRegisterNetworkedVariable( "frameIndex", SNDC_DEATH_BOX, SNVT_INT, -1 )
	ScriptRegisterNetworkedVariable( "stanceIndex", SNDC_DEATH_BOX, SNVT_INT, -1 )

	// DEATHBOX: gcard badge vars
	ScriptRegisterNetworkedVariable( "firstBadgeIndex", SNDC_DEATH_BOX, SNVT_INT, -1 )
	ScriptRegisterNetworkedVariable( "firstBadgeDataInt", SNDC_DEATH_BOX, SNVT_INT, -1 )
	ScriptRegisterNetworkedVariable( "secondBadgeIndex", SNDC_DEATH_BOX, SNVT_INT, -1 )
	ScriptRegisterNetworkedVariable( "secondBadgeDataInt", SNDC_DEATH_BOX, SNVT_INT, -1 )
	ScriptRegisterNetworkedVariable( "thirdBadgeIndex", SNDC_DEATH_BOX, SNVT_INT, -1 )
	ScriptRegisterNetworkedVariable( "thirdBadgeDataInt", SNDC_DEATH_BOX, SNVT_INT, -1 )
	
	ScriptRegisterNetworkedVariable( "lootRarity", SNDC_DEATH_BOX, SNVT_INT, -1 )

	ScriptRemote_RegisterClientFunction( "ServerToClient_PlayLootRarityFXOnDeathboxDrop", "entity" )
	ScriptRemote_RegisterClientFunction( "Flyer_ServerToClient_DisplayFlyerDeathboxPrompt" )

	ScriptRegisterNetworkedVariable( "ownerEHI", SNDC_DEATH_BOX, SNVT_BIG_INT, -1 )

	ScriptRegisterNetworkedVariable( "hasDeathFieldImmunity", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, false )
	ScriptRegisterNetworkedVariable( "displayMapzoneText", SNDC_GLOBAL, SNVT_BOOL, true )

	ScriptRegisterNetworkedVariable( "hasLockedInCharacter", SNDC_PLAYER_GLOBAL, SNVT_BOOL, false )
	ScriptRegisterNetworkedVariable( "characterSelectLockstepPlayerIndex", SNDC_PLAYER_GLOBAL, SNVT_INT, -1 )
	ScriptRegisterNetworkedVariable( "characterSelectFocusIndex", SNDC_PLAYER_GLOBAL, SNVT_BIG_INT, -1 )
	

	if( Playlist() != ePlaylists.fs_scenarios )
	{
		ScriptRegisterNetworkedVariable( "characterSelectionReady", SNDC_GLOBAL, SNVT_BOOL, false )
		ScriptRegisterNetworkedVariable( "characterSelectLockstepIndex", SNDC_GLOBAL, SNVT_INT, -1 )
		ScriptRegisterNetworkedVariable( "characterSelectLockstepStartTime", SNDC_GLOBAL, SNVT_TIME, -1 )
		ScriptRegisterNetworkedVariable( "characterSelectLockstepEndTime", SNDC_GLOBAL, SNVT_TIME, -1 )
		ScriptRegisterNetworkedVariable( "squadPresentationStartTime", SNDC_GLOBAL, SNVT_TIME, -1 )
		ScriptRegisterNetworkedVariable( "championSquadPresentationStartTime", SNDC_GLOBAL, SNVT_TIME, -1 )
		ScriptRegisterNetworkedVariable( "pickLoadoutGamestateEndTime", SNDC_GLOBAL, SNVT_TIME, -1 )
		ScriptRegisterNetworkedVariable( "pickLoadoutGamestateStartTime", SNDC_GLOBAL, SNVT_TIME, -1 )
	}

	ScriptRegisterNetworkedVariable( "championEEH", SNDC_GLOBAL, SNVT_BIG_INT, EncodedEHandle_null )
	ScriptRegisterNetworkedVariable( "championSquad1EEH", SNDC_GLOBAL, SNVT_BIG_INT, EncodedEHandle_null )
	ScriptRegisterNetworkedVariable( "championSquad2EEH", SNDC_GLOBAL, SNVT_BIG_INT, EncodedEHandle_null )

	//ScriptRegisterNetworkedVariable( "ultimateCredits", SNDC_PLAYER_GLOBAL, SNVT_UNSIGNED_INT, 0 )
	ScriptRemote_RegisterClientFunction( "ServerCallback_Mirage_DecoysDeployed", "bool" )
	ScriptRemote_RegisterClientFunction( "ServerCallback_MatchEndAnnouncement", "bool", "int", TEAM_INVALID, 127 ) //Audit 2-22-2025
	
	ScriptRemote_RegisterClientFunction( "ServerCallback_SquadEliminated", "int", TEAM_INVALID, 127 )

	ScriptRemote_RegisterClientFunction( "ServerCallback_SendDeathRecapData", "int", EHANDLE_MIN, EHANDLE_MAX, "int", EHANDLE_MIN, EHANDLE_MAX, "int", EDAMAGESOURCE_MIN, RT_EDAMAGESOURCE_MAX, "int", DAMAGE_TYPE_MIN, INT_MAX, "int", -1, INT_MAX, "int", 0, INT_MAX, "int", 0, INT_MAX, "float", 0.0, 1.0, 32, "float", 0.0, 1.0, 32, "float", 0.0, 86400.0, 32, "int", -1, INT_MAX, "int", -1, 16 ) //Audit 2-22-2025
	ScriptRemote_RegisterClientFunction( "ServerCallback_DeathRecapDataUpdated", "bool", "int", EHANDLE_MIN, EHANDLE_MAX ) //Audit 2-22-2025
	RegisterNetworkedVariable( "titanEjectEnabled", SNDC_GLOBAL, SNVT_BOOL, true )

	if( Gamemode() == eGamemodes.SURVIVAL )
		ScriptRemote_RegisterClientFunction( "ServerCallback_AddWinningSquadData", "int", -1, 127, "int", EHANDLE_MIN, EHANDLE_MAX, "int", 0, 5001, "int", 0, INT_MAX, "int", -1, 5001, "int", 0, 9999, "int", 0, 9999 )

	ScriptRegisterNetworkedVariable( "focalTrap", SNDC_PLAYER_EXCLUSIVE, SNVT_ENTITY )

	ScriptRegisterNetworkedVariable( "gladCardPlayer", SNDC_PLAYER_EXCLUSIVE, SNVT_ENTITY )

	ScriptRemote_RegisterClientFunction( "ServerCallback_DisplayWaitingForRespawn", "entity", "float", 0.0, 5000.0, 32, "float", 0.0, 5000.0, 32 )
	ScriptRemote_RegisterClientFunction( "ServerCallback_RespawnPodStarted", "float", 0.0, 5000.0, 32 )
	
	Ability_Shadow_Zombie_RegisterNetworking()//Todo(mk): revisit conditional disables.

	//ScriptRegisterNetworkedVariable( "hasDataKnife", SNDC_PLAYER_GLOBAL, SNVT_BOOL, false )

	ScriptRegisterNetworkedVariable( "isJumpmaster", SNDC_PLAYER_GLOBAL, SNVT_BOOL, false )
	ScriptRegisterNetworkedVariable( "isJumpingWithSquad", SNDC_PLAYER_GLOBAL, SNVT_BOOL, false )
	ScriptRegisterNetworkedVariable( "playerInPlane", SNDC_PLAYER_GLOBAL, SNVT_BOOL, false )
	
	CryptoTT_OnNetworkRegistration()

	ScriptRegisterNetworkedVariable( "freefallActive", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, false )
	ScriptRegisterNetworkedVariable( "freefallEmoteAvailable", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, false )
	ScriptRegisterNetworkedVariable( "freefallIsFromPlane", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, false )
	ScriptRemote_RegisterClientFunction( "ServerToClient_DoUltAccelScreenFx" )

	ScriptRegisterNetworkedVariable( "inventoryEnabled", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, true )

	ScriptRegisterNetworkedVariable( "pingEnabled", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, true )

	ScriptRegisterNetworkedVariable( "kills", SNDC_PLAYER_GLOBAL, SNVT_INT, 0 )
	ScriptRegisterNetworkedVariable( "latency", SNDC_PLAYER_GLOBAL, SNVT_INT, 0 )
	ScriptRegisterNetworkedVariable( "damage", SNDC_PLAYER_GLOBAL, SNVT_BIG_INT, 0 )

	ScriptRegisterNetworkedVariable( "deaths", SNDC_PLAYER_GLOBAL, SNVT_INT, 0 )
	ScriptRegisterNetworkedVariable( "assists", SNDC_PLAYER_GLOBAL, SNVT_INT, 0 )

	ScriptRegisterNetworkedVariable( "isHealing", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, false )
	ScriptRegisterNetworkedVariable( "healingKitTypeCurrentlyBeingUsed", SNDC_PLAYER_GLOBAL, SNVT_INT, -1 )
	ScriptRegisterNetworkedVariable( "isReceivingFirstAid", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, false )

	int defaultHealOption = GetCurrentPlaylistVarBool( "auto_heal_option", false ) ? -1 : 0
	ScriptRegisterNetworkedVariable( "selectedHealthPickupType", SNDC_PLAYER_EXCLUSIVE, SNVT_INT, defaultHealOption )
	// ScriptRegisterNetworkedVariable( "TrainingEndTime", SNDC_PLAYER_EXCLUSIVE, SNVT_TIME, -1 )
	ScriptRegisterNetworkedVariable( "usedSelfRevive", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, false )

	ScriptRegisterNetworkedVariable( "playerPrimaryWeapon0", SNDC_PLAYER_GLOBAL, SNVT_INT, -1 )
	ScriptRegisterNetworkedVariable( "playerPrimaryWeapon1", SNDC_PLAYER_GLOBAL, SNVT_INT, -1 )

	if( Playlist() == ePlaylists.survival_training )
	{
		ScriptRemote_RegisterClientFunction( "ServerCallback_MonitorCommsMenuUsage", "int", 0, 2 ) //todo bool?
		ScriptRemote_RegisterClientFunction( "ServerCallback_SetCommsDialogueEnabled", "int", 0, 2 ) //todo bool?
	}

	Inventory_RegisterNetworking() //3 client funcs
	PlayerMatchState_RegisterNetworking()
	Waypoints_RegisterNetworking() //2 client, registered cleanly with enum max.
	RespawnBeacons_RegisterNetworking()

	Gamemode_ShadowSquad_RegisterNetworking()

	MapZones_RegisterNetworking() //1 func
	Ultimates_RegisterNetworking() //1 func
	ClientMusic_RegisterNetworking() ////Audit 2-22-2025 3 funcs, was 4, 1 is now a toggle.

	ScriptRegisterNetworkedVariable( "currentDeathFieldStage", SNDC_GLOBAL, SNVT_INT, -1 )
	ScriptRegisterNetworkedVariable( "nextCircleStartTime", SNDC_GLOBAL, SNVT_TIME, -1 )
	ScriptRegisterNetworkedVariable( "circleCloseTime", SNDC_GLOBAL, SNVT_TIME, -1 )
	ScriptRegisterNetworkedVariable( "PlaneDoorsOpenTime", SNDC_GLOBAL, SNVT_TIME, -1 )
	ScriptRegisterNetworkedVariable( "PlaneDoorsCloseTime", SNDC_GLOBAL, SNVT_TIME, -1 )
	ScriptRegisterNetworkedVariable( "connectedPlayerCount", SNDC_GLOBAL, SNVT_INT )
	ScriptRegisterNetworkedVariable( "livingPlayerCount", SNDC_GLOBAL, SNVT_INT )
	ScriptRegisterNetworkedVariable( "squadsRemainingCount", SNDC_GLOBAL, SNVT_INT )
	ScriptRegisterNetworkedVariable( "gameState", SNDC_GLOBAL, SNVT_INT, -1 )

	ScriptRegisterNetworkedVariable( "skydiveFreelookActive", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, false )
	ScriptRegisterNetworkedVariable( "skydiveFollowPlayer", SNDC_PLAYER_EXCLUSIVE, SNVT_ENTITY )

	ScriptRemote_RegisterUIFunction( "ServerCallback_OpenSurvivalExitMenu", "bool" )
	ScriptRemote_RegisterUIFunction( "ServerToUI_CharacterLockRejected" )

	ScriptRemote_RegisterUIFunction( "ServerCallback_GotBPFromPremier" )

	ScriptRemote_RegisterClientFunction( "ServerCallback_RespawnBeaconStart", "float", 0.0, 5000.0, 16, "float", 0.0, 5000.0, 16 )
	ScriptRemote_RegisterClientFunction( "ServerCallback_RespawnBeaconStop" )
	ScriptRemote_RegisterClientFunction( "ServerCallback_RefreshInventory" )
	ScriptRemote_RegisterClientFunction( "ServerCallback_RefreshInventoryAndWeaponInfo" )

	ScriptRemote_RegisterClientFunction( "ServerCallback_SurvivalHint", "int", 0, 11 )
	ScriptRemote_RegisterClientFunction( "ServerCallback_Survival_NewKillLeader", "entity", "int", 0, 999 )
	ScriptRemote_RegisterClientFunction( "ServerCallback_Survival_HighlightedPlayerKilled", "entity", "entity", "int", 0, 17 )
	
	if( Gamemode() == eGamemodes.SURVIVAL )
	{
		ScriptRemote_RegisterClientFunction( "ServerCallback_Survival_PathfinderSurveyNotifications", "entity", "int", 0, 9 )
		ScriptRemote_RegisterClientFunction( "ServerCallback_Survival_CreateBeaconWorldIcon", "entity", "entity" )
		ScriptRemote_RegisterClientFunction( "ServerCallback_SUR_PingMinimap", "vector", -1.0, 1.0, 32, "float", 0.0, 300.0, 8, "float", 1.0, 5000.0, 8, "float", 1.0, 5000.0, 8, "int", 0, 2047 )
	}
	
	ScriptRemote_RegisterClientFunction( "ServerCallback_PromptSayThanks", "entity" )
	ScriptRemote_RegisterClientFunction( "ServerCallback_PromptWelcome" )
	
	ScriptRegisterNetworkedVariable( "playerObservedCount", SNDC_PLAYER_GLOBAL, SNVT_INT, 0 )

	// ScriptRegisterNetworkedVariable( "inMatchRankScoreProgress", SNDC_PLAYER_EXCLUSIVE, SNVT_INT, -1 )
	// ScriptRegisterNetworkedVariable( "rankedKillAssistMultiplier", SNDC_PLAYER_EXCLUSIVE, SNVT_INT, 10 )

	#if CLIENT
		ShRanked_RegisterNetworkFunctions()
	#endif

	#if CLIENT
		CLSurvival_RegisterNetworkFunctions()
		ShEliteStreak_RegisterNetworkFunctions()
		
		if ( Gamemode() == eGamemodes.CUSTOM_CTF )
		{
			CL_FSCTF_RegisterNetworkFunctions()
			RegisterNetworkedVariableChangeCallback_int( "FSDM_GameState", FSCTF_GameStateChanged )
		}

		RegisterNetworkedVariableChangeCallback_bool( "playerInPlane", PlayerPlaneStatusChanged )
		RegisterNetworkedVariableChangeCallback_bool( "isJumpmaster", JumpmasterStatusChanged )
		RegisterNetworkedVariableChangeCallback_bool( "isJumpingWithSquad", PlayerPlaneStatusChanged )
		RegisterNetworkedVariableChangeCallback_bool( "freefallActive", PlayerFreefallActiveChanged )
		RegisterNetworkedVariableChangeCallback_bool( "freefallEmoteAvailable", PlayerFreefallEmoteAvailableChanged )
		RegisterNetworkedVariableChangeCallback_bool( "skydiveFreelookActive", SkydiveFreelookActiveChanged )
		RegisterNetworkedVariableChangeCallback_ent( "skydiveFollowPlayer", SkydiveFollowPlayerChanged )
		RegisterNetworkedVariableChangeCallback_int( "healingKitTypeCurrentlyBeingUsed", OnInUseHealingKitTypeChanged )
		RegisterNetworkedVariableChangeCallback_int( "selectedHealthPickupType", OnHealthPickupTypeChanged )
		RegisterNetworkedVariableChangeCallback_int( "playerPrimaryWeapon0", OnPlayerEquippedWeaponChanged )
		RegisterNetworkedVariableChangeCallback_int( "playerPrimaryWeapon1", OnPlayerEquippedWeaponChanged )
	#endif

	ScriptRemote_RegisterClientFunction( "ServerCallback_NessyMessage", "int", 0, 51 )
	ScriptRemote_RegisterClientFunction( "ServerCallback_PlayPassiveVoice", "int", 0, 51 )
	ScriptRemote_RegisterClientFunction( "ServerCallback_YouDied", "entity", "float", -1.0, 1.0, 10, "int", EDAMAGESOURCE_MIN, RT_EDAMAGESOURCE_MAX, "float", 0.0, 5000.0, 16 ) //Audit 2-22-2025
	ScriptRemote_RegisterClientFunction( "ServerCallback_YouRespawned" )

	if ( !IsLobby() )
		ScriptRemote_RegisterClientFunction( "ServerCallback_ShowDeathHint", "int", 0, MAX_DEATH_HINTS )
		
	Bloodhound_TT_RegisterNetworking() // Bloodhound Town Takeover //Audit 2-22-2025

	ScriptRemote_RegisterClientFunction( "ServerCallback_SetAssistInformation", "int", EDAMAGESOURCE_MIN, RT_EDAMAGESOURCE_MAX, "int", EHANDLE_MIN, EHANDLE_MAX, "int", EHANDLE_MIN, EHANDLE_MAX, "float", -1.0, 4000.0, 16 )//Audit 2-22-2025
	ScriptRemote_RegisterClientFunction( "ServerCallback_DataKnifeStartLeech", "float", -1.0, 4000.0, 16 )//Audit 2-22-2025
	ScriptRemote_RegisterClientFunction( "ServerCallback_DataKnifeCancelLeech" )
	ScriptRemote_RegisterClientFunction( "ServerCallback_ControlPanelRefresh", "int", EHANDLE_MIN, EHANDLE_MAX )//Audit 2-22-2025 currently not called.
	//ScriptRemote_RegisterClientFunction( "ServerCallback_TurretRefresh", "int", EHANDLE_MIN, EHANDLE_MAX )//Audit 2-22-2025 not currently used
	
	
	ScriptRemote_RegisterClientFunction( "ServerCallback_OnEntityKilled", "entity", "entity", "int", INT_MIN, INT_MAX, "int", EDAMAGESOURCE_MIN, RT_EDAMAGESOURCE_MAX )
	ScriptRemote_RegisterClientFunction( "ServerCallback_OnEnemyDowned", "entity", "entity", "int", INT_MIN, INT_MAX, "int", EDAMAGESOURCE_MIN, RT_EDAMAGESOURCE_MAX )
	ScriptRemote_RegisterClientFunction( "ServerCallback_PlayerConnectedOrDisconnected", "int", EHANDLE_MIN, EHANDLE_MAX, "int", 0, 20 ) //Audit 2-22-2025
	ScriptRemote_RegisterClientFunction( "ServerCallback_PlayerChangedTeams", "entity", "int", TEAM_INVALID, 127, "int", TEAM_INVALID, 127 ) 
	ScriptRemote_RegisterClientFunction( "ServerCallback_PlayerTookDamage", "float", 0.0, 50000.0, 16, "vector", -32000.0, 32000.0, 32, "int", DAMAGE_TYPE_MIN, INT_MAX, "int", EDAMAGESOURCE_MIN, RT_EDAMAGESOURCE_MAX, "int", EHANDLE_MIN, EHANDLE_MAX ) //Audit 2-22-2025; Todo(mk): damage does not need to be allocated for 50000.0, however many mods call an arbituary number and these need audited in order to lower this value to a reasonable number. Note: Damage gets normalized, which used to be int. Therefore we can get away with using 16 bits on the float which should return n.xyz 
	
	//ScriptRemote_RegisterClientFunction( "ServerCallback_ScreenShake", "float", 0.0, 20.0, "float", 0.001, 255.0, 16, "vector", -32000.0, 32000, 32 )  //Audit 2-22-2025 , not currently called.
	//ScriptRemote_RegisterClientFunction( "ServerCallback_UpdateOverheadIconForNPC", "int", EHANDLE_MIN, EHANDLE_MAX )//Audit 2-22-2025 not currently used
	
	ScriptRemote_RegisterClientFunction( "HandleBroadcastCommsAction", "entity", "int", 0, eCommsAction._count, "entity", "vector", -32000.0, 32000.0, 32, "int", 0, (1 << eCommsFlags._flagCount) )
	ScriptRemote_RegisterClientFunction( "PerformQuip", "entity", "int", 0, INT_MAX ) //Audit 2-22-2025 todo, revisit max quip

	ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_TitanEmbark" ) // used purely to play a single line of dialog

	if( Playlist() == ePlaylists.survival_training )
	{
		ScriptRemote_RegisterClientFunction( "Bleedout_DisplayTrainingFirstAidProgressBar", "entity", "float", 0.0, 86400.0, 32, "float", 0.0, 86400.0, 32 )
		ScriptRemote_RegisterClientFunction( "Bleedout_StopTrainingFirstAidProgressBar" )
	}

	RegisterEntityVar( "player", "permanentEventNotification", -1 )
	RegisterEntityVar( "player", "drawFastballHud", false )
	
	RegisterServerVar( "titanAvailableBits", 0 ) // HACK; we need this information to be 100% accurate, even during kill replay
	RegisterServerVar( "respawnAvailableBits", 0 ) // HACK; we need this information to be 100% accurate, even during kill replay

	//ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_IncomingAirdrop" ) //Audit 2-22-2025 not currently called.
	ScriptRemote_RegisterClientFunction( "ServerCallback_CreateAirdropBadPlace", "int", -1, 9999, "vector", -32000.0, 32000.0, 32, "int", 0, 9999, "entity" ) //Audit 2-22-2025
	ScriptRemote_RegisterClientFunction( "ServerCallback_DestroyAirdropBadPlace", "int", -1, 9999 ) //Audit 2-22-2025

	//ScriptRemote_RegisterClientFunction( "ServerCallback_AddDroneClientData", "entity" ) //Audit 2-22-2025, not currently called.
	//ScriptRemote_RegisterClientFunction( "ServerCallback_SetLootDroneTrailFXType", "entity", "int", 0, INT_MAX ) //Audit 2-22-2025, not currently called.
	//ScriptRemote_RegisterClientFunction( "ServerCallback_ClearLootDroneTrailFXType", "entity", "int", 0, INT_MAX ) //Audit 2-22-2025, not currently called.

	ScriptRemote_RegisterClientFunction( "ServerCallback_SetLootRollerLootTierFX", "int", EHANDLE_MIN, EHANDLE_MAX, "int", 0, 11, "bool" )//Audit 2-22-2025
	ScriptRemote_RegisterClientFunction( "ServerCallback_StopLootRollerFX", "int", EHANDLE_MIN, EHANDLE_MAX ) //Audit 2-22-2025
	ScriptRemote_RegisterClientFunction( "ServerCallback_SetRisingWallAmbientGenericState", "entity", "bool" ) //Audit 2-22-2025

	if( Flowstate_MapHasTrain() )
		ScriptRemote_RegisterClientFunction( "ServerCallback_SetDesertlandsTrainAtStation", "bool" )

	//ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_Announcement" ) //Audit 2-22-2025 todo typed, not currently called
	ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_ScoreEvent" ) //todo typed
	ScriptRemote_RegisterClientFunction( "ServerCallback_PlayConversation", "int", 0, 2000 ) //Audit 2-22-2025
	ScriptRemote_RegisterClientFunction( "ServerCallback_PlaySquadConversation", "int", 0, 2000, "int", EHANDLE_MIN, EHANDLE_MAX, "int", EHANDLE_MIN, EHANDLE_MAX, "int", EHANDLE_MIN, EHANDLE_MAX, "int", EHANDLE_MIN, EHANDLE_MAX ) //Audit 2-22-2025

	#if MODEL_VIEWER_ENABLED //todo revisit.
		// Model Viewer
		ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_MVUpdateModelBounds" )
		Remote_RegisterClientFunction_Optional( "ServerCallback_MVEnable" )
		Remote_RegisterClientFunction_Optional( "ServerCallback_MVDisable" )
	#endif
	
	//ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_SetClassicSkyScale" ) //Audit 2-22-2025 not currently called
	//ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_ResetClassicSkyScale" ) //Audit 2-22-2025 not currently called
	ScriptRemote_RegisterClientFunction( "ServerCallback_ClientInitComplete" )
	RegisterServerVar( "forcedDialogueOnly", false )
	ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_SetEntityVar" )
	ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_SetServerVar" )
	//ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_PlayMusic" ) //Audit 2-22-2025 not currently called
	//ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_OpenDevMenu" ) //Audit 2-22-2025 not currently called
	ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_SetUIVar" )
	ScriptRemote_RegisterUIFunction( "ServerCallback_OpenPilotLoadoutMenu" )
	ScriptRemote_RegisterUntypedFunction_deprecated( "Dev_PrintClientMessage" )
	ScriptRemote_RegisterUntypedFunction_deprecated( "Dev_BuildClientMessage" )
	//ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_AddArcConnectorToy" ) //Audit 2-22-2025 not currently called

	Dialog_RegisterNetworking()

	ScriptRegisterNetworkedVariable( "PilotAbilitySelectMenu_Enabled", SNDC_GLOBAL, SNVT_INT, 1 )
	ScriptRemote_RegisterUIFunction( "SurvivalMenu_AckAction" )

	RegisterServerVar( "respawnAvailableBits0", 0 )
	RegisterServerVar( "respawnAvailableBits1", 0 )
	RegisterServerVar( "respawnAvailableBits2", 0 )
	RegisterServerVar( "respawnAvailableBits3", 0 )

	ScriptRegisterNetworkedVariable( "bleedoutEndTime", SNDC_PLAYER_GLOBAL, SNVT_TIME, 0.0 )
	ScriptRegisterNetworkedVariable( "bleedoutType", SNDC_PLAYER_GLOBAL, SNVT_UNSIGNED_INT, 0 )
	ScriptRegisterNetworkedVariable( "reviveEndTime", SNDC_PLAYER_GLOBAL, SNVT_TIME, 0.0 )
	ScriptRegisterNetworkedVariable( "reviveType", SNDC_PLAYER_GLOBAL, SNVT_UNSIGNED_INT, 0 )
	ScriptRegisterNetworkedVariable( "revivePlayerHealer", SNDC_PLAYER_GLOBAL, SNVT_ENTITY )
	ScriptRegisterNetworkedVariable( "tutorialContext", SNDC_PLAYER_EXCLUSIVE, SNVT_INT, -1 )
	ScriptRegisterNetworkedVariable( "spectatorTargetCount", SNDC_PLAYER_GLOBAL, SNVT_INT, 0 )

	if( Playlist() == ePlaylists.survival_training )
		ScriptRemote_RegisterClientFunction( "ServerCallback_ActionCountUpdated", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX )

	// Text Info Panels
	ScriptRemote_RegisterUntypedFunction_deprecated( "Dev_BuildTextInfoPanel" )
	ScriptRemote_RegisterUntypedFunction_deprecated( "Dev_CreateTextInfoPanel" )
	ScriptRemote_RegisterUntypedFunction_deprecated( "Dev_CreateTextInfoPanelWithID" )
	ScriptRemote_RegisterUntypedFunction_deprecated( "Dev_DestroyTextInfoPanelWithID" )

	ScriptRemote_RegisterClientFunction( "ServerToClient_ScreenCoverTransition", "float", 0.0, 5000.0, 32 )
	ScriptRemote_RegisterClientFunction( "ServerCallback_WatchForSyncedMeleeCancelPeriod", "float", 0.0, 10.0, 24 )
	ScriptRemote_RegisterClientFunction( "ServerCallback_SyncedMeleeDone" )
	ScriptRemote_RegisterClientFunction( "ServerCallback_SetWeaponPreviewState", "bool" )

	// Loot Marvin Init
	ScriptRemote_RegisterUntypedFunction_deprecated( "ClientCallback_PromptPingLootMarvin" )
	ScriptRemote_RegisterClientFunction( "ServerCallback_PromptPingLootMarvin", "entity" )
	
	// Client-side helper (not permissive)
	ScriptRegisterNetworkedVariable( "IsAdmin", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, false )
	ScriptRemote_RegisterUIFunction( "UICallback_AdminStatus", "bool" )
	
	//r5r.dev player stats
	ScriptRemote_RegisterClientFunction( "Tracker_SetPlayerStatBool", "entity", "bool" )
	ScriptRemote_RegisterClientFunction( "Tracker_SetPlayerStatInt", "entity", "int", INT_MIN, INT_MAX )
	ScriptRemote_RegisterClientFunction( "Tracker_SetPlayerStatFloat", "entity", "float", -999999.0, 999999.0, 32 )
	ScriptRemote_RegisterClientFunction( "Tracker_ResyncAllForPlayer", "entity" )
	ScriptRemote_RegisterUntypedFunction_deprecated( "Tracker_ResyncStatForPlayer" )	
		
	//Todo(mk): Move to client fetch( for cards ), remove networked vars
	ScriptRegisterNetworkedVariable( "SeasonScore", SNDC_PLAYER_EXCLUSIVE, SNVT_BIG_INT, 0 )
	ScriptRegisterNetworkedVariable( "SeasonKills", SNDC_PLAYER_GLOBAL, SNVT_BIG_INT, 0, 0.0, FLT_MAX )
	ScriptRegisterNetworkedVariable( "SeasonDeaths", SNDC_PLAYER_GLOBAL, SNVT_BIG_INT, 0, 0.0, FLT_MAX )
	ScriptRegisterNetworkedVariable( "SeasonPlaytime", SNDC_PLAYER_EXCLUSIVE, SNVT_BIG_INT, 0, 0.0, FLT_MAX )
	ScriptRegisterNetworkedVariable( "SeasonGamesplayed", SNDC_PLAYER_GLOBAL, SNVT_BIG_INT, 0, 0.0, FLT_MAX )
	ScriptRegisterNetworkedVariable( "stats_loaded", SNDC_PLAYER_GLOBAL, SNVT_BOOL, false )
	
	//TestNetworkedVarLimit() //(mk): for testing sh_net_wrapper.gnut
	//ScriptRemote_RegisterClientFunction( "TestFloatBits", "float", 0.0, 2000.0, 32 )
	
	// (mk):
	// Disabling mode specific remote calls when not in the mode and reducing overall usage is key.
	// Functions with many parameters fills up the buffer.
	// Both of these efficiency methods will reduce slot usage and buffer consumption
	// _deprecated untyped variants are parsed differently and do not effect the typed buffer, however should be used sparingly(for now) to improve net throughput. The end goal is to not use untyped at all if possible.
	
	//Tracker stuff
	if ( !IsLobby() )
	{
		// Localized Msg functions
		int localizedStringsMax = GetLocalizedStringsCount() + 1
		ScriptRemote_RegisterUntypedFunction_deprecated( "FS_BuildLocalizedMultiVarString" )
		ScriptRemote_RegisterClientFunction( "FS_ShowLocalizedMultiVarMessage", "int", 0, localizedStringsMax, "int", 0, eMsgUI.len() + 1, "float", 0.0, 5000.0, 16 ) //Audit 2-22-2025
		ScriptRemote_RegisterUntypedFunction_deprecated( "FS_BuildLocalizedTokenWithVariableString" ) //only for variable string
		ScriptRemote_RegisterClientFunction( "FS_DisplayLocalizedToken", "int", 0, localizedStringsMax, "int", 0, localizedStringsMax, "int", 0, eMsgUI.len() + 1, "float", 0.0, FLT_MAX, 32 )

		// Localized TextPanel
		ScriptRemote_RegisterUntypedFunction_deprecated( "FS_BuildLocalizedVariable_InfoPanel" )
		ScriptRemote_RegisterClientFunction( "FS_CreateTextInfoPanelWithID_Localized", "int", 0, localizedStringsMax, "int", 0, localizedStringsMax, "vector", -32000.0, 32000.0, 32, "vector", -32000.0, 32000.0, 32, "float", 0.0, 100.0, 16, "int", -1, 999 ) //Audit 2-22-2025
	
		// This will be moved to code. ( server issued muting )
		ScriptRemote_RegisterClientFunction( "FS_Toggle_Mute", "bool" )
		ScriptRemote_RegisterClientFunction( "FS_Silence", "bool", "int", EHANDLE_MIN, EHANDLE_MAX ) //Audit 2-22-2025	
	}
		
	RegisterServerVar( "tracker_enabled", false )
	RegisterServerVar( "batch_fetch_complete", false )
	ScriptRemote_RegisterUIFunction( "UI_Callback_MOTD" )

	if ( IsLobby() )
	{
		//Register networked variables for the lobby
	}

	#if CLIENT
		if ( !IsLobby() )
		{
			ClBleedout_RegisterNetworkFunctions()
		}
	#endif

	ScriptRegisterNetworkedVariable( "cameraNearbyEnemySquads", SNDC_PLAYER_EXCLUSIVE, SNVT_INT, 0 )
	ScriptRemote_RegisterClientFunction( "ServerCallback_ToggleDisabledWeaponType", "int", INT_MIN, INT_MAX, "bool" )

	s_callbackRegistrationIsClosed = true
	ExecuteSetupCallbacks()
}

bool s_callbackRegistrationIsClosed = false
array<void functionref()> s_setupCallbacks
void function AddCallback_OnNetworkRegistration( void functionref() func )
{
	mAssert( !s_callbackRegistrationIsClosed, "AddCallback_OnNetworkRegistration Must be called before network registration has finished. Cannot add %s()", string( func ) )
	s_setupCallbacks.append( func )
}

void function ExecuteSetupCallbacks()
{
	foreach( void functionref() func in s_setupCallbacks )
		func()
}

// purpose: finalize remote function registration and send checksum to the server
void function RemoteFunctions_Init_Finish()
{
	#if DEVELOPER && DEBUG_REMOTE_FUNCS
		Warning( "Remote_EndRegisteringFunctions \n" )
	#endif
	
	// Disable external registration phase
	file.allowExternalRegistration = false
	
	// Log final registration summary
	int totalFunctions = GetTotalRemoteFunctionCount()
	printw( "[REMOTE] Registration complete. Total functions: " + totalFunctions + " (Core: " + file.coreFunctionCount + ", External: " + file.externalRemoteFunctions.len() + ")" )
	
	if( file.externalRemoteFunctions.len() > 0 )
	{
		printw( "[REMOTE] External functions registered:" )
		foreach( string funcName in file.externalRemoteFunctions )
		{
			string modSource = file.externalFunctionModSources[ funcName ]
			int funcId = file.functionrefsToInt[ funcName ]
			printw( "  - " + funcName + " (ID: " + funcId + ", Mod: " + modSource + ")" )
		}
	}
	
	Remote_EndRegisteringFunctions()
	_RegisteringFunctions = false
}

float function GetNV_PreGameStartTime()
{
	return GetGlobalNetTime( "PreGameStartTime" )
}

bool function GetNV_FreefallIsFromPlane( entity player )
{
	return player.GetPlayerNetBool( "freefallIsFromPlane" )
}

void function ByRef_ConsistencyCheck()
{
	#if SERVER	
		file.iConsistencyCheck = file.intToFunctionRef.len()
		
		AddClientCommandCallback( "byRefIntegrityCheck", ClientCommand_CheckByRefConsistency )
		AddCallback_OnClientConnected
		( 
			void function( entity player )
			{
				if( IsValid( player ) )
					Remote_CallFunction_NonReplay( player, "FS_ByRef_ConsistencyCheck" )
			}
		)
	#endif
	
	#if CLIENT	
		file.iConsistencyCheck = file.functionrefs.len()
	#endif
}

#if CLIENT 
	void function FS_ByRef_ConsistencyCheck()
	{
		if( !file.bConsistencyCheckComplete )
		{
			entity player = GetLocalClientPlayer()
			
			if( IsValid( player ) )
			{
				player.ClientCommand( "byRefIntegrityCheck " + string( file.iConsistencyCheck ) )
				file.bConsistencyCheckComplete = true
			}
		}
	}
#endif

#if SERVER 
	bool function ClientCommand_CheckByRefConsistency( entity player, array<string> args )
	{
		if( args.len() < 1 )
			return true
			
		string param = args[ 0 ]
		
		if( !IsStringNumeric( param ) )
		{
			KickPlayerById( player.GetPlatformUID(), "Invalid byref consistency check data" )
			return true
		}
			
		int clientCount = int( param )
		
		if ( clientCount != file.iConsistencyCheck )
		{
			const string info = "Your remote integrity check byref does not match the server."
			KickPlayerById( player.GetPlatformUID(), info )
		}
		
		return true
	}	
#endif