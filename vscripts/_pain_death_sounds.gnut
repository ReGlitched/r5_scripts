global function PainDeathSounds_Init
global function PlayDeathSounds
global function PlayPainSounds
global function TogglePainDeathDebug
global function PlayAnyPainSound
global function PlayAnyDeathSound

struct PainOrDeathSound
{
	bool functionref( entity, entity, bool, int, int ) isSoundTypeFunc
	string                                             alias_1p_victim_only
	string                                             alias_3p_except_victim
	string                                             alias_3p_attacker_only
	string                                             alias_3p_except_attacker
	bool                                               blocksPriority
	int                                                priority
}

struct
{
	array< array<PainOrDeathSound> > painSounds
	array< array<PainOrDeathSound> > deathSounds

	bool painDeathDebug
} file


enum eBodyTypes
{
	NPC_ANDROID
	NPC_GRUNT
	NPC_MARVIN
	NPC_PROWLER
	NPC_SPIDER
	NPC_SPECIALIST
	NPC_SPECTRE
	NPC_STALKER
	NPC_SUPER_SPECTRE
	PLAYER_ANDROID_FEMALE
	PLAYER_ANDROID_MALE
	PLAYER_HUMAN_FEMALE
	PLAYER_HUMAN_MALE
	CLASS_BANGALORE
	CLASS_BANSHEE
	CLASS_BLOODHOUND
	CLASS_CAUSTIC
	CLASS_GIBRALTER
	CLASS_LIFELINE
	CLASS_MIRAGE
	CLASS_OCTANE
	CLASS_PATHFINDER
	CLASS_WATTSON
	CLASS_CRYPTO
	CLASS_REVENANT
	CLASS_LOBA
	CLASS_RAMPART
	CLASS_DUMMIE
	CLASS_TITAN
	CLASS_PILOT
	TITAN
	COUNT
}

int function GetBodyTypeIndexFromVictim( entity victim )
{
	// can add hologram support if needed
	if ( victim.IsHologram() )
		return -1

	if ( victim.IsTitan() )
		return eBodyTypes.TITAN

	if ( victim.IsPlayer() )
	{
		return eBodyTypes[ victim.GetPlayerSettingString( "painDeathSoundType" ) ]
	}

	if ( IsSpecialist( victim ) )
		return eBodyTypes.NPC_SPECIALIST

	if ( IsGrunt( victim ) )
		return eBodyTypes.NPC_GRUNT

	if ( IsProwler( victim ) )
		return eBodyTypes.NPC_PROWLER

	if ( IsSuperSpectre( victim ) )
		return eBodyTypes.NPC_SUPER_SPECTRE

	if ( IsSpectre( victim ) )
		return eBodyTypes.NPC_SPECTRE

	if ( IsStalker( victim ) )
		return eBodyTypes.NPC_STALKER

	if ( IsMarvin( victim ) )
		return eBodyTypes.NPC_MARVIN

	return -1
}


void function PainDeathSounds_Init()
{
	file.painSounds.resize( eBodyTypes.COUNT )
	file.deathSounds.resize( eBodyTypes.COUNT )

	var dataTable = GetDataTable( $"datatable/pain_death_sounds.rpak" )
	int numRows   = GetDatatableRowCount( dataTable )

	int featureFlagColumn               = GetDataTableColumnByName( dataTable, "featureFlag" )
	int eventColumn                     = GetDataTableColumnByName( dataTable, "event" )
	int blocksPriorityColumn            = GetDataTableColumnByName( dataTable, "blocksNextPriority" )
	int methodColumn                    = GetDataTableColumnByName( dataTable, "method" )
	int priorityColumn                  = GetDataTableColumnByName( dataTable, "priority" )
	int bodyTypeColumn                  = GetDataTableColumnByName( dataTable, "bodyType" )
	int alias_1p_victim_only_column     = GetDataTableColumnByName( dataTable, "alias_1p_victim_only" )
	int alias_3p_except_victim_column   = GetDataTableColumnByName( dataTable, "alias_3p_except_victim" )
	int alias_3p_attacker_only_column   = GetDataTableColumnByName( dataTable, "alias_3p_attacker_only" )
	int alias_3p_except_attacker_column = GetDataTableColumnByName( dataTable, "alias_3p_except_attacker" )

	for ( int i = 0; i < numRows; i++ )
	{
		string event          = GetDataTableString( dataTable, i, eventColumn )

		int priority                    = GetDataTableInt( dataTable, i, priorityColumn )
		bool blocksPriority             = GetDataTableBool( dataTable, i, blocksPriorityColumn )
		string method                   = GetDataTableString( dataTable, i, methodColumn )
		string bodyTypeName             = GetDataTableString( dataTable, i, bodyTypeColumn )
		string alias_1p_victim_only     = GetDataTableString( dataTable, i, alias_1p_victim_only_column )
		string alias_3p_except_victim   = GetDataTableString( dataTable, i, alias_3p_except_victim_column )
		string alias_3p_attacker_only   = GetDataTableString( dataTable, i, alias_3p_attacker_only_column )
		string alias_3p_except_attacker = GetDataTableString( dataTable, i, alias_3p_except_attacker_column )
		int bodyType                    = eBodyTypes[ bodyTypeName ]

		PainOrDeathSound painOrDeathSound
		painOrDeathSound.isSoundTypeFunc = GetSoundTypeFuncFromName( method )
		painOrDeathSound.alias_1p_victim_only = alias_1p_victim_only
		painOrDeathSound.alias_3p_except_victim = alias_3p_except_victim
		painOrDeathSound.alias_3p_attacker_only = alias_3p_attacker_only
		painOrDeathSound.alias_3p_except_attacker = alias_3p_except_attacker
		painOrDeathSound.blocksPriority = blocksPriority
		painOrDeathSound.priority = priority

		#if DEVELOPER
			if ( priority < 100 || priority > 500 )
				Warning( "PainDeathSound event priority must be between 100 and 500. See " + event + " " + method )
		#endif

		switch ( event )
		{
			case "pain":
				file.painSounds[ bodyType ].append( painOrDeathSound )
				break

			case "death":
				file.deathSounds[ bodyType ].append( painOrDeathSound )
				break

			default:
				Warning( "Couldn't find pain/death event type " + event )
				break
		}
	}

	for ( int i = 0; i < eBodyTypes.COUNT; i++ )
	{
		file.painSounds[ i ].sort( PainOrDeathSort )
		file.deathSounds[ i ].sort( PainOrDeathSort )
	}
}


int function PainOrDeathSort( PainOrDeathSound a, PainOrDeathSound b )
{
	if ( a.priority < b.priority )
		return -1
	if ( b.priority < a.priority )
		return 1
	return 0
}


bool functionref( entity, entity, bool, int, int ) function GetSoundTypeFuncFromName( string method )
{
	switch ( method )
	{
		case "SE_ANY":
			return SE_ANY

		case "SE_GIB":
			return SE_GIB

		case "SE_BULLET":
			return SE_BULLET

		case "SE_DISSOLVE":
			return SE_DISSOLVE

		case "SE_ELECTRICAL":
			return SE_ELECTRICAL

		case "SE_EXPLOSION":
			return SE_EXPLOSION

		case "SE_FALL":
			return SE_FALL

		case "SE_HEADSHOT_BULLET":
			return SE_HEADSHOT_BULLET

		case "SE_HEADSHOT_SHOTGUN":
			return SE_HEADSHOT_SHOTGUN

		case "SE_HEADSHOT_TITAN":
			return SE_HEADSHOT_TITAN

		case "SE_THERMITE_GRENADE":
			return SE_THERMITE_GRENADE

		case "SE_PROWLER":
			return SE_PROWLER

		case "SE_SMOKE":
			return SE_SMOKE

		case "SE_CORROSIVE_GAS":
			return SE_CORROSIVE_GAS

		case "SE_TITAN_STEP":
			return SE_TITAN_STEP

		case "SE_EXECUTION":
			return SE_EXECUTION
	}

	unreachable
}

bool function SE_ANY( entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	if( Playlist() == ePlaylists.fs_lgduels_1v1 || Flowstate_IsHaloMode() )
		return false

	if ( damageSourceID == eDamageSourceId.outOfBounds || damageSourceID == eDamageSourceId.deathField )
		return false
	
	return true
}


bool function SE_GIB( entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	return bool( damageTypes & DF_GIB )
}


bool function SE_BULLET( entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	return bool( damageTypes & DF_BULLET )
}


bool function SE_DISSOLVE( entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	return bool( damageTypes & DF_DISSOLVE )
}


bool function SE_ELECTRICAL( entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	return bool( damageTypes & DF_ELECTRICAL )
}


bool function SE_EXPLOSION( entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	return bool( damageTypes & DF_EXPLOSION )
}


bool function SE_FALL( entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	return damageSourceID == eDamageSourceId.fall
}


bool function SE_HEADSHOT_BULLET( entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	if ( !isValidHeadshot )
		return false

	return bool( damageTypes & DF_BULLET )
}


bool function SE_HEADSHOT_SHOTGUN( entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	if ( !isValidHeadshot )
		return false

	return bool( damageTypes & DF_SHOTGUN )
}


bool function SE_HEADSHOT_TITAN( entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	if ( !attacker.IsTitan() )
		return false

	return isValidHeadshot
}


bool function SE_EXECUTION( entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	return damageSourceID == eDamageSourceId.human_execution
}


bool function SE_THERMITE_GRENADE( entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	return damageSourceID == eDamageSourceId.mp_weapon_thermite_grenade
}


bool function SE_PROWLER( entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	if ( !IsValid( attacker ) )
		return false

	return IsProwler( attacker )
}


bool function SE_SMOKE( entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	return damageSourceID == eDamageSourceId.mp_weapon_grenade_electric_smoke
}


bool function SE_CORROSIVE_GAS( entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	return  (damageSourceID == eDamageSourceId.damagedef_grenade_gas) || (damageSourceID == eDamageSourceId.damagedef_gas_exposure)
}


bool function SE_TITAN_STEP( entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	return false
}


void function PlayPainSounds( entity victim, var damageInfo )
{
	int bodyType = GetBodyTypeIndexFromVictim( victim )
	if ( bodyType >= 0 )
		PlayPainOrDeathSounds( file.painSounds[ bodyType ], victim, damageInfo )
}


void function PlayDeathSounds( entity victim, var damageInfo )
{
	int bodyType = GetBodyTypeIndexFromVictim( victim )
	if ( bodyType >= 0 )
		PlayPainOrDeathSounds( file.deathSounds[ bodyType ], victim, damageInfo )
}


void function PlayAnyPainOrDeathSound( entity victim, bool isDeathSound )
{
	int bodyType = GetBodyTypeIndexFromVictim( victim )
	if ( bodyType < 0 )
		return

	entity attacker                     = victim
	bool isValidHeadshot                = false
	int damageTypes                     = 0
	int damageSourceID                  = eDamageSourceId.burn
	array<PainOrDeathSound> soundEvents = (isDeathSound ? file.deathSounds[bodyType] : file.painSounds[bodyType])
	PlayPainOrDeathSoundsInternal( soundEvents, victim, attacker, isValidHeadshot, damageTypes, damageSourceID )
}


void function PlayAnyPainSound( entity victim )
{
	PlayAnyPainOrDeathSound( victim, false )
}


void function PlayAnyDeathSound( entity victim )
{
	PlayAnyPainOrDeathSound( victim, true )
}


void function PlayPainOrDeathSounds( array<PainOrDeathSound> soundEvents, entity victim, var damageInfo )
{
	entity attacker      = DamageInfo_GetAttacker( damageInfo )
	bool isValidHeadshot = IsValidHeadShot( damageInfo, victim )
	int damageTypes      = DamageInfo_GetCustomDamageType( damageInfo )
	int damageSourceID   = DamageInfo_GetDamageSourceIdentifier( damageInfo )

	PlayPainOrDeathSoundsInternal( soundEvents, victim, attacker, isValidHeadshot, damageTypes, damageSourceID )
}


void function PlayPainOrDeathSoundsInternal( array<PainOrDeathSound> soundEvents, entity victim, entity attacker, bool isValidHeadshot, int damageTypes, int damageSourceID )
{
	array<string> alias_1p_victim_only
	array<string> alias_3p_except_victim
	array<string> alias_3p_attacker_only
	array<string> alias_3p_except_attacker

	int lastPriority = 0
	bool blockingPriority

	foreach ( painOrDeathSound in soundEvents )
	{
		Assert( painOrDeathSound.priority >= lastPriority )

		if ( blockingPriority )
		{
			if ( painOrDeathSound.priority > lastPriority )
				break
		}

		if ( painOrDeathSound.isSoundTypeFunc( victim, attacker, isValidHeadshot, damageTypes, damageSourceID ) )
		{
			if ( painOrDeathSound.alias_1p_victim_only != "" )
				alias_1p_victim_only.append( painOrDeathSound.alias_1p_victim_only )
			if ( painOrDeathSound.alias_3p_except_victim != "" )
				alias_3p_except_victim.append( painOrDeathSound.alias_3p_except_victim )
			if ( painOrDeathSound.alias_3p_attacker_only != "" )
				alias_3p_attacker_only.append( painOrDeathSound.alias_3p_attacker_only )
			if ( painOrDeathSound.alias_3p_except_attacker != "" )
				alias_3p_except_attacker.append( painOrDeathSound.alias_3p_except_attacker )

			blockingPriority = painOrDeathSound.blocksPriority || blockingPriority
		}

		lastPriority = painOrDeathSound.priority
	}

	foreach ( sound in alias_3p_except_victim )
	{
		if ( victim.IsPlayer() )
			EmitSoundOnEntityExceptToPlayer( victim, victim, sound )
		else
			EmitSoundOnEntity( victim, sound )
	}

	if ( victim.IsPlayer() )
	{
		foreach ( sound in alias_1p_victim_only )
		{
			EmitSoundOnEntityOnlyToPlayer( victim, victim, sound )
		}
	}

	if ( attacker.IsPlayer() )
	{
		foreach ( sound in alias_3p_except_attacker )
		{
			EmitSoundOnEntityExceptToPlayer( victim, attacker, sound )
		}

		foreach ( sound in alias_3p_attacker_only )
		{
			EmitSoundOnEntityOnlyToPlayer( victim, attacker, sound )
		}
	}
	else
	{
		foreach ( sound in alias_3p_except_attacker )
		{
			EmitSoundOnEntity( victim, sound )
		}
	}

	#if DEVELOPER
		if ( !file.painDeathDebug )
			return

		foreach ( sound in alias_3p_except_victim )
		{
			printt( "PAIN_DEATH_DEBUG: EmitSoundOnEntity - " + sound )
		}

		if ( victim.IsPlayer() )
		{
			foreach ( sound in alias_1p_victim_only )
			{
				printt( "PAIN_DEATH_DEBUG: EmitSoundOnEntityOnlyToPlayer - " + sound )
			}
		}

		if ( attacker.IsPlayer() )
		{
			foreach ( sound in alias_3p_except_attacker )
			{
				printt( "PAIN_DEATH_DEBUG: EmitSoundOnEntityExceptToPlayer - " + sound )
			}

			foreach ( sound in alias_3p_attacker_only )
			{
				printt( "PAIN_DEATH_DEBUG: EmitSoundOnEntityOnlyToPlayer - " + sound )
			}
		}
		else
		{
			foreach ( sound in alias_3p_except_attacker )
			{
				printt( "PAIN_DEATH_DEBUG: EmitSoundOnEntity - " + sound )
			}
		}
	#endif
}


void function TogglePainDeathDebug()
{
	file.painDeathDebug = !file.painDeathDebug
	printt( "PainDeathDebug is " + file.painDeathDebug )
}