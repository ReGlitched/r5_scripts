//=========================================================
// melee attack = regular melee punch/slash/kick/etc
// synced melee = execution/finisher
//=========================================================

#if SERVER || CLIENT || UI
global function MeleeShared_Init

global function Loadout_MeleeSkin
global function MeleeSkin_GetMainWeaponClassname
global function MeleeSkin_GetOffhandWeaponClassname
global function MeleeSkin_GetMenuModel
global function MeleeSkin_GetMenuAnimSeq
global function MeleeSkin_GetMenuModelRotation
global function MeleeSkin_GetCharacterFlavor
global function MeleeSkin_GetSortOrdinal
#endif


#if SERVER || CLIENT
global function DoesWeaponTriggerMeleeAttack
global function DoesWeaponClassTriggerMeleeAttack
global function IsWeaponClassMelee
global function SetObjectCanBeMeleed
global function GetPlayerMeleeAttackWeapon
global function AttackerCanStartMelee
global function IsValidMeleeAttackTarget
#endif

#if SERVER || CLIENT
global function CodeCallback_OnMeleePressed
global function CodeCallback_OnMeleeStartActivity
global function CodeCallback_OnMeleeHeld
global function CodeCallback_OnMeleeReleased
global function CodeCallback_IsValidMeleeAttackTarget
global function CodeCallback_OnMeleeAttackAnimEvent
global function Melee_Attack
global function GetMeleeAttackLungeTarget
#endif

#if SERVER
global function CodeCallback_OnMeleeKilled
global function CodeCallback_NPCMeleeChargedPlayerOrNPC
#elseif CLIENT
global function ClientCodeCallback_ShowMeleePrompt
#endif


////////////////
////////////////
//// Consts ////
////////////////
////////////////
const float MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_ENEMY = 1.0
const float MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_NOT_ENEMY = 0.5

const float MELEE_KNOCKBACK_SCALE = 350.0
const float MELEE_KNOCKBACK_DURATION = 0.25

const float TITANSWORD_MELEE_KNOCKBACK_SCALE = 150.0
const float TITANSWORD_LAUNCHER_MELEE_KNOCKBACK_SCALE = 50.0	

//global const KNIFE_MODEL = $"mdl/weapons/combat_knife/w_combat_knife.rmdl"
//global const BIRD_MODEL = $"mdl/creatures/bird/bird.rmdl"
//const HUMAN_BLOOD_FX = $"impact_flesh"
//const MECHANICAL_BLOOD_FX = $"P_impact_metal_spectre"



///////////////////////
///////////////////////
//// Private Types ////
///////////////////////
///////////////////////
struct FileStruct_LifetimeLevel
{
	table<ItemFlavor, LoadoutEntry> characterMeleeSkinLoadoutEntryMap

	table<ItemFlavor, ItemFlavor> meleeSkinCharacterMap

	table<ItemFlavor, int> cosmeticFlavorSortOrdinalMap
}
FileStruct_LifetimeLevel& fileLevel



/////////////////////////
/////////////////////////
//// Initialiszation ////
/////////////////////////
/////////////////////////
#if SERVER || CLIENT || UI
void function MeleeShared_Init()
{
	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	AddCallback_OnItemFlavorRegistered( eItemType.character, OnItemFlavorRegistered_Character )
}
#endif


#if SERVER || CLIENT || UI
void function OnItemFlavorRegistered_Character( ItemFlavor characterClass )
{
	array<ItemFlavor> meleeSkinList = RegisterReferencedItemFlavorsFromArray( characterClass, "meleeSkins", "flavor", "featureFlag" )
	foreach( ItemFlavor meleeSkin in meleeSkinList )
	{
		fileLevel.meleeSkinCharacterMap[meleeSkin] <- characterClass
		#if SERVER || CLIENT
			//PrecacheModel( MeleeSkin_GetWorldModel( meleeSkin ) )
			//PrecacheModel( MeleeSkin_GetViewModel( meleeSkin ) )
			
			// commented for debugging
			PrecacheWeapon( MeleeSkin_GetMainWeaponClassname( meleeSkin ) )
			PrecacheWeapon( MeleeSkin_GetOffhandWeaponClassname( meleeSkin ) )
		#endif
	}

	MakeItemFlavorSet( meleeSkinList, fileLevel.cosmeticFlavorSortOrdinalMap )

	LoadoutEntry entry = RegisterLoadoutSlot( eLoadoutEntryType.ITEM_FLAVOR, "meleeskin", ItemFlavor_GetGUIDString( characterClass ) )
	entry.DEV_category = "character_meleeskins"
	entry.DEV_name = ItemFlavor_GetHumanReadableRef( characterClass ) + " Melee Skin"
	entry.defaultItemFlavor = meleeSkinList[0]
	entry.validItemFlavorList = meleeSkinList
	entry.isSlotLocked = bool function( EHI playerEHI ) {
		return !IsLobby()
	}
	entry.isActiveConditions = { [Loadout_CharacterClass()] = { [characterClass] = true, }, }
	entry.networkTo = eLoadoutNetworking.PLAYER_EXCLUSIVE
	fileLevel.characterMeleeSkinLoadoutEntryMap[characterClass] <- entry

	#if SERVER && DEVELOPER
		AddCallback_ItemFlavorLoadoutSlotDidChange_AnyPlayer( entry, void function( EHI playerEHI, ItemFlavor meleeSkin ) {
			DEV_UpdatePlayerMeleeWeaponCosmetics( FromEHI( playerEHI ), meleeSkin )
		} )
	#endif
}

int function MeleeSkin_GetSortOrdinal( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin )

	return fileLevel.cosmeticFlavorSortOrdinalMap[flavor]
}

#endif



//////////////////////////
//////////////////////////
//// Global functions ////
//////////////////////////
//////////////////////////
#if SERVER || CLIENT || UI
LoadoutEntry function Loadout_MeleeSkin( ItemFlavor character )
{
	Assert( ItemFlavor_GetType( character ) == eItemType.character )

	return fileLevel.characterMeleeSkinLoadoutEntryMap[character]
}
#endif


#if SERVER || CLIENT || UI
string function MeleeSkin_GetMainWeaponClassname( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( meleeSkin ), "mainWeaponClassname" )
}
#endif


#if SERVER || CLIENT || UI
string function MeleeSkin_GetOffhandWeaponClassname( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( meleeSkin ), "offhandWeaponClassname" )
}
#endif


#if SERVER || CLIENT || UI
asset function MeleeSkin_GetMenuModel( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	string mainWeaponClassname = MeleeSkin_GetMainWeaponClassname( meleeSkin )
	return GetWeaponInfoFileKeyFieldAsset_Global( mainWeaponClassname, "viewmodel" )
}
#endif


#if SERVER || CLIENT || UI
asset function MeleeSkin_GetMenuAnimSeq( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "menuAnimSeq" )
}
#endif

#if SERVER || CLIENT || UI
vector function MeleeSkin_GetMenuModelRotation( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsVector( ItemFlavor_GetAsset( meleeSkin ), "menuMdlRot" )
}
#endif


#if SERVER || CLIENT || UI
ItemFlavor function MeleeSkin_GetCharacterFlavor( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return fileLevel.meleeSkinCharacterMap[meleeSkin]
}
#endif

#if SERVER || CLIENT
bool function DoesWeaponTriggerMeleeAttack( entity weapon )
{
	return (weapon.IsWeaponMelee() || weapon.GetWeaponSettingBool( eWeaponVar.attack_button_presses_melee ))
}
#endif


#if SERVER || CLIENT
bool function DoesWeaponClassTriggerMeleeAttack( string weaponName )
{
	return (IsWeaponClassMelee( weaponName ) || GetWeaponInfoFileKeyField_GlobalBool( weaponName, "attack_button_presses_melee" ))
}
#endif


#if SERVER || CLIENT
bool function IsWeaponClassMelee( string weaponName )
{
	// (dw): meant to mimic weapon.IsWeaponMelee()
	int fireMode = expect int(GetWeaponInfoFileKeyField_Global( weaponName, "fire_mode" ))
	printt("IsWeaponClassMelee", weaponName, fireMode, eWeaponFireMode.offhandMelee, eWeaponFireMode.offhandMeleeHybrid)
	return (fireMode == eWeaponFireMode.offhandMelee || fireMode == eWeaponFireMode.offhandMeleeHybrid)
}
#endif


#if SERVER || CLIENT
void function SetObjectCanBeMeleed( entity ent, bool value )
{
	Assert( !ent.IsPlayer(), ent + " should not be a player. This is for non-player, non-NPC entities." )
	Assert( !ent.IsNPC(), ent + " should not be an NPC. This is for non-player, non-NPC entities." )

	ent.e.canBeMeleed = value
}
#endif


#if SERVER || CLIENT
entity function GetPlayerMeleeAttackWeapon( entity player )
{
	entity meleeAttackWeapon = player.GetActiveWeapon( eActiveInventorySlot.mainHand ) // Check if the active weapon is melee first
	if ( !IsValid( meleeAttackWeapon ) || !meleeAttackWeapon.IsWeaponMelee() )
	{
		meleeAttackWeapon = player.GetOffhandWeapon( OFFHAND_MELEE ) // Try using default melee weapon

		if ( !IsValid( meleeAttackWeapon ) )
			return null
	}

	Assert( meleeAttackWeapon.IsWeaponMelee() )

	return meleeAttackWeapon
}
#endif


#if SERVER || CLIENT
bool function IsValidMeleeAttackTarget( entity attacker, entity inputWeaponOrNull, entity attackWeapon, entity target )
{
	if( Gamemode() == eGamemodes.fs_prophunt && target.GetNetworkedClassName() == "prop_dynamic" )
		return true
	
	if( GetCurrentPlaylistVarBool( "is_practice_map", false ) || Playlist() == ePlaylists.fs_movementgym )
		return false

	if ( attacker == target )
		return false

	if ( target.IsBreakableGlass() )
		return true

	if ( !target.CanBeMeleed() )
		return false
	
	if ( IsFriendlyTeam( attacker.GetTeam(), target.GetTeam() ) && Gamemode() == eGamemodes.fs_snd && target.p.playerIsPlantingBomb) //avoid punching teammates while planting (qol)
		return false	

	if ( IsFriendlyTeam( attacker.GetTeam(), target.GetTeam() ) && Gamemode() == eGamemodes.fs_snd && target.p.isInExtendedUse) //avoid punching teammates while defusing (qol)
		return false	
	
	if ( IsFriendlyTeam( attacker.GetTeam(), target.GetTeam() ) && Gamemode() == eGamemodes.fs_duckhunt )
		return false

	if ( IsFriendlyTeam( attacker.GetTeam(), target.GetTeam() ) )
		return true

	if ( !attacker.DoesShareRealms( target ) )
		return false

	if ( IsValid( attackWeapon ) && !attackWeapon.GetMeleeCanHitHumanSized() && IsHumanSized( target ) )
		return false

	if ( target.IsPhaseShifted() )
		return false

	if ( target.IsPlayer() || target.IsNPC() )
	{
		// target is BaseCombatCharacter
		if ( target.ContextAction_IsMeleeExecutionTarget() )
			return false
	}
	else
	{
		if ( !target.e.canBeMeleed )
			return false
	}

	return true
}
#endif



///////////////////
///////////////////
//// Internals ////
///////////////////
///////////////////
#if SERVER || CLIENT
entity function GetMeleeAttackLungeTarget( entity attacker, entity meleeAttackWeapon )
{
	entity lungeTarget
	try{
		lungeTarget = PlayerMelee_LungeConeTrace( attacker, meleeAttackWeapon, SHARED_CB_IS_VALID_MELEE_ATTACK_TARGET )
	}catch(e420)
	{
		printt( "R5R Sword Made by @CafeFPS and Respawn - Jan 15 2024 <3" )
	}
	return lungeTarget
}
#endif


#if SERVER || CLIENT
bool function AttackerCanStartMelee( entity attacker, entity inputWeaponOrNull, entity attackWeapon )
{
	Assert( attacker.IsPlayer() )

	if ( !IsAlive( attacker ) )
		return false

	if ( attacker.PlayerMelee_GetState() != PLAYER_MELEE_STATE_NONE )
		return false

	if ( attacker.IsWeaponSlotDisabled( eActiveInventorySlot.mainHand ) ) // Covers bleedout
		return false

	//if ( PlayerIsInMeleeBlockingADS( attacker ) )
	//	return false
	
	if ( attacker.IsPhaseShifted() )
    {
        return false
    }
	
	if ( attacker.Player_IsFreefalling() )
    {
        return false
    }

	if ( attacker.Lunge_IsActive() )
		return false

	if ( IsValid( inputWeaponOrNull ) && !GetCurrentPlaylistVarBool( "quick_melee_enabled", true )
			&& inputWeaponOrNull == attacker.GetOffhandWeapon( OFFHAND_MELEE ) )
		return false

	return true
}
#endif


#if SERVER || CLIENT
bool function CodeCallback_IsValidMeleeAttackTarget( entity attacker, entity target )
{
	entity meleeInputWeapon  = null // We don't know what it is because they haven't pressed a button yet
	entity meleeAttackWeapon = GetPlayerMeleeAttackWeapon( attacker )

	if ( !IsValidMeleeAttackTarget( attacker, meleeInputWeapon, meleeAttackWeapon, target ) )
		return false

	return true
}
#endif


#if SERVER || CLIENT
void function CodeCallback_OnMeleePressed( entity attacker, entity meleeInputWeapon )
{
	#if SERVER
	// Warning( "//NEW MELEE ATTACK// CodeCallback_OnMeleePressed" )
	#endif
	if( !IsValid( attacker ) || !IsValid( meleeInputWeapon ) )
		return

	attacker.p.TEMP_lastMeleeInputWeapon = meleeInputWeapon

	entity meleeAttackWeapon = GetPlayerMeleeAttackWeapon( attacker )

	if( !IsValid( meleeAttackWeapon ) || !meleeAttackWeapon.IsReadyToFire() )
		return

	int currentUsedSlot = SURVIVAL_GetActiveWeaponSlot( attacker )

	entity weaponx
	if( currentUsedSlot != -1 )
		weaponx = attacker.GetNormalWeapon( currentUsedSlot  )

	if ( !AttackerCanStartMelee( attacker, meleeInputWeapon, meleeAttackWeapon ) )
		return

	bool shouldstartattack = false
	if( IsValid( weaponx ) && weaponx.GetWeaponClassName() == "mp_weapon_titan_sword" && !attacker.p.isSecondaryMeleeAttack )
	{
		printt( "CUSTOM MELEE PRIMARY - CodeCallback_OnMeleePressed" )
		if( TitanSword_Dash_TryDash( attacker, weaponx ) )
		{
			attacker.PlayerMelee_EndAttack()
			weaponx.Raise()
			return
		} else if ( TitanSword_Slam_TrySlam( attacker, weaponx ) )
		{
		} else if ( TitanSword_Heavy_TryHeavyAttack( attacker, weaponx ) )
		{
			TitanSword_TryMultiAttack( attacker, weaponx )
		}

		attacker.PlayerMelee_StartAttack( PLAYER_MELEE_STATE_HUMAN_KICK_ATTACK )
		#if SERVER
			meleeAttackWeapon.EmitWeaponNpcSound_DontUpdateLastFiredTime( 200, 0.2 )
		#endif
		attacker.SetSelectedOffhand( eActiveInventorySlot.mainHand, meleeAttackWeapon )
		attacker.p.isSecondaryMeleeAttack = false
		return
	}else if( IsValid( weaponx ) && weaponx.GetWeaponClassName() == "mp_weapon_titan_sword" && attacker.p.isSecondaryMeleeAttack )
	{
		if( !weaponx.IsReadyToFire() )
			return

		printt( "CUSTOM MELEE SECONDARY - CodeCallback_OnMeleePressed" )
		if( TitanSword_Launcher_TryLauncher( attacker, weaponx ) )
		{
			shouldstartattack = true
		} else
		{
			//Light attack
			weaponx.RemoveMod( "heavy_melee" )
			meleeAttackWeapon.RemoveMod( "heavy_melee"  )
			weaponx.AddMod( "super_melee" )
			meleeAttackWeapon.AddMod( "super_melee" )

			shouldstartattack = true
		}

		if( !shouldstartattack )
			return

		attacker.PlayerMelee_StartAttack( PLAYER_MELEE_STATE_HUMAN_KICK_ATTACK )
		#if SERVER
			meleeAttackWeapon.EmitWeaponNpcSound_DontUpdateLastFiredTime( 200, 0.2 )
		#endif
		attacker.SetSelectedOffhand( eActiveInventorySlot.mainHand, meleeAttackWeapon )
		attacker.p.isSecondaryMeleeAttack = false
		return
	}		

	#if SERVER
	if(GetCurrentPlaylistVarBool( "firingrange_aimtrainerbycolombia", false ))
	{
		entity player = attacker
		int basedamage = 30 //!FIXME
		int ornull projectilespershot = 1 //!FIXME
		int pellets = 1
		if(projectilespershot != null)
		{
			pellets = expect int(projectilespershot)
			player.p.totalPossibleDamage += (basedamage * pellets)
		}
		else 
			player.p.totalPossibleDamage += basedamage
		
		//add 1 hit to total hits
		player.p.straferTotalShots += (1*pellets)
		
		Remote_CallFunction_NonReplay(player, "ServerCallback_LiveStatsUIDamageViaWeaponAttack", basedamage, basedamage * pellets)
		Remote_CallFunction_NonReplay(player, "ServerCallback_LiveStatsUIAccuracyViaTotalShots", pellets)
	}
	#endif

	attacker.PlayerMelee_StartAttack( PLAYER_MELEE_STATE_HUMAN_KICK_ATTACK )

	if(  IsValid( attacker.GetActiveWeapon( eActiveInventorySlot.mainHand ) ) )
	{
		if( attacker.GetActiveWeapon( eActiveInventorySlot.mainHand ).GetWeaponClassName() == "mp_weapon_energysword" && !meleeAttackWeapon.HasMod( "energysword" ) )
		{
			meleeAttackWeapon.AddMod( "energysword" )	
		}
		else if ( attacker.GetActiveWeapon( eActiveInventorySlot.mainHand ).GetWeaponClassName() != "mp_weapon_energysword" )
		{
			meleeAttackWeapon.RemoveMod( "energysword" )
		}
	}

	// DOOR BUSTING PROTOTYPE
	// todo(dw): use better door detection logic
	{
		bool isShadowSquad = false
		if ( IsFallLTM() )
			isShadowSquad = IsPlayerShadowSquad( attacker )

		bool doorLungeEnabled = !isShadowSquad && GetCurrentPlaylistVarBool( "blockable_door_can_be_hurt_by_special_kick", true )
		entity lungeTarget    = GetMeleeAttackLungeTarget( attacker, meleeAttackWeapon )

		vector eyeTraceHitPos
		if ( doorLungeEnabled && !IsValid( lungeTarget ) )
		{
			//Cafe was here
			array<entity> ignoreEnts = [ attacker ]
			
			array<entity> tocheck
			tocheck.extend( GetAllPropDoors() )
			tocheck.extend( GetAllPropDoors_BigOnes() )

			foreach( door in tocheck )
			{
				if( !IsValid( door ) )
					continue

				if( !door.DoesShareRealms( attacker ) )
				{
					ignoreEnts.append( door )
				}
			}

			TraceResults eyeTrace = TraceLine(
				attacker.EyePosition(), attacker.EyePosition() + 150.0 * attacker.GetViewVector(),
				ignoreEnts, TRACE_MASK_NPCWORLDSTATIC, TRACE_COLLISION_GROUP_NONE
			)
			lungeTarget = eyeTrace.hitEnt
			eyeTraceHitPos = eyeTrace.endPos
		}

		
		if ( doorLungeEnabled && IsValid( lungeTarget ) && IsDoor( lungeTarget ) && lungeTarget.e.canBeMeleed && lungeTarget.DoesShareRealms( attacker ) )
		{
			meleeAttackWeapon.AddMod( "proto_door_kick" )
			
			if( meleeAttackWeapon.GetWeaponClassName() != "melee_titan_sword" )
			{
				attacker.Lunge_SetTargetPosition( <eyeTraceHitPos.x, eyeTraceHitPos.y, lungeTarget.GetWorldSpaceCenter().z - 52 > ) //
				attacker.Lunge_SetSmoothTime( 0.7 )
				attacker.Lunge_EnableFlying()
			}
		} else if( PlayerHasPassive( attacker, ePassives.PAS_SHOTGUN_KICK ) )
		{
			meleeAttackWeapon.AddMod( "proto_door_kick" )
		}
		else if ( meleeAttackWeapon.HasMod( "proto_door_kick" ) )
		{
			meleeAttackWeapon.RemoveMod( "proto_door_kick" )
		}
	}

	#if SERVER
		meleeAttackWeapon.EmitWeaponNpcSound_DontUpdateLastFiredTime( 200, 0.2 )
	#endif

	attacker.SetSelectedOffhand( eActiveInventorySlot.mainHand, meleeAttackWeapon )
}
#endif


#if SERVER || CLIENT
void function CodeCallback_OnMeleeStartActivity( entity attacker, entity meleeAttackWeapon )
{
	// printt( "CodeCallback_OnMeleeStartActivity ", Time() )
	if ( GetBugReproNum() == 53982 )
		Assert( attacker.PlayerMelee_IsAttackActive() )
	else if ( !IsValid( attacker ) || !IsValid( meleeAttackWeapon ) || !attacker.PlayerMelee_IsAttackActive() ) 
		return // todo(dw): workaround for R5DEV-53982

	#if CLIENT
	if( Flowstate_IsHaloMode() )
	{
		FS_ForceDestroyCustomAdsOverlay()
		GetLocalClientPlayer().ClientCommand( "-zoom" )
	}
	#endif
	
	#if SERVER
	const float STUN_EFFECT_CUTOFF = 0.05
	float movestunEffect = StatusEffect_GetSeverity( attacker, eStatusEffect.move_slow )
	bool movestunBlocked = (movestunEffect > STUN_EFFECT_CUTOFF)
	if ( !movestunBlocked )
	{
		if( meleeAttackWeapon.GetWeaponClassName() == "melee_titan_sword" && !FS_TitanSword_ModsShouldTriggerLunge( attacker, meleeAttackWeapon ) )
			return

		entity lungeTarget = GetMeleeAttackLungeTarget( attacker, meleeAttackWeapon )
		if ( IsValid( lungeTarget ) && lungeTarget.IsPlayer() && lungeTarget.DoesShareRealms( attacker ) || IsValid( lungeTarget ) && lungeTarget.IsNPC() && lungeTarget.DoesShareRealms( attacker ))
		{
			bool lungeStartWasSuccessful
			
			if(!meleeAttackWeapon.HasMod( "energysword" ) )
			{
				lungeStartWasSuccessful = attacker.Lunge_SetTargetEntity( lungeTarget )
				if ( lungeStartWasSuccessful && attacker.IsOnGround() )
				{
					attacker.Lunge_LockPitch( true )
				}
			}
			else
			{
				attacker.Lunge_SetTargetPosition( <lungeTarget.GetOrigin().x, lungeTarget.GetOrigin().y, lungeTarget.GetOrigin().z> +  AnglesToForward(attacker.GetAngles())*150)
				attacker.Lunge_EnableFlying()
				attacker.Lunge_SetMaxEndSpeed(100)
				// if(attacker.IsOnGround())
					// attacker.Lunge_LockPitch( true )

				#if SERVER
				thread DoDamage_EnergySword(attacker, meleeAttackWeapon, lungeTarget)
				#endif
			}
		}
	}
	#endif
}	
#endif

#if SERVER
void function DoDamage_EnergySword(entity attacker, entity meleeAttackWeapon, entity lungeTarget)
{
	while(attacker.Lunge_IsLungingToPosition() && Distance2D( lungeTarget.GetOrigin(), attacker.GetOrigin() ) > 100)
	{
		// printt(Distance2D( lungeTarget.GetOrigin(), attacker.GetOrigin()))
		WaitFrame()
	}
	
	if(!IsValid(lungeTarget) || IsValid(lungeTarget) && !IsAlive(lungeTarget)) return
	
	string weaponName = meleeAttackWeapon.GetWeaponClassName()

	int damageSourceId   = (weaponName in eDamageSourceId ? eDamageSourceId[weaponName] : eDamageSourceId.damagedef_unknownBugIt)
	lungeTarget.TakeDamage( 420, attacker, attacker, { damageSourceId = damageSourceId })
}
#endif


#if SERVER || CLIENT
void function CodeCallback_OnMeleeHeld( entity player, entity weapon )
{
	//
}
#endif


#if SERVER || CLIENT
void function CodeCallback_OnMeleeReleased( entity player, entity weapon )
{
	//
}
#endif


#if SERVER || CLIENT
void function CodeCallback_OnMeleeAttackAnimEvent( entity attacker, entity meleeAttackWeapon )
{
	// printt( "CodeCallback_OnMeleeAttackAnimEvent ", Time() )
	meleeAttackWeapon = GetPlayerMeleeAttackWeapon( attacker )
	// return
	Assert( IsValid( attacker ) )

	if ( !attacker.PlayerMelee_IsAttackActive() )
		return // (dw): see R5DEV-53886
	
	if ( attacker.GetActiveWeapon( eActiveInventorySlot.mainHand ).GetWeaponClassName() == "mp_weapon_energysword" )//|| attacker.GetActiveWeapon( eActiveInventorySlot.mainHand ).GetWeaponClassName() == "mp_weapon_lightsaber") 
		return

	Assert( attacker.PlayerMelee_GetState() == PLAYER_MELEE_STATE_HUMAN_KICK_ATTACK )
	Assert( !attacker.PlayerMelee_GetAttackHitEntity() )

	#if SERVER
		PIN_OnWeaponAttack( attacker, meleeAttackWeapon, meleeAttackWeapon.GetWeaponClassName(), 1, attacker.GetOrigin(), attacker.GetViewForward() )
	#endif

	float attackRange = meleeAttackWeapon.GetMeleeAttackRange()

	// attack trace
	table legacyTraceResults = PlayerMelee_AttackTrace( attacker, attackRange, (bool function( entity attacker, entity target ) : (meleeAttackWeapon) {
		return IsValidMeleeAttackTarget( attacker, null, meleeAttackWeapon, target )
	}) )

	//Titan sword hook
	if ( GetPlayerMeleeOffhandWeapon( attacker ) ) //Gets titan sword offhand
	{
		int currentUsedSlot = SURVIVAL_GetActiveWeaponSlot( attacker )
		entity weaponx
		if( currentUsedSlot != -1 )
			weaponx = attacker.GetNormalWeapon( currentUsedSlot  )

		if( !IsValid( weaponx ) || weaponx.GetWeaponClassName() != "mp_weapon_titan_sword" )
			return

		printt( "Sent to Melee_Attack() - Sh_melee - Titan Sword" )
		Melee_Attack( attacker, meleeAttackWeapon, legacyTraceResults )
		return
	}

	entity target         = expect entity(legacyTraceResults.ent)
	vector endPosition    = expect vector(legacyTraceResults.position)
	int surfaceProp       = expect int(legacyTraceResults.surfaceProp)
	int staticPropID      = expect int(legacyTraceResults.staticPropID)
	int impactEffectFlags = expect int(legacyTraceResults.impactEffectFlags)
	int codeDamageType    = expect int(legacyTraceResults.damageType)
	vector startPosition  = expect vector(legacyTraceResults.startPosition)
	vector hitNormal      = Normalize( startPosition - endPosition )
	int meleeAttackWeaponImpactTableIndex = meleeAttackWeapon.GetImpactTableIndex()

	// Early out if we didn't hit anything
	if ( !IsValid( target ) )
		return
	
	if( Gamemode() == eGamemodes.fs_prophunt && target.GetNetworkedClassName() == "prop_dynamic" && IsValid(target.GetParent()))
	{
		target = target.GetParent()
	
		if ( !IsValid( target ) )
			return
	}
	// Impact effects
	if ( !attacker.PlayerMelee_IsAttackActive() )
		return
		
	impactEffectFlags = impactEffectFlags

	attacker.DispatchImpactEffects( target,
	startPosition, endPosition, hitNormal,
	surfaceProp, staticPropID, codeDamageType, meleeAttackWeapon.GetImpactTableIndex(),
	attacker, impactEffectFlags )
	
	// Melee state
	attacker.PlayerMelee_SetAttackHitEntity( target )
	if ( !target.IsWorld() )
		attacker.PlayerMelee_SetAttackRecoveryShouldBeQuick( true )

	// Special case for breakable glass
	if ( target.IsBreakableGlass() )
	{
		#if SERVER
			target.BreakSphere( endPosition, 50 )
		#endif // #if SERVER
		return
	}

	// Melee hit confirmation
	bool targetIsEnemy  = IsEnemyTeam( attacker.GetTeam(), target.GetTeam() )
	float severityScale = (targetIsEnemy ? MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_ENEMY : MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_NOT_ENEMY)
	meleeAttackWeapon.DoMeleeHitConfirmation( severityScale )

	// Damage (server only)
	#if SERVER
		string weaponName = meleeAttackWeapon.GetWeaponClassName()

		int damageAmount     = meleeAttackWeapon.GetDamageAmountForArmorType( target.GetArmorType() )
		int damageScriptType = meleeAttackWeapon.GetWeaponDamageFlags()
		int damageType       = DMG_MELEE_ATTACK
		int damageSourceId   = (weaponName in eDamageSourceId ? eDamageSourceId[weaponName] : eDamageSourceId.damagedef_unknownBugIt)
		vector damageOrigin  = endPosition
		vector damageForce   = AnglesToForward( attacker.EyeAngles() ) * meleeAttackWeapon.GetWeaponDamageForce()

		// if ( target.IsNPC() && target.CanBeGroundExecuted() )
		// {
			// damageAmount = target.GetHealth()
			// damageScriptType = damageScriptType | DF_RAGDOLL
			// damageForce = <0, 0, 0>
		// }

		table damageTable = {
			scriptType = meleeAttackWeapon.GetWeaponDamageFlags(),
			damageType = damageType,
			damageSourceId = damageSourceId,
			origin = damageOrigin,
			force = damageForce
		}
		target.TakeDamage( damageAmount, attacker, attacker, damageTable )
		attacker.TraceAttackToTriggers( damageAmount, attacker, attacker, damageTable, startPosition, endPosition, hitNormal )
	#endif

	// knockback
	{
		float  knockbackMagnitude	= MELEE_KNOCKBACK_SCALE
		
		if( meleeAttackWeapon.HasMod( "heavy_melee" ) )
			knockbackMagnitude	= TITANSWORD_MELEE_KNOCKBACK_SCALE
		else if( meleeAttackWeapon.HasMod( "launcher" ) )
			knockbackMagnitude	= TITANSWORD_LAUNCHER_MELEE_KNOCKBACK_SCALE

		vector lookDirection    = attacker.GetViewForward()
		vector pushBackVelocity	= knockbackMagnitude * lookDirection

		if ( target.IsPlayer() || target.IsNPC() || target.IsPlayerDecoy() )
		{
			vector targetDirection = target.GetWorldSpaceCenter() - attacker.GetWorldSpaceCenter()
			if ( DotProduct( lookDirection, targetDirection ) < 0 )
				pushBackVelocity = -pushBackVelocity
		}

		if ( target.IsPlayer() )
		{
			target.KnockBack( pushBackVelocity, MELEE_KNOCKBACK_DURATION )
		}
		// else if ( !IsWorldSpawn( target ) )
		// {
			// #if SERVER
				// float pushbackScale = target.IsOnGround() ? 1.0 : 0.1
				// PushEnt( target, pushBackVelocity * pushbackScale )
			// #endif
		// }

		// Must end the attack or the melee lunge (which is active during the attack) will cancel our the knock back
		attacker.PlayerMelee_EndAttack()
		if( meleeAttackWeapon.GetWeaponClassName() != "melee_titan_sword" )
			attacker.Lunge_ClearTarget()

		vector attackerKnockBackVelocity = -pushBackVelocity
		const float GroundOffset = 10
		bool isAttackingGround           = (endPosition.z - GroundOffset) <= attacker.GetOrigin().z
		attackerKnockBackVelocity.z = 0.0
		attackerKnockBackVelocity *= 0.5
		float currentVelDotInKnockbackDir = -1.0

		if( GetCurrentPlaylistVarBool( "flowstate_enable_punch_boosting", false ) )
			attackerKnockBackVelocity += attacker.GetVelocity()

		if ( LengthSqr( attackerKnockBackVelocity ) > 0.0 && !isAttackingGround && meleeAttackWeapon.GetWeaponClassName() != "melee_titan_sword" )
		{
			vector currentVel = attacker.GetVelocity()
			currentVelDotInKnockbackDir = DotProduct(Normalize(attackerKnockBackVelocity), Normalize(currentVel))
			if( currentVelDotInKnockbackDir <= 0.0  ) 
			{
				attacker.KnockBack( attackerKnockBackVelocity, 0.25 )
			}
		}

		attacker.GrappleDetach()
	}
}

void function Melee_Attack( entity attacker, entity meleeAttackWeapon, table legacyTraceResults )
{
	entity target         = expect entity(legacyTraceResults.ent)
	vector endPosition    = expect vector(legacyTraceResults.position)
	int surfaceProp       = expect int(legacyTraceResults.surfaceProp)
	int staticPropID      = expect int(legacyTraceResults.staticPropID)
	int impactEffectFlags = expect int(legacyTraceResults.impactEffectFlags)
	int codeDamageType    = expect int(legacyTraceResults.damageType)
	vector startPosition  = expect vector(legacyTraceResults.startPosition)
	vector hitNormal      = Normalize( startPosition - endPosition )
	int meleeAttackWeaponImpactTableIndex = meleeAttackWeapon.GetImpactTableIndex()

	int currentUsedSlot = SURVIVAL_GetActiveWeaponSlot( gp()[0] )
	entity weaponx
	if( currentUsedSlot != -1 )
		weaponx = attacker.GetNormalWeapon( currentUsedSlot  )
	
	if( !IsValid( weaponx ) || weaponx.GetWeaponClassName() != "mp_weapon_titan_sword" )
		return

	entity lungeTarget

	if ( attacker.p.targetsForAoeDamage.len() <= 1 )
	{
		lungeTarget = GetMeleeAttackLungeTarget( attacker, meleeAttackWeapon )
		if ( IsValid( lungeTarget ) && lungeTarget.IsPlayer() || IsValid( lungeTarget ) && lungeTarget.IsNPC())
		{
			VisibleEntityInCone lungeTargetConeStruct
			lungeTargetConeStruct.ent = lungeTarget
			vector visiblePosition = lungeTarget.GetOrigin()

			attacker.p.targetsForAoeDamage.clear()
			attacker.p.targetsForAoeDamage.append( lungeTargetConeStruct )
			printt( "Lunge Target will receive damage" )
		}
	}

	if ( attacker.p.targetsForAoeDamage.len() == 0 )
	{
		if( IsValid( target ) )
			attacker.DispatchImpactEffects( target, startPosition, endPosition, hitNormal, surfaceProp, staticPropID, codeDamageType, meleeAttackWeapon.GetImpactTableIndex(), attacker, impactEffectFlags )

		attacker.Lunge_ClearTarget()
		attacker.PlayerMelee_EndAttack()
		attacker.GrappleDetach()
		attacker.p.launcherStarted = false
		return
	}
	#if SERVER
	string weaponName = meleeAttackWeapon.GetWeaponClassName()

	int damageAmount     = -1
	int damageScriptType = meleeAttackWeapon.GetWeaponDamageFlags()
	int damageType       = DMG_MELEE_ATTACK
	int damageSourceId   = (weaponName in eDamageSourceId ? eDamageSourceId[weaponName] : eDamageSourceId.damagedef_unknownBugIt)
	vector damageForce   = AnglesToForward( attacker.EyeAngles() ) * meleeAttackWeapon.GetWeaponDamageForce()

	if( weaponx.GetWeaponClassName() == "mp_weapon_titan_sword" )
	{
		weaponName = weaponx.GetWeaponClassName()
		damageScriptType = weaponx.GetWeaponDamageFlags()
		damageSourceId   = (weaponName in eDamageSourceId ? eDamageSourceId[weaponName] : eDamageSourceId.damagedef_unknownBugIt)
		damageForce   = AnglesToForward( attacker.EyeAngles() ) * weaponx.GetWeaponDamageForce()
	}
	#endif
	
	attacker.PlayerMelee_SetAttackRecoveryShouldBeQuick( true )

	if ( !attacker.PlayerMelee_IsAttackActive() )
		return

	foreach( tracedEntStruct in attacker.p.targetsForAoeDamage )
	{
		target = tracedEntStruct.ent
		endPosition = target.GetOrigin()

		if( !IsValid( target ) )
			continue
		
		if( target.IsPlayer() && !IsAlive( target ) )
			continue

		if( !CodeCallback_IsValidMeleeAttackTarget( attacker, target ) )
			continue

		if( target.LookupAttachment( "CHESTFOCUS" ) != 0 )
			endPosition = target.GetAttachmentOrigin( target.LookupAttachment( "CHESTFOCUS" ) )

		bool shouldCut = false
		bool isLightAttack = false
		if( weaponx.HasMod( "launcher" ) )
		{
			printt( "LAUNCHER VICTIM OVERRIDE", Time(), attacker.p.launcherStarted )
			if( target.IsPlayer() )
			{
				target.GrappleDetach()
			}

			TitanSword_Launcher_VictimHitOverride( weaponx, attacker, target, endPosition )
			attacker.p.targetsForAoeDamage.clear()
			return
		}

		if( !target.IsOnGround() && !attacker.IsOnGround() && weaponx.HasMod( "slam" ) )
		{
			printt( "SLAM VICTIM OVERRIDE ON AIR" )
			TitanSword_Slam_VictimHitOverride( weaponx, attacker, target, false )

			attacker.PlayerMelee_EndAttack()
			attacker.GrappleDetach()
			return
		}

		if( meleeAttackWeapon.HasMod( "super_melee" ) && !meleeAttackWeapon.HasMod( "heavy_melee" ) )
		{
			printt( "SUPER MELEE VICTIM OVERRIDE" )
			if( target.IsPlayer() )
			{
				target.GrappleDetach()
			}

			TitanSword_Light_VictimHitOverride( weaponx, attacker, target, <0,0,0> )

			#if SERVER
			damageForce   = <0,0,0> // AnglesToForward( attacker.EyeAngles() ) * weaponx.GetWeaponDamageForce()
			#endif

			shouldCut = true
		}		

		if( IsDoor( target ) )
		{
			printt( "Destroying Door in Aoe Sword Logic" )
		}
		#if SERVER
		damageAmount = weaponx.GetDamageAmountForArmorType( target.GetArmorType() )
		#endif

		// Impact effects
		attacker.DispatchImpactEffects( target,
		startPosition, endPosition, hitNormal,
		surfaceProp, staticPropID, codeDamageType, meleeAttackWeapon.GetImpactTableIndex(),
		attacker, impactEffectFlags )
		
		// Melee state - Reenable if we want to freezelook
		if( !IsValid( attacker.PlayerMelee_GetAttackHitEntity() ) )
			attacker.PlayerMelee_SetAttackHitEntity( target )

		// Melee hit confirmation
		bool targetIsEnemy  = IsEnemyTeam( attacker.GetTeam(), target.GetTeam() )
		float severityScale = (targetIsEnemy ? MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_ENEMY : MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_NOT_ENEMY)
		meleeAttackWeapon.DoMeleeHitConfirmation( severityScale )

		// Damage (server only)
		#if SERVER
		table damageTable = {
			scriptType = meleeAttackWeapon.GetWeaponDamageFlags(),
			damageType = damageType,
			damageSourceId = damageSourceId,
			origin = target.GetOrigin(),
			force = damageForce
		}
		target.TakeDamage( damageAmount, attacker, attacker, damageTable )
		printt( "ENT DAMAGED ", damageAmount, target, " - From Sh_Melee" )

		// attacker.TraceAttackToTriggers( damageAmount, attacker, attacker, damageTable, startPosition, endPosition, hitNormal )
		#endif

		//knockback logic
		if( !weaponx.HasMod( "super_melee" ) && !weaponx.HasMod( "super" ) )
		{
			float  knockbackMagnitude = MELEE_KNOCKBACK_SCALE

			if( weaponx.HasMod( "heavy_melee" ) )
			{
				knockbackMagnitude	= TITANSWORD_MELEE_KNOCKBACK_SCALE
				#if SERVER
				if ( !IsFriendlyTeam( attacker.GetTeam(), target.GetTeam() ) )
					FS_TitanSword_ReduceSuperCooldown( attacker, 2 )
				#endif
			}
			else if( weaponx.HasMod( "launcher" ) )
			{
				knockbackMagnitude	= TITANSWORD_LAUNCHER_MELEE_KNOCKBACK_SCALE
			}

			vector lookDirection    = attacker.GetViewForward()
			vector pushBackVelocity	= knockbackMagnitude * lookDirection

			if ( target.IsPlayer() || target.IsNPC() || target.IsPlayerDecoy() )
			{
				vector targetDirection = target.GetWorldSpaceCenter() - attacker.GetWorldSpaceCenter()
				if ( DotProduct( lookDirection, targetDirection ) < 0 )
					pushBackVelocity = -pushBackVelocity
			}

			if ( target.IsPlayer() )
			{
				if ( LengthSqr( pushBackVelocity ) > 0.0 )
				{
					target.KnockBack( pushBackVelocity, MELEE_KNOCKBACK_DURATION )
				}
			}
		}
		
		if( shouldCut )
			break
	}

	attacker.p.targetsForAoeDamage.clear()
	attacker.PlayerMelee_EndAttack()
	attacker.GrappleDetach()

	// printt( "[+] Sh_melee - End" )
}
#endif	


#if SERVER
void function CodeCallback_OnMeleeKilled( entity target )
{
	return
}
#endif


#if SERVER
void function CodeCallback_NPCMeleeChargedPlayerOrNPC( entity ent, var damageInfo )
{
	return
}
#endif


#if CLIENT
bool function ClientCodeCallback_ShowMeleePrompt( entity player )
{
	return false
}
#endif



///////////////////////
///////////////////////
//// Dev functions ////
///////////////////////
///////////////////////
#if SERVER && DEVELOPER
void function DEV_UpdatePlayerMeleeWeaponCosmetics( entity player, ItemFlavor unused )
{
	// TEMP COMMENT
	
	// if ( !IsLobby() )
	// 	SURVIVAL_TryGivePlayerDefaultMeleeWeapons( player )
}
#endif // SERVER


