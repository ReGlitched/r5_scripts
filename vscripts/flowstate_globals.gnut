
globalize_all_functions

global struct SH_flowstateSettings
{
	bool GetReplayIsEnabled
	float GetReplayDelay
	float GetRespawnDelay
	float GetDefaultShieldHP
	float GetOOBDamagePercent
	float GetVotingTime
	string Hoster
	string Admin1
	string Admin2
	string Admin3
	string Admin4
	int RoundTime
	string RingColor
	string BubbleColor
	bool ResetKillsEachRound
	bool Timer
	bool LockPOI
	int LockedPOI
	bool AdminTgive
	float TgiveDelay
	bool ForceCharacter
	int ChosenCharacter
	bool ForceAdminCharacter
	int ChosenAdminCharacter
	bool DummyOverride
	bool AutoreloadOnKillPrimary	
	bool AutoreloadOnKillSecondary
	bool RandomGuns
	bool RandomTactical
	bool RandomUltimate
	bool RandomGunsEverydie
	bool FIESTAShieldsStreak
	bool FIESTADeathboxes
	bool RandomGunsMetagame
	bool KillshotEnabled
	bool Droppods
	bool ExtrashieldsEnabled
	float ExtrashieldsSpawntime
	float ExtrashieldValue
	bool Gungame
	bool GungameRandomAbilities
	bool SURF
	int SURFRoundTime
	bool SURFLockPOI
	int SURFLockedPOI
	bool EnableAutoChangeLevel
	int AutoChangeLevelRounds
	bool EnableSkillTrainerByColombia
	bool EnableCustomMapByBiscutz
	bool EnableWhiteForestByZero
	bool EnableBrightWaterByZero
	bool EnableCaveByBlessedSeal
	bool EnableShipmentByAyeZee
	bool EnableKillhouseByAyeZee
	bool EnableNuketownByAyeZee	
	bool DoorsEnabled
	int MaxPingAllowed
	bool KickHighPingPlayer
	bool EnableEncore
	bool EnableKillyardByDEAFPS
	bool EnableDustmentByDEAFPS
	bool EnableShoothouseByDEAFPS
	bool EnableRustByDEAFPS
	bool EnableNCanalsByDEAFPS
	bool EnableEncoreNuketownByAyeZee
	bool EnableMovementGym
	bool EnableMovementGymLogs
	bool MovementGym_ClassicMovement
	int MovementGym_ClassicMovement_Type
	bool MovementGym_ClassicMovement_AutoBHOP	
	bool GetRespawnKitEnabled
	bool movementgym
	bool dm_oddball
	bool haloMod_oddball
	bool fs_1v1
	bool fs_lgduels_1v1
	bool fs_dm_fast_instagib
	bool fs_dm
	bool Is_PartyCrasher
	bool Is_Canyon_Staging
	bool IsHaloMode
	bool DisableAllMapTriggers
	bool Is_gamemode_1v1_type
	bool GivePassive
	bool GiveTactical
	bool RestMsg
	float itemDissolveTime
	bool CycleHaloPlaylists
	bool EnableReporting
	bool EndlessFFAorTDM
	
}

global SH_flowstateSettings fsGlobal

void function Initialize_SH_FlowstateSettings()
{
	#if DISABLE_NETINFO && DEVELOPER
		SetConVarInt( "net_showpeaks", 0 )
	#endif
	
	fsGlobal.GetReplayIsEnabled 					= GetCurrentPlaylistVarBool( "replay_enabled", true )
	fsGlobal.GetReplayDelay 						= GetCurrentPlaylistVarFloat( "replay_delay", 5 )
	fsGlobal.GetRespawnDelay						= GetCurrentPlaylistVarFloat( "respawn_delay", 3.5 )
	fsGlobal.GetDefaultShieldHP 					= GetCurrentPlaylistVarFloat( "default_shield_hp", 100 )
	fsGlobal.GetOOBDamagePercent 					= GetCurrentPlaylistVarFloat( "oob_damage_percent", 10 )
	fsGlobal.GetVotingTime 							= GetCurrentPlaylistVarFloat( "voting_time", 5 )
	fsGlobal.Hoster 								= GetCurrentPlaylistVarString( "flowstateHoster", "ColombiaFPS" )
	fsGlobal.Admin1 								= GetCurrentPlaylistVarString( "flowstateAdmin1", "ColombiaFPS" )
	fsGlobal.Admin2 								= GetCurrentPlaylistVarString( "flowstateAdmin2", "ColombiaFPS" )
	fsGlobal.Admin3 								= GetCurrentPlaylistVarString( "flowstateAdmin3", "ColombiaFPS" )
	fsGlobal.Admin4 								= GetCurrentPlaylistVarString( "flowstateAdmin4", "ColombiaFPS" )
	fsGlobal.RoundTime 								= GetCurrentPlaylistVarInt( "flowstateRoundtime", 1800 )
	fsGlobal.RingColor 								= GetCurrentPlaylistVarString( "flowstateBubble", "255, 120, 32" )
	fsGlobal.BubbleColor 							= GetCurrentPlaylistVarString( "flowstateBubble", "255, 120, 32" )
	fsGlobal.ResetKillsEachRound 					= GetCurrentPlaylistVarBool( "flowstateResetKills", true )
	fsGlobal.Timer 									= GetCurrentPlaylistVarBool( "flowstateTimer", true )
	fsGlobal.LockPOI 								= GetCurrentPlaylistVarBool( "flowstateLockPOI", false )
	fsGlobal.LockedPOI 								= GetCurrentPlaylistVarInt( "flowstateLockeedPOI", 0)
	fsGlobal.AdminTgive 							= GetCurrentPlaylistVarBool( "flowstateAdminTgive", true ) // Is tgive admin-only? 
	fsGlobal.TgiveDelay 							= GetCurrentPlaylistVarFloat( "flowstateTgiveDelay", 1.0 )
	fsGlobal.ForceCharacter 						= GetCurrentPlaylistVarBool( "flowstateForceCharacter", true )
	fsGlobal.ChosenCharacter 						= GetCurrentPlaylistVarInt( "flowstateChosenCharacter", 8 )
	fsGlobal.ForceAdminCharacter 					= GetCurrentPlaylistVarBool( "flowstateForceAdminCharacter", true )
	fsGlobal.ChosenAdminCharacter 					= GetCurrentPlaylistVarInt( "flowstateChosenAdminCharacter", 8 )
	fsGlobal.DummyOverride 							= GetCurrentPlaylistVarBool( "flowstateDummyOverride", false )
	fsGlobal.AutoreloadOnKillPrimary 				= GetCurrentPlaylistVarBool( "flowstateAutoreloadPrimary", true )
	fsGlobal.AutoreloadOnKillSecondary 				= GetCurrentPlaylistVarBool( "flowstateAutoreloadSecondary", true )
	fsGlobal.RandomGuns 							= GetCurrentPlaylistVarBool( "flowstateRandomGuns", false )
	fsGlobal.RandomTactical 						= GetCurrentPlaylistVarBool( "flowstateRandomTactical", false )
	fsGlobal.RandomUltimate 						= GetCurrentPlaylistVarBool( "flowstateRandomUltimate", false )
	fsGlobal.RandomGunsEverydie 					= GetCurrentPlaylistVarBool( "flowstateFiesta", false )
	fsGlobal.FIESTAShieldsStreak 					= GetCurrentPlaylistVarBool( "flowstateFiestaShieldsUpgrade", true )
	fsGlobal.FIESTADeathboxes 						= GetCurrentPlaylistVarBool( "flowstateFiestaDeathboxes", true )
	fsGlobal.RandomGunsMetagame 					= GetCurrentPlaylistVarBool( "flowstateRandomGunsMetagame", false )
	fsGlobal.KillshotEnabled 						= GetCurrentPlaylistVarBool( "flowstateKillshotEnabled", true )
	fsGlobal.Droppods 								= GetCurrentPlaylistVarBool( "flowstateDroppodsOnPlayerConnected", false )
	fsGlobal.ExtrashieldsEnabled 					= GetCurrentPlaylistVarBool( "flowstateExtrashieldsEnabled", true )
	fsGlobal.ExtrashieldsSpawntime 					= GetCurrentPlaylistVarFloat( "flowstateExtrashieldsSpawntime", 240 )
	fsGlobal.ExtrashieldValue 						= GetCurrentPlaylistVarFloat( "flowstateExtrashieldValue", 150 )
	fsGlobal.Gungame 								= GetCurrentPlaylistVarBool( "flowstateGungame", false )
	fsGlobal.GungameRandomAbilities 				= GetCurrentPlaylistVarBool( "flowstateGUNGAMERandomAbilities", false )
	fsGlobal.SURF 									= GetCurrentPlaylistVarBool( "flowstateSurf", false )
	fsGlobal.SURFRoundTime 							= GetCurrentPlaylistVarInt( "flowstateSURFRoundtime", 800 )
	fsGlobal.SURFLockPOI 							= GetCurrentPlaylistVarBool( "flowstateSURFLockPOI", false )
	fsGlobal.SURFLockedPOI 							= GetCurrentPlaylistVarInt( "flowstateSURFLockeedPOI", 0 )
	fsGlobal.EnableAutoChangeLevel 					= GetCurrentPlaylistVarBool( "flowstateAutoChangeLevelEnable", false )
	fsGlobal.AutoChangeLevelRounds 					= GetCurrentPlaylistVarInt( "flowstateRoundsBeforeChangeLevel", 1 )
	fsGlobal.EnableSkillTrainerByColombia 			= GetCurrentPlaylistVarBool( "flowstate_Enable_SKILLTRAINER_By_Colombia", true )
	fsGlobal.EnableCustomMapByBiscutz 				= GetCurrentPlaylistVarBool( "flowstate_Enable_CUSTOMMAP_By_Biscutz", false )
	fsGlobal.EnableWhiteForestByZero 				= GetCurrentPlaylistVarBool( "flowstate_Enable_WHITEFOREST_By_Zero", true )
	fsGlobal.EnableBrightWaterByZero 				= GetCurrentPlaylistVarBool( "flowstate_Enable_BRIGHWATER_By_Zero", false )
	fsGlobal.EnableCaveByBlessedSeal 				= GetCurrentPlaylistVarBool( "flowstate_Enable_CAVE_By_BlessedSeal", false )
	fsGlobal.EnableShipmentByAyeZee 				= GetCurrentPlaylistVarBool( "flowstate_Enable_Shipment_By_AyeZee", false )
	fsGlobal.EnableKillhouseByAyeZee 				= GetCurrentPlaylistVarBool( "flowstate_Enable_Killhouse_By_AyeZee", false )
	fsGlobal.EnableNuketownByAyeZee 				= GetCurrentPlaylistVarBool( "flowstate_Enable_Nuketown_By_AyeZee", false )
	fsGlobal.DoorsEnabled 							= GetCurrentPlaylistVarBool( "flowstateDoorsEnabled", true )
	fsGlobal.MaxPingAllowed 						= GetCurrentPlaylistVarInt( "flowstateMaxPingAllowed", 200 )
	fsGlobal.KickHighPingPlayer 					= GetCurrentPlaylistVarBool( "flowstateKickHighPingPlayer", true )
	fsGlobal.EnableEncore 							= GetCurrentPlaylistVarBool( "flowstate_Enable_Encore", false )
	fsGlobal.EnableKillyardByDEAFPS 				= GetCurrentPlaylistVarBool( "flowstate_Enable_Killyard_By_DEAFPS", false )
	fsGlobal.EnableDustmentByDEAFPS 				= GetCurrentPlaylistVarBool( "flowstate_Enable_Dustment_By_DEAFPS", false )
	fsGlobal.EnableShoothouseByDEAFPS 				= GetCurrentPlaylistVarBool( "flowstate_Enable_Shoothouse_By_DEAFPS", false )
	fsGlobal.EnableRustByDEAFPS 					= GetCurrentPlaylistVarBool( "flowstate_Enable_Rust_By_DEAFPS", false )
	fsGlobal.EnableNCanalsByDEAFPS 					= GetCurrentPlaylistVarBool( "flowstate_Enable_NCanals_By_DEAFPS", false )
	fsGlobal.EnableEncoreNuketownByAyeZee 			= GetCurrentPlaylistVarBool( "flowstate_Enable_Encore_Nuketown_By_AyeZee", false )
	fsGlobal.EnableMovementGym 						= GetCurrentPlaylistVarBool( "flowstate_Enable_MovementGym", false )
	fsGlobal.EnableMovementGymLogs 					= GetCurrentPlaylistVarBool( "flowstate_Enable_MovementGym_Logs", false )
	fsGlobal.MovementGym_ClassicMovement 			= GetCurrentPlaylistVarBool( "flowstate_MovementGym_ClassicMovement", false)
	fsGlobal.MovementGym_ClassicMovement_Type 		= GetCurrentPlaylistVarInt( "flowstate_MovementGym_ClassicMovement_Type", 0 )
	fsGlobal.MovementGym_ClassicMovement_AutoBHOP 	= GetCurrentPlaylistVarBool( "flowstate_MovementGym_ClassicMovement_AutoBHOP", false )
	fsGlobal.GetRespawnKitEnabled					= GetCurrentPlaylistVarBool("respawn_kit_enabled", false)
	fsGlobal.movementgym 							= ( Playlist() == ePlaylists.fs_movementgym )
	fsGlobal.dm_oddball								= ( Playlist() == ePlaylists.fs_dm_oddball )
	fsGlobal.haloMod_oddball						= ( Playlist() == ePlaylists.fs_haloMod_oddball )
	fsGlobal.fs_1v1									= ( Playlist() == ePlaylists.fs_1v1 )
	fsGlobal.fs_lgduels_1v1							= ( Playlist() == ePlaylists.fs_lgduels_1v1 )
	fsGlobal.fs_dm_fast_instagib					= ( Playlist() == ePlaylists.fs_dm_fast_instagib )
	fsGlobal.fs_dm									= ( Playlist() == ePlaylists.fs_dm || Playlist() == ePlaylists.fs_realistic_ttv )
	fsGlobal.Is_PartyCrasher						= ( MapName() == eMaps.mp_rr_party_crasher )
	fsGlobal.Is_Canyon_Staging						= ( MapName() == eMaps.mp_rr_canyonlands_staging )
	fsGlobal.IsHaloMode								= ( GetCurrentPlaylistVarBool( "is_halo_gamemode", false ) )
	fsGlobal.DisableAllMapTriggers					= ( GetCurrentPlaylistVarBool( "flowstate_disable_all_map_triggers", false ) )
	fsGlobal.Is_gamemode_1v1_type					= g_bIs1v1GameType()
	fsGlobal.GivePassive							= GetCurrentPlaylistVarBool( "activate_passive_abilities", true )
	fsGlobal.GiveTactical							= GetCurrentPlaylistVarBool( "give_legend_tactical", false )
	fsGlobal.RestMsg 								= GetCurrentPlaylistVarBool( "rest_msg", false )
	fsGlobal.itemDissolveTime						= GetCurrentPlaylistVarFloat( "dissolve_drops_time", 7 )
	fsGlobal.CycleHaloPlaylists						= GetCurrentPlaylistVarBool( "cycle_halo_playlists", false )
	fsGlobal.EnableReporting						= GetCurrentPlaylistVarBool( "enable_reporting", false )
	fsGlobal.EndlessFFAorTDM						= GetCurrentPlaylistVarBool( "flowstateEndlessFFAorTDM", false )
}

//Todo(mk): The following function calls need replaced 
// in scripts with direct indexing into fsGlobal.var 
// after all scripters have finished merging.

// Todo(mk): Merge other playlist init settings to this file to reduce repeat vars.

bool function Spectator_GetReplayIsEnabled()					{ return fsGlobal.GetReplayIsEnabled } 
float function Spectator_GetReplayDelay()						{ return fsGlobal.GetReplayDelay } 
float function Deathmatch_GetRespawnDelay()						{ return fsGlobal.GetRespawnDelay }
float function Equipment_GetDefaultShieldHP()					{ return fsGlobal.GetDefaultShieldHP }
float function Deathmatch_GetOOBDamagePercent()					{ return fsGlobal.GetOOBDamagePercent }
float function Deathmatch_GetVotingTime()						{ return fsGlobal.GetVotingTime }
string function FlowState_Hoster()								{ return fsGlobal.Hoster }
string function FlowState_Admin1()								{ return fsGlobal.Admin1 }
string function FlowState_Admin2()								{ return fsGlobal.Admin2 }
string function FlowState_Admin3()								{ return fsGlobal.Admin3 }
string function FlowState_Admin4()								{ return fsGlobal.Admin4 }
int function FlowState_RoundTime()								{ return fsGlobal.RoundTime }
string function FlowState_RingColor()							{ return fsGlobal.RingColor }
string function FlowState_BubbleColor()							{ return fsGlobal.BubbleColor }
bool function FlowState_ResetKillsEachRound()					{ return fsGlobal.ResetKillsEachRound } 
bool function FlowState_Timer()									{ return fsGlobal.Timer } 
bool function FlowState_LockPOI()								{ return fsGlobal.LockPOI } 
int function FlowState_LockedPOI()								{ return fsGlobal.LockedPOI }
bool function FlowState_AdminTgive()							{ return fsGlobal.AdminTgive }
float function FlowState_TgiveDelay()							{ return fsGlobal.TgiveDelay }
bool function FlowState_ForceCharacter()						{ return fsGlobal.ForceCharacter } 
int function FlowState_ChosenCharacter()						{ return fsGlobal.ChosenCharacter }
bool function FlowState_ForceAdminCharacter()					{ return fsGlobal.ForceAdminCharacter } 
int function FlowState_ChosenAdminCharacter()					{ return fsGlobal.ChosenAdminCharacter }
bool function FlowState_DummyOverride()							{ return fsGlobal.DummyOverride } 
bool function FlowState_AutoreloadOnKillPrimary()				{ return fsGlobal.AutoreloadOnKillPrimary } 
bool function FlowState_AutoreloadOnKillSecondary()				{ return fsGlobal.AutoreloadOnKillSecondary } 
bool function FlowState_RandomGuns()							{ return fsGlobal.RandomGuns } 
bool function FlowState_RandomTactical()						{ return fsGlobal.RandomTactical } 
bool function FlowState_RandomUltimate()						{ return fsGlobal.RandomUltimate }
bool function FlowState_RandomGunsEverydie()					{ return fsGlobal.RandomGunsEverydie }
bool function FlowState_FIESTAShieldsStreak()					{ return fsGlobal.FIESTAShieldsStreak } 
bool function FlowState_FIESTADeathboxes()						{ return fsGlobal.FIESTADeathboxes } 
bool function FlowState_RandomGunsMetagame()					{ return fsGlobal.RandomGunsMetagame }
bool function FlowState_KillshotEnabled()						{ return fsGlobal.KillshotEnabled }
bool function FlowState_Droppods()								{ return fsGlobal.Droppods }
bool function FlowState_ExtrashieldsEnabled()					{ return fsGlobal.ExtrashieldsEnabled }
float function FlowState_ExtrashieldsSpawntime()				{ return fsGlobal.ExtrashieldsSpawntime }
float function FlowState_ExtrashieldValue()						{ return fsGlobal.ExtrashieldValue }
bool function FlowState_Gungame()								{ return fsGlobal.Gungame }
bool function FlowState_GungameRandomAbilities()				{ return fsGlobal.GungameRandomAbilities }
bool function FlowState_SURF()									{ return fsGlobal.SURF }
int function FlowState_SURFRoundTime()							{ return fsGlobal.SURFRoundTime }
bool function FlowState_SURFLockPOI()							{ return fsGlobal.SURFLockPOI } 
int function FlowState_SURFLockedPOI()							{ return fsGlobal.SURFLockedPOI }
bool function Flowstate_EnableAutoChangeLevel()					{ return fsGlobal.EnableAutoChangeLevel }
int function Flowstate_AutoChangeLevelRounds() 					{ return fsGlobal.AutoChangeLevelRounds }
bool function FlowState_EnableSkillTrainerByColombia()			{ return fsGlobal.EnableSkillTrainerByColombia }
bool function FlowState_EnableCustomMapByBiscutz()				{ return fsGlobal.EnableCustomMapByBiscutz }
bool function FlowState_EnableWhiteForestByZero()				{ return fsGlobal.EnableWhiteForestByZero }
bool function FlowState_EnableBrightWaterByZero()				{ return fsGlobal.EnableBrightWaterByZero }
bool function FlowState_EnableCaveByBlessedSeal()				{ return fsGlobal.EnableCaveByBlessedSeal }
bool function FlowState_EnableShipmentByAyeZee()				{ return fsGlobal.EnableShipmentByAyeZee }
bool function FlowState_EnableKillhouseByAyeZee()				{ return fsGlobal.EnableKillhouseByAyeZee }
bool function FlowState_EnableNuketownByAyeZee()				{ return fsGlobal.EnableNuketownByAyeZee }
bool function Flowstate_DoorsEnabled()							{ return fsGlobal.DoorsEnabled }
int function FlowState_MaxPingAllowed() 						{ return fsGlobal.MaxPingAllowed }
bool function FlowState_KickHighPingPlayer()					{ return fsGlobal.KickHighPingPlayer }
bool function FlowState_EnableEncore()							{ return fsGlobal.EnableEncore } //enable encore by default unless stated false in playlist
bool function FlowState_EnableKillyardByDEAFPS()				{ return fsGlobal.EnableKillyardByDEAFPS }
bool function FlowState_EnableDustmentByDEAFPS()				{ return fsGlobal.EnableDustmentByDEAFPS }
bool function FlowState_EnableShoothouseByDEAFPS()				{ return fsGlobal.EnableShoothouseByDEAFPS }
bool function FlowState_EnableRustByDEAFPS()					{ return fsGlobal.EnableRustByDEAFPS }
bool function FlowState_EnableNCanalsByDEAFPS()					{ return fsGlobal.EnableNCanalsByDEAFPS }
bool function FlowState_EnableEncoreNuketownByAyeZee()			{ return fsGlobal.EnableEncoreNuketownByAyeZee }
bool function FlowState_EnableMovementGym()						{ return fsGlobal.EnableMovementGym }
bool function FlowState_EnableMovementGymLogs()					{ return fsGlobal.EnableMovementGymLogs }
bool function Flowstate_MovementGym_ClassicMovement()			{ return fsGlobal.MovementGym_ClassicMovement }
int function Flowstate_MovementGym_ClassicMovement_Type()		{ return fsGlobal.MovementGym_ClassicMovement_Type }
bool function Flowstate_MovementGym_ClassicMovement_AutoBHOP()	{ return fsGlobal.MovementGym_ClassicMovement_AutoBHOP }
//bool function Flowstate_IsHaloMode()							{ return fsGlobal.Flowstate_IsHaloMode }	//(mk):moved to sh_mapname_playlist_gamemode_enums.gnut	
bool function Flowstate_DisableAllMapTriggers()					{ return fsGlobal.DisableAllMapTriggers }
bool function Flowstate_IsLGDuels()								{ return fsGlobal.fs_lgduels_1v1 }
bool function Flowstate_IsMovementGym()							{ return fsGlobal.movementgym }
bool function Flowstate_IsDmOddball()							{ return fsGlobal.dm_oddball }
bool function Flowstate_IsHalomodeOddball()						{ return fsGlobal.haloMod_oddball }
bool function Flowstate_IsFS1v1()								{ return fsGlobal.fs_1v1 }
bool function Flowstate_IsFastInstaGib()						{ return fsGlobal.fs_dm_fast_instagib }
bool function Flowstate_IsFSDM()								{ return fsGlobal.fs_dm }
bool function Flowstate_IsMapPartyCrasher()						{ return fsGlobal.Is_PartyCrasher }
bool function Flowstate_IsMapCanyonlandsStaging()				{ return fsGlobal.Is_Canyon_Staging }
bool function Flowstate_IsGame1v1Type() 						{ return fsGlobal.Is_gamemode_1v1_type }
bool function Flowstate_GivePassive()							{ return fsGlobal.GivePassive }
bool function Equipment_GetRespawnKitEnabled()                  { return fsGlobal.GetRespawnKitEnabled }
bool function FlowState_GiveTactical()							{ return fsGlobal.GiveTactical }
bool function FlowState_RestMsg()								{ return fsGlobal.RestMsg }
float function Flowstate_GetDissolveTime()						{ return fsGlobal.itemDissolveTime }
bool function Flowstate_CycleHaloPlaylists()					{ return fsGlobal.CycleHaloPlaylists } //used in ctf/tdm
bool function Flowstate_EnableReporting()						{ return fsGlobal.EnableReporting }
void function DEV_RegisterNetworking_SpawnSystem()
{
	#if DEVELOPER
		ScriptRegisterNetworkedVariable( "FS_Scenarios_currentDeathfieldRadius", SNDC_PLAYER_EXCLUSIVE, SNVT_TIME )
		ScriptRegisterNetworkedVariable( "FS_Scenarios_currentDistanceFromCenter", SNDC_PLAYER_EXCLUSIVE, SNVT_TIME )
	#endif
}