global function ClUnitFrames_Init
global function PlayerHasUnitFrame
global function PlayerShouldHaveUnitFrame
global function GetUnitFrame
global function OnInUseHealingKitTypeChanged
global function OnPlayerEquippedWeaponChanged

global function UnitFrame_GetOwnerByIndex
global function UnitFrame_SetConsumableIconForPlayer

global function AddCallback_OnTeamUnitFrameCreated
global function AddCallback_OnTeamUnitFrameDestroyed

global function SetUnitFrameDataFromOwner
global function UpdateRUITest

#if DEVELOPER
global function PrintUnitFrames
global function PrintTeammates
#endif

global struct UnitFrameDef
{
	int  index
	var  rui
	bool disconnected
}

struct
{
	table<entity, UnitFrameDef>       teamUnitFrames
	array< void functionref(int) >    Callbacks_OnTeamUnitFrameCreated
	array< void functionref(int) >    Callbacks_OnTeamUnitFrameDestroyed
	table<entity, string> characterRefTable
} file

void function ClUnitFrames_Init()
{
	AddCreateCallback( "player", OnPlayerCreated )
	AddCallback_OnPlayerChangedTeam( OnPlayerTeamChanged )
	AddDestroyCallback( "player", OnPlayerDestroyed )
	AddCallback_PlayerClassChanged( OnPlayerClassChanged )
	AddOnSpectatorTargetChangedCallback( OnSpectatorTargetChanged )
	AddCallback_OnViewPlayerChanged( OnViewPlayerChanged )
	AddCallback_GameStateEnter( eGameState.Playing, OnGameStateEnterPlaying )

	if ( IsRecruitMode() )
		CL_RecruitModeUnitFrames_Init()
}


void function OnPlayerCreated( entity player )
{
	OnPlayerTeamChanged( player, TEAM_UNASSIGNED, player.GetTeam() ) // todo(dw): this setup (OnPlayerCreated calling OnPlayerTeamChanged) would probably be useful elsewhere, so we should make AddCallback_PlayerClassChanged always get call in that situation
}


void function OnPlayerTeamChanged( entity player, int oldTeam, int newTeam )
{
	#if DEVELOPER
		printt( "[+] Team changed for player " + player.GetPlayerName() + " Old: " + oldTeam + " - New: " + newTeam )
	#endif

	if ( PlayerShouldHaveUnitFrame( player ) )
	{
		CreateTeamUnitFrame( player )
	}
	else
	{
		DestroyTeamUnitFrame( player )
	}
	
	if( newTeam == GetLocalViewPlayer().GetTeam() || player == GetLocalViewPlayer() ) //Cafe was here
		RefreshUnitframesForPlayer( GetLocalViewPlayer() )
}


void function OnPlayerDestroyed( entity player )
{
	thread DestroyTeamUnitFrameAfterDelay( player )
}


void function OnPlayerClassChanged( entity player )
{
	ItemFlavor character = LoadoutSlot_GetItemFlavor( ToEHI( player ), Loadout_CharacterClass() )
	string characterRef  = ItemFlavor_GetHumanReadableRef( character ).tolower()

	bool characterChanged = true

	bool playerIsSpectator = player.GetPlayerSettings() == SPECTATOR_SETTINGS

	if ( characterRef != "" )
	{
		if ( !( player in file.characterRefTable ) )
			file.characterRefTable[player] <- characterRef
		else
		{
			if ( file.characterRefTable[player] == characterRef )
				characterChanged = false
			else if ( ! playerIsSpectator ) 
				file.characterRefTable[player] = characterRef
		}
	}

	if ( characterChanged )
	{
		if ( PlayerHasUnitFrame( player ) && !playerIsSpectator )
		{
			SetUnitFrameOwner( GetUnitFrame( player ), player )
		}
		else if ( PlayerShouldHaveUnitFrame( player ) )
		{
			
			CreateTeamUnitFrame( player )
		}
	}
}


void function OnGameStateEnterPlaying()
{
	entity viewPlayer = GetLocalViewPlayer()
	RefreshUnitframesForPlayer( viewPlayer )

}


// Before this even runs, OnPlayerCreated() will already have been called for newTarget, so a unitframe will already exist for that player
// OnPlayerCreated() is also called on prevTarget at the same time, so a unitframe may also already exist for that player as well
void function OnSpectatorTargetChanged( entity spectator, entity prevTarget, entity newTarget )
{
	RefreshUnitframesForPlayer( newTarget )
}


void function OnViewPlayerChanged( entity newViewPlayer )
{
	RefreshUnitframesForPlayer( newViewPlayer )
	UpdateFullmapRuiTracks()
}

void function UpdateRUITest()
{
	RefreshUnitframesForPlayer( GetLocalViewPlayer() )
	
	if( Playlist() == ePlaylists.fs_scenarios )
	{
		if( GetLocalClientPlayer().GetPlayerNetInt( "selectedHealthPickupType" ) != 2 ) //sets shield cell as default
			Consumable_SetSelectedConsumableType( 2 )
	}
	// thread InitSurvivalHealthBar()
}

void function RefreshUnitframesForPlayer( entity player )
{
	if ( player == null ) // Can happen at the end of a match
		return

	// Do not destroy unitframes when spectating the dropship or any other non player spectate target.
	if ( !player.IsPlayer() )
		return

	int playerTeam = player.GetTeam()
	array<entity> playersToRemove

	foreach ( unitframePlayer, unitFrame in file.teamUnitFrames )
	{
		if ( !IsValid( unitframePlayer ) || !IsAlive( unitframePlayer ) && Gamemode() == eGamemodes.fs_snd || unitframePlayer.GetTeam() != playerTeam || !PlayerShouldHaveUnitFrame( unitframePlayer ) )
			playersToRemove.append( unitframePlayer )
		else
			thread SetUnitFrameDataFromOwner( unitFrame.rui, unitframePlayer )
	}

	foreach ( unitframePlayer in playersToRemove )
		DestroyTeamUnitFrame( unitframePlayer )

	array<entity> teamPlayers = GetPlayerArrayOfTeam( playerTeam )
	foreach ( teamPlayer in teamPlayers )
	{
		if ( PlayerShouldHaveUnitFrame( teamPlayer ) )
			CreateTeamUnitFrame( teamPlayer )
	}

}


void function CreateTeamUnitFrame( entity player )
{
	if ( GetCurrentPlaylistVarBool( "teammate_huds_enabled", true ) == false )
		return

	if ( player == GetLocalViewPlayer() && ( !IsSpectating() || IsAlive( player ) ) )
		return

	if ( PlayerHasUnitFrame( player ) )
		return

	DeleteUnitFrameForDisconnectedPlayer()

	asset unitFrameAsset = GetUnitFrameAssetForGameMode()
	var rui = CreatePermanentCockpitPostFXRui( unitFrameAsset, HUD_Z_BASE )

	UnitFrameDef unitFrame
	unitFrame.rui = rui

	file.teamUnitFrames[player] <- unitFrame

	UpdateUnitFrameIndices()

	foreach ( callbackFunc in file.Callbacks_OnTeamUnitFrameCreated )
	{
		callbackFunc( unitFrame.index )
	}

	SetUnitFrameOwner( unitFrame, player )
	SetUnitFramePosition( unitFrame )
}

int function SquadMemberIndexSort( entity a, entity b )
{
	if ( a.GetTeamMemberIndex() > b.GetTeamMemberIndex() )
		return 1
	else if ( a.GetTeamMemberIndex() < b.GetTeamMemberIndex() )
		return -1

	return 0
}

void function UpdateUnitFrameIndices()
{
	entity localPlayer = GetLocalViewPlayer()
	array<entity> team = GetPlayerArrayOfTeam( localPlayer.GetTeam() )
	team.fastremovebyvalue( localPlayer )

	team.sort( SquadMemberIndexSort )

	if ( PlayerHasUnitFrame( localPlayer ) )
	{
		team.insert( 0, localPlayer )
	}

	int displayIndex = 0;
	foreach ( entity player in team )
	{
		if ( player in file.teamUnitFrames )
		{
			UnitFrameDef unitFrame = file.teamUnitFrames[player];
			unitFrame.index = displayIndex
			SetUnitFramePosition( unitFrame )

			displayIndex++
		}
	}
}

asset function GetUnitFrameAssetForGameMode()
{
	if ( IsFallLTM() || GetCurrentPlaylistVarBool( "minified_unitframes_enabled", false ) || Gamemode() == eGamemodes.fs_prophunt  || Gamemode() == eGamemodes.fs_duckhunt )
		return $"ui/unitframe_shadow_squad.rpak"

	return $"ui/unitframe_survival_v3.rpak"
}


void function SetUnitFrameOwner( UnitFrameDef unitFrame, entity ent )
{
	thread SetUnitFrameDataFromOwner( unitFrame.rui, ent )
}


void function SetUnitFrameDataFromOwner( var rui, entity ent, bool forceUpdate = false )
{
	EndSignal( ent, "OnDestroy" ) // LoadoutSlot_WaitForItemFlavor could take time so ent might get destroyed

	Assert ( IsNewThread(), "Must be threaded off." )

	while ( !EHIHasValidScriptStruct( ToEHI( ent ) ) )
		WaitFrame() // todo(dw): temp fix for R5DEV-60667

	WaitFrame()
	ItemFlavor character = LoadoutSlot_WaitForItemFlavor( ToEHI( ent ), Loadout_CharacterClass() )
	asset classIcon      = CharacterClass_GetGalleryPortrait( character )

	// getting the characer can take so long that the RUI got deleted during the wait
	// force update for is the unitframe ruis on the fullmap screen. They never get destroyed so should be safe
	if ( !HaveMatchingUnitframeRui( rui ) && !forceUpdate )
		return

	RuiTrackString( rui, "name", ent, RUI_TRACK_PLAYER_NAME_STRING )
	RuiTrackInt( rui, "micStatus", ent, RUI_TRACK_MIC_STATUS )
	RuiTrackFloat( rui, "healthFrac", ent, RUI_TRACK_HEALTH )
	RuiTrackFloat( rui, "shieldFrac", ent, RUI_TRACK_SHIELD_FRACTION )
	RuiTrackGameTime( rui, "lastFireTime", ent, RUI_TRACK_LAST_FIRED_TIME )
	RuiSetBool( rui, "isLocalPlayer", (ent == GetLocalViewPlayer()) )
	RuiSetImage( rui, "icon", classIcon )
	RuiTrackFloat( rui, "reviveEndTime", ent, RUI_TRACK_SCRIPT_NETWORK_VAR, GetNetworkedVariableIndex( "reviveEndTime" ) )
	RuiTrackInt( rui, "reviveType", ent, RUI_TRACK_SCRIPT_NETWORK_VAR_INT, GetNetworkedVariableIndex( "reviveType" ) )
	RuiTrackFloat( rui, "bleedoutEndTime", ent, RUI_TRACK_SCRIPT_NETWORK_VAR, GetNetworkedVariableIndex( "bleedoutEndTime" ) )
	RuiTrackBool( rui, "isJumpmaster", ent, RUI_TRACK_SCRIPT_NETWORK_VAR_BOOL, GetNetworkedVariableIndex( "isJumpmaster" ) )
	RuiTrackInt( rui, "respawnStatus", ent, RUI_TRACK_SCRIPT_NETWORK_VAR_INT, GetNetworkedVariableIndex( "respawnStatus" ) )
	RuiTrackFloat( rui, "respawnStatusEndTime", ent, RUI_TRACK_SCRIPT_NETWORK_VAR, GetNetworkedVariableIndex( "respawnStatusEndTime" ) )
	RuiTrackFloat( rui, "cameraViewFrac", ent, RUI_TRACK_STATUS_EFFECT_SEVERITY, eStatusEffect.camera_view ) //

	RuiSetBool( rui, "disconnected", false )
	RuiSetImage( rui, "healTypeIcon", $"" )
	#if !MP_PVEMODE
		RuiTrackInt( rui, "teamMemberIndex", ent, RUI_TRACK_PLAYER_TEAM_MEMBER_INDEX )
	#endif

	RuiTrackFloat( rui, "targetHealthFrac", ent, RUI_TRACK_HEAL_TARGET )
	RuiTrackFloat( rui, "targetShieldFrac", ent, RUI_TRACK_STATUS_EFFECT_SEVERITY, eStatusEffect.target_shields )
	RuiTrackFloat( rui, "targetHealthFrac", ent, RUI_TRACK_STATUS_EFFECT_SEVERITY, eStatusEffect.target_health )
	RuiTrackFloat( rui, "targetHealthFracTemp", ent, RUI_TRACK_HEAL_TARGET )

	RuiSetBool( rui, "isVisible", true )

	#if MP_PVEMODE
	RuiSetBool( rui, "isPvE", true )
	RuiTrackInt( rui, "squadID", ent, RUI_TRACK_SQUADID )
	UpdateWaitingToRespawnTextForFrame( rui )
	#endif //MP_PVEMODE
}

void function OnInUseHealingKitTypeChanged( entity player, int oldkitType, int kitType, bool actuallyChanged )
{
	asset hudIcon = $""

	if ( kitType != -1 )
	{
		if ( WeaponDrivenConsumablesEnabled() )
		{
			ConsumableInfo info = Consumable_GetConsumableInfo( kitType )
			LootData lootData    = info.lootData
			hudIcon = lootData.hudIcon
		}
		else
		{
			HealthPickup kitData = SURVIVAL_Loot_GetHealthKitDataFromStruct( kitType )
			LootData lootData    = kitData.lootData
			hudIcon = lootData.hudIcon
		}

	}

	foreach ( framePlayer, frame in file.teamUnitFrames )
	{
		if ( framePlayer != player )
			continue
		RuiSetImage( frame.rui, "healTypeIcon", hudIcon )
		RuiSetBool( frame.rui, "consumablePanelVisible", hudIcon != $"" )
		break
	}
}

void function OnPlayerEquippedWeaponChanged( entity player, int oldWeaponRef, int newWeaponRef, bool actuallyChanged )
{
	foreach( framePlayer, frame in file.teamUnitFrames )
	{
		if ( framePlayer != player )
			continue

		for ( int i = 0; i < 2; i++ )
		{
			string ammoTypeIconBool = "showAmmoIcon0" + string(i)
			string ammoTypeIcon = "ammoTypeIcon0" + string(i)
			asset hudIcon = $"white"

			string weaponSlot = "playerPrimaryWeapon" + string(i)
			int weaponIndex = player.GetPlayerNetInt( weaponSlot )

			if ( !SURVIVAL_Loot_IsLootIndexValid( weaponIndex ) )
			{
				hudIcon = $"white"

				RuiSetBool( frame.rui, ammoTypeIconBool, false )
				RuiSetImage( frame.rui, ammoTypeIcon, hudIcon )
			}
			else
			{
				LootData weaponData = SURVIVAL_Loot_GetLootDataByIndex( weaponIndex )
				string ammoType     = weaponData.ammoType
				if ( GetWeaponInfoFileKeyField_GlobalBool( weaponData.baseWeapon, "uses_ammo_pool" ) )
				{
					LootData ammoData = SURVIVAL_Loot_GetLootDataByRef( ammoType )
					hudIcon = ammoData.hudIcon
				}
				else
					hudIcon = weaponData.fakeAmmoIcon

				RuiSetImage( frame.rui, ammoTypeIcon, hudIcon )
				RuiSetBool( frame.rui, ammoTypeIconBool, true )
			}
		}
	}
}

void function UnitFrame_SetConsumableIconForPlayer( entity player, asset hudIcon )
{
	foreach ( framePlayer, frame in file.teamUnitFrames )
	{
		if ( framePlayer != player )
			continue
		RuiSetImage( frame.rui, "healTypeIcon", hudIcon )
		break
	}
}


void function SetUnitFramePosition( UnitFrameDef unitFrame )
{
	RuiSetInt( unitFrame.rui, "frameSlot", unitFrame.index )
}


void function DestroyTeamUnitFrame( entity player )
{
	if ( !PlayerHasUnitFrame( player ) )
		return

	if ( file.teamUnitFrames[player].rui != null )
		RuiDestroyIfAlive( file.teamUnitFrames[player].rui )

	int removedIndex = file.teamUnitFrames[player].index
	delete file.teamUnitFrames[player]

	foreach ( callbackFunc in file.Callbacks_OnTeamUnitFrameDestroyed )
	{
		callbackFunc( removedIndex )
	}

	UpdateUnitFrameIndices()
}


void function DestroyTeamUnitFrameAfterDelay( entity player, float delay = 15.0 )
{
	if ( !PlayerHasUnitFrame( player ) )
		return

	UnitFrameDef unitFrame = file.teamUnitFrames[player]
	unitFrame.disconnected = true
	RuiSetBool( unitFrame.rui, "disconnected", true )
	RuiSetFloat( unitFrame.rui, "reviveEndTime", 0.0 )
	RuiSetFloat( unitFrame.rui, "bleedoutEndTime", 0.0 )
	RuiSetBool( unitFrame.rui, "isJumpmaster", false )

	wait delay
	DestroyTeamUnitFrame( player )
}


void function DeleteUnitFrameForDisconnectedPlayer()
{
	foreach( player, unitframe in clone file.teamUnitFrames )
	{
		if ( !IsValid( player ) )
			DestroyTeamUnitFrame( player )
	}
}


bool function PlayerShouldHaveUnitFrame( entity player )
{
	entity viewer  = GetLocalViewPlayer()
	int playerTeam = player.GetTeam()
	entity client = GetLocalClientPlayer()

	
	if ( player == viewer && ( !IsSpectating() || IsAlive( player ) ) )
		return false

	if( client.GetTeam() == TEAM_SPECTATOR )
		if ( client.GetObserverTarget() == player )
			return false

	if ( playerTeam == TEAM_UNASSIGNED )
		return false

	if ( playerTeam == TEAM_SPECTATOR && GetCurrentPlaylistName() != "fs_scenarios" )
		return false

	if ( playerTeam != viewer.GetTeam() )
		return false
	
	if( Gamemode() == eGamemodes.fs_snd && !IsAlive(player) )
		return false
	
	if ( GetGameState() < eGameState.Playing && !IsFiringRangeGameMode() )
		return false
	
	if( viewer.GetRealms().len() > 1 && Playlist() == ePlaylists.fs_scenarios )
		return false

	return true
}


bool function PlayerHasUnitFrame( entity player )
{
	if ( player in file.teamUnitFrames )
		return true

	return false
}


bool function HaveMatchingUnitframeRui( var rui )
{
	foreach ( player, frame in file.teamUnitFrames )
	{
		if ( frame.rui == rui )
			return true
	}

	return false
}


UnitFrameDef function GetUnitFrame( entity player )
{
	return file.teamUnitFrames[player]
}


entity function UnitFrame_GetOwnerByIndex( int index )
{
	foreach ( entity player, UnitFrameDef frame in file.teamUnitFrames )
	{
		if ( frame.index == index )
			return player
	}

	return null
}

#if DEVELOPER
void function PrintUnitFrames()
{
	printt( "file.teamUnitFrames size:", file.teamUnitFrames.len() )
	foreach ( p, unitFrame in file.teamUnitFrames )
	{
		printt( "player:", p.GetPlayerName(), "index:", unitFrame.index )
	}
}

void function PrintTeammates( entity player )
{
	int team = player.GetTeam()
	foreach ( p in GetPlayerArrayOfTeam( team ) )
	{
		printt( "team:", team, "teammate:", p )
	}
}
#endif // DEVELOPER

void function AddCallback_OnTeamUnitFrameCreated( void functionref(int) callbackFunc )
{
	Assert( !file.Callbacks_OnTeamUnitFrameCreated.contains( callbackFunc ), "Already added " + string( callbackFunc ) + " with AddCallback_OnTeamUnitFrameCreated" )
	file.Callbacks_OnTeamUnitFrameCreated.append( callbackFunc )
}


void function AddCallback_OnTeamUnitFrameDestroyed( void functionref(int) callbackFunc )
{
	Assert( !file.Callbacks_OnTeamUnitFrameDestroyed.contains( callbackFunc ), "Already added " + string( callbackFunc ) + " with AddCallback_OnTeamUnitFrameDestroyed" )
	file.Callbacks_OnTeamUnitFrameDestroyed.append( callbackFunc )
}
