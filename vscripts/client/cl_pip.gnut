global function ClPip_LevelInit
global function BeginMovingPIP
global function CaptureStillPIPThenEndMovingPIPThread
global function ReleasePIP
global function PIPSlotState_GetSlotID
//global function UIToClient_PROTO_StartButtonThumbnail
//global function UIToClient_PROTO_StopButtonThumbnail

global function ClientCodeCallback_MonitorSnapshotDone


Assert( PIP_MONITOR_START_INDEX == 0 )  // todo(dw): temp
Assert( PIP_NUM_MONITORS == 3 )         // todo(dw): temp
Assert( PIP_SNAPSHOT_START_INDEX == 0 ) // todo(dw): temp
Assert( PIP_NUM_SNAPSHOTS == 10 )       // todo(dw): temp
Assert( PIP_INVALID == -1 )             // todo(dw): temp
//const int PIP_TOTAL_SLOTS = maxint( PIP_MONITOR_START_INDEX + PIP_NUM_MONITORS, PIP_SNAPSHOT_START_INDEX + PIP_NUM_SNAPSHOTS )
const int PIP_NUM_TOTAL = PIP_NUM_SNAPSHOTS


enum ePIPSlotStatus
{
	AVAILABLE,
	MOVING,
	STILL,
}

global struct PIPSlotState
{
	int  slotIndex = -1
	bool isUsableForMoving

	int                 status = ePIPSlotStatus.AVAILABLE
	PIPSlotState ornull associatedProcessingSlotStateOrNull = null // For still, this is the moving. For moving, this is the still.
	// If it is set: for still, this means it is yet to be captured; for moving, this means it is currently queued be captured into a still.

	entity camera // for moving only
	bool   hasColorCorrectionAssigned = false
}

struct
{
	//PIPSlotState[PIP_NUM_TOTAL] slotStateList
	array<PIPSlotState> slotStateList

	bool                isCaptureInProgress = false
	array<PIPSlotState> captureQueue

	int freeTotalSlotCount = 0
	int freeMovingSlotCount = 0

	table signalDummy
} file


void function ClPip_LevelInit()
{
	RegisterSignal( "PIPSnapshotCaptured" )
	RegisterSignal( "YouMayProceedWithPIPSnapshot" )
	RegisterSignal( "CancelPIPSnapshot" )
	RegisterSignal( "PIPSlotAvailable" )

	file.slotStateList.resize( PIP_NUM_TOTAL )
	foreach( int slotIndex, PIPSlotState slotState in file.slotStateList )
	{
		slotState.slotIndex = slotIndex
		slotState.isUsableForMoving = (slotIndex >= PIP_MONITOR_START_INDEX && slotIndex < PIP_MONITOR_START_INDEX + PIP_NUM_MONITORS)

		file.freeTotalSlotCount++
		if ( slotState.isUsableForMoving )
			file.freeMovingSlotCount++
	}
}


void function WaitForFreePIP( bool mustBeMoving )
{
	while ( mustBeMoving ? (file.freeMovingSlotCount == 0) : (file.freeTotalSlotCount == 0) )
		WaitSignal( file.signalDummy, "PIPSlotAvailable" )

	return
}


PIPSlotState function BeginMovingPIP( entity camera, int colorCorrectionLayer = -1 )
{
	for ( int slotIndex = PIP_MONITOR_START_INDEX; slotIndex < PIP_MONITOR_START_INDEX + PIP_NUM_MONITORS; slotIndex++ )
	{
		PIPSlotState slotState = file.slotStateList[slotIndex]
		if ( slotState.status != ePIPSlotStatus.AVAILABLE )
			continue

		slotState.status = ePIPSlotStatus.MOVING
		file.freeTotalSlotCount--
		file.freeMovingSlotCount--
		slotState.camera = camera
		camera.SetMonitorId( slotIndex )
		camera.SetActive( true )
		if ( colorCorrectionLayer != -1 )
		{
			slotState.hasColorCorrectionAssigned = true
			ColorCorrection_AssignMonitor( slotIndex, colorCorrectionLayer )
		}

		return slotState
	}

	Assert( false, "No free moving PIP slots." )
	unreachable
}


void function CaptureStillPIPThenEndMovingPIPThread( PIPSlotState movingSlotState, PIPSlotState ornull[1] outArray_stillSlotState, bool allowWaitForStillSlot = false )
{
	Assert( movingSlotState.slotIndex != -1 ) // bad struct
	Assert( movingSlotState.isUsableForMoving ) // tried to capture a non-moving slot
	Assert( movingSlotState.status == ePIPSlotStatus.MOVING ) // tried to capture from a non-active slot
	Assert( movingSlotState.associatedProcessingSlotStateOrNull == null ) // tried to capture from a slot that's already in the middle of being captured

	//printt( "#SNAPSHOT QUEUE" )
	bool shouldWaitOneFrame = false
	if ( file.isCaptureInProgress )
	{
		file.captureQueue.append( movingSlotState )

		OnThreadEnd( void function() : ( movingSlotState ) {
			file.captureQueue.removebyvalue( movingSlotState )
		} )

		WaitSignal( movingSlotState, "YouMayProceedWithPIPSnapshot" )
		//Assert( !file.isCaptureInProgress )
		file.captureQueue.remove( 0 )

		shouldWaitOneFrame = true // wait 1 frame before proceeding, so that two captures don't happen immediately after each other
	}
	else
	{
		file.isCaptureInProgress = true
	}

	OnThreadEnd( void function() : ( movingSlotState ) {
		if ( movingSlotState.associatedProcessingSlotStateOrNull != null )
		{
			movingSlotState.camera.DequeueMonitorSnapshot()

			PIPSlotState stillSlotState = expect PIPSlotState( movingSlotState.associatedProcessingSlotStateOrNull )

			stillSlotState.associatedProcessingSlotStateOrNull = null
			movingSlotState.associatedProcessingSlotStateOrNull = null

			ReleasePIP( stillSlotState )

			Assert( file.isCaptureInProgress )
		}

		if ( file.captureQueue.len() > 0 )
			Signal( file.captureQueue[0], "YouMayProceedWithPIPSnapshot" )
		else
			file.isCaptureInProgress = false
	} )

	EndSignal( movingSlotState, "CancelPIPSnapshot" )

	if ( shouldWaitOneFrame )
		WaitFrame()

	if ( allowWaitForStillSlot )
		WaitForFreePIP( false )

	int stillSlotIndex = -1
	PIPSlotState stillSlotState
	for ( int slotsTriedCount = 0; slotsTriedCount < PIP_NUM_TOTAL; slotsTriedCount++ )
	{
		// use up non-moving slots first
		int candidateSlotIndex          = (PIP_MONITOR_START_INDEX + PIP_NUM_MONITORS + slotsTriedCount) % PIP_NUM_TOTAL
		PIPSlotState candidateSlotState = file.slotStateList[candidateSlotIndex]
		if ( candidateSlotState.status != ePIPSlotStatus.AVAILABLE )
			continue

		stillSlotIndex = candidateSlotIndex
		stillSlotState = candidateSlotState
		break
	}
	Assert( stillSlotIndex != -1, "No free PIP slots." )

	stillSlotState.status = ePIPSlotStatus.STILL
	file.freeTotalSlotCount--
	if ( stillSlotState.isUsableForMoving )
		file.freeMovingSlotCount--
	stillSlotState.associatedProcessingSlotStateOrNull = movingSlotState
	movingSlotState.associatedProcessingSlotStateOrNull = stillSlotState

	//printt( "# QUEUEUEUEUE", movingSlotState.slotIndex, "->", stillSlotState.slotIndex )
	movingSlotState.camera.QueueMonitorSnapshot( stillSlotState.slotIndex )

	WaitSignal( stillSlotState, "PIPSnapshotCaptured" )
	//printt( "#SNAPSHOT COMPLETE" )

	Assert( stillSlotState.status == ePIPSlotStatus.STILL ) // make sure the still slot hasn't been released
	Assert( movingSlotState.status == ePIPSlotStatus.MOVING ) // make sure the moving slot hasn't been released
	Assert( stillSlotState.associatedProcessingSlotStateOrNull == movingSlotState ) // make sure the still slot hasn't been released then reacquired
	Assert( movingSlotState.associatedProcessingSlotStateOrNull == stillSlotState ) // make sure the moving slot hasn't been released then reacquired

	stillSlotState.associatedProcessingSlotStateOrNull = null
	movingSlotState.associatedProcessingSlotStateOrNull = null

	ReleasePIP( movingSlotState )

	outArray_stillSlotState[0] = stillSlotState
	//return stillSlotState
}


void function ClientCodeCallback_MonitorSnapshotDone( int stillSlotIndex )
{
	PIPSlotState stillSlotState = file.slotStateList[stillSlotIndex]
	//Assert( stillSlotState.status == ePIPSlotStatus.STILL )
	//Assert( stillSlotState.associatedProcessingSlotStateOrNull != null )
	//Assert( (expect PIPSlotState(stillSlotState.associatedProcessingSlotStateOrNull)).associatedProcessingSlotStateOrNull == stillSlotState )

	Signal( stillSlotState, "PIPSnapshotCaptured" )
	//printt( "# DONE DONE DONE", stillSlotIndex )
}


void function ReleasePIP( PIPSlotState slotState )
{
	Assert( slotState.slotIndex != -1 ) // bad struct
	Assert( slotState.status != ePIPSlotStatus.AVAILABLE, "Attempted to end PIP on slot that was not in use." )

	if ( slotState.status == ePIPSlotStatus.MOVING )
	{
		Assert( IsValid( slotState.camera ) )

		if ( slotState.associatedProcessingSlotStateOrNull != null )
		{
			Signal( slotState, "CancelPIPSnapshot" )
		}

		slotState.camera.SetMonitorId( PIP_INVALID )
		slotState.camera.SetActive( false )
		slotState.camera = null

		if ( slotState.hasColorCorrectionAssigned )
		{
			slotState.hasColorCorrectionAssigned = false
			ColorCorrection_UnassignMonitor( slotState.slotIndex )
		}
	}
	else if ( slotState.status == ePIPSlotStatus.STILL )
	{
		Assert( slotState.associatedProcessingSlotStateOrNull == null ) // make sure this still isn't being released wrongly before being done captured
	}

	slotState.status = ePIPSlotStatus.AVAILABLE
	file.freeTotalSlotCount++
	if ( slotState.isUsableForMoving )
	{
		file.freeMovingSlotCount++
	}

	Signal( file.signalDummy, "PIPSlotAvailable" )
}


int function PIPSlotState_GetSlotID( PIPSlotState slotState )
{
	Assert( slotState.slotIndex != -1 ) // bad struct
	Assert( slotState.status != ePIPSlotStatus.AVAILABLE, "Attempted to get PIP slot ID for display when it was not in use." )
	return slotState.slotIndex
}