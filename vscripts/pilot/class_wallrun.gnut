untyped

global function ClassWallrun_Init

global function Wallrun_AddPlayer
global function Wallrun_OnPlayerSpawn
global function Wallrun_OnPlayerDeath
global function Wallrun_PlayerTookDamage
global function Wallrun_EnforceWeaponDefaults
//global function Wallrun_CreateCopyOfPilotModel

struct 
{
	bool flowstate_enable_bullet_slow = false
	bool flowstate_headshots_only_gamemode = false
	float helmet_lv4 = 0.65
	float helmet_lv3 = 0.65
	float helmet_lv2 = 0.5
	float helmet_lv1 = 0.2
	
} file 

function ClassWallrun_Init()
{
	//(mk): use local copy of values instead of lookups
	
	file.flowstate_enable_bullet_slow = GetCurrentPlaylistVarBool( "flowstate_enable_bullet_slow", false )
	file.flowstate_headshots_only_gamemode = GetCurrentPlaylistVarBool( "flowstate_headshots_only_gamemode", false )
	file.helmet_lv4 = GetCurrentPlaylistVarFloat( "helmet_lv4", 0.65 )
	file.helmet_lv3 = GetCurrentPlaylistVarFloat( "helmet_lv3", 0.65 )
	file.helmet_lv2 = GetCurrentPlaylistVarFloat( "helmet_lv2", 0.5 )
	file.helmet_lv1 = GetCurrentPlaylistVarFloat( "helmet_lv1", 0.2 )
	
	// Make weapons less effective when playing at higher difficulty.
	level.lethalityMods <- {}
}

function Wallrun_AddPlayer( player )
{
	player.playerClassData[level.pilotClass] <- {}
}


function Wallrun_EnforceWeaponDefaults( player )
{
	if ( player.playerClassData[ level.pilotClass ].primaryWeapon )
	{
		// settings already exist
		return
	}

	player.playerClassData[ level.pilotClass ].primaryWeapon = "mp_weapon_r97"
	player.playerClassData[ level.pilotClass ].secondaryWeapon = "mp_weapon_sniper"

	local offhandWeaponTable = {}
	offhandWeaponTable[0] <- { weapon = "mp_weapon_frag_grenade", mods = [] }
	offhandWeaponTable[1] <- { weapon = "mp_ability_heal", mods = [] }

	player.playerClassData[ level.pilotClass ].offhandWeapons = offhandWeaponTable
	player.playerClassData[ level.pilotClass ].playerSetFile = DEFAULT_PILOT_SETTINGS
}


function Wallrun_OnPlayerSpawn( player )
{
	#if DEVELOPER
		printt( "ClassWallrun - OnPlayerSpawn" )
	#endif
}


function Wallrun_PlayerTookDamage( entity player, damageInfo, entity attacker )
{
	if( !IsValid( player ) ) 
		return
	
	if ( IsDemigod( player ) )
	{
		EntityDemigod_TryAdjustDamageInfo( player, damageInfo )
		return
	}

	//AdjustDamageForRodeoPlayers( player, damageInfo, attacker ) //this call does nothing

	int damageSourceId = DamageInfo_GetDamageSourceIdentifier( damageInfo )

	// Bullet slow reduces your velocity by 40% for 0.25 seconds, and cannot proc again for 3.0 seconds.
	LootData data0 
	entity weapon = DamageInfo_GetWeapon( damageInfo )
	
	if( IsValid( weapon ) && SURVIVAL_Loot_IsRefValid( weapon.GetWeaponClassName() ) )
		data0 = SURVIVAL_Loot_GetLootDataByRef( weapon.GetWeaponClassName() )


	if( file.flowstate_enable_bullet_slow 
		&& !PlayerHasPassive(player, ePassives.PAS_FORTIFIED ) 
		&& Time() >= player.p.lastTimeShotSlowApplied_Global + 3.0 
		&& StatusEffect_GetSeverity( player, eStatusEffect.move_slow ) == 0 
		&& IsValid( weapon ) && data0.lootType == eLootType.MAINWEAPON )
	{
		StatusEffect_AddTimed( player, eStatusEffect.move_slow, 0.4, 0.25, 0.25 )
		player.p.lastTimeShotSlowApplied_Global = Time()
	}

	//Super dumb headshots gamemode
	if( file.flowstate_headshots_only_gamemode && player.IsPlayer() && attacker != player )
	{
		if( IsValidHeadShot( damageInfo, player ) )
		{
			DamageInfo_SetDamage( damageInfo, 42069.0)
			return 0
		}
		else
		{
			DamageInfo_SetDamage( damageInfo, 0.0)
			return 0
		}
	}

	if( IsValidHeadShot(damageInfo, player) && player.IsPlayer() && EquipmentSlot_GetEquippedLootDataForSlot( player, "helmet" ).ref != "" ) 
	{
		OnPlayerTookHeadshot( player, damageInfo )
	}

	return PilotShieldHealthUpdate( player, damageInfo )
}


//note that the damage has been scaled by the base crit scale already by the time we reach this callback
void function OnPlayerTookHeadshot( entity damagedEnt, var damageInfo )
{
	if ( !damagedEnt.IsPlayer() || damagedEnt.IsTitan() )
		return

	if ( (DamageInfo_GetCustomDamageType( damageInfo ) & DF_DOOMED_HEALTH_LOSS) != 0 )
		return

	if ( !IsValidHeadShot( damageInfo, damagedEnt ) )
		return

	string equippedHelmet = Inventory_GetPlayerEquipment( damagedEnt, "helmet" )
	LootData data

	if ( SURVIVAL_Loot_IsRefValid( equippedHelmet ) )
		data = SURVIVAL_Loot_GetLootDataByRef( equippedHelmet )

	float headshotScalar = -1

	switch ( data.tier )
	{
		case 1:
			DamageInfo_AddCustomDamageType( damageInfo, DF_HEADSHOT )
			headshotScalar = GetCurrentPlaylistVarFloat( "helmet_lv1", 0.8 )
			break

		case 2:
			DamageInfo_AddCustomDamageType( damageInfo, DF_HEADSHOT )
			headshotScalar = GetCurrentPlaylistVarFloat( "helmet_lv2", 0.5 ) //0.50
			break

		case 3:
			DamageInfo_AddCustomDamageType( damageInfo, DF_HEADSHOT )
			headshotScalar = GetCurrentPlaylistVarFloat( "helmet_lv3", 0.35 ) //0.35
			break

		case 4:
			DamageInfo_AddCustomDamageType( damageInfo, DF_HEADSHOT )
			headshotScalar = GetCurrentPlaylistVarFloat( "helmet_lv4", 0.35 ) //0.35
			break
	}

	if ( headshotScalar > 0 )
	{
		float damage    = DamageInfo_GetDamage( damageInfo )
		//we might want to look at using DamageInfo_GetDamageCriticalHitScale in the future? For now, I'm using what HandleLocationBasedDamage uses
		float critScale = GetHeadshotDamageMultiplierFromDamageInfo( damageInfo )

		//damage hasn't been rounded yet, so we can divide to get the accurate non-crit damage
		float nonCritDamage = damage / critScale
		float critDamage    = damage - nonCritDamage
		damage = nonCritDamage + headshotScalar * critDamage
		DamageInfo_SetDamage( damageInfo, damage )
		DamageInfo_Print( damageInfo, "damage " + damage + " from hs shld scalar " + headshotScalar )
	}
}

function AdjustDamageForRodeoPlayers( entity player, var damageInfo, entity attacker )
{
	if ( player == attacker )
		return
}


function ShouldAdjustDamageForRodeoPlayer( damageInfo )
{
	int sourceID = DamageInfo_GetDamageSourceIdentifier( damageInfo )

	switch( sourceID )
	{
		case eDamageSourceId.rodeo_trap:
		case eDamageSourceId.mp_titanweapon_vortex_shield:
		case eDamageSourceId.mp_titanweapon_vortex_shield_ion:
		case eDamageSourceId.mp_titanability_smoke:
		case eDamageSourceId.mp_weapon_satchel:	//added so that rodeoing players are no longer invulnerable to their satchels when detonated by Titan's smoke
			return false

		default:
			return true
	}
}


function Wallrun_OnPlayerDeath( entity player, damageInfo )
{
	if ( IsValidHeadShot( damageInfo, player ) )
	{
		int damageType = DamageInfo_GetCustomDamageType( damageInfo )
		local soundAlias
		if ( damageType & DF_SHOTGUN )
		{
			EmitSoundOnEntityOnlyToPlayer( player, player, "Flesh.Shotgun.BulletImpact_Headshot_3P_vs_1P" )
			soundAlias = "Flesh.Shotgun.BulletImpact_Headshot_3P_vs_3P"
		}
		else if ( damageType & damageTypes.bullet || damageType & DF_BULLET )
		{
			EmitSoundOnEntityOnlyToPlayer( player, player, "Flesh.Light.BulletImpact_Headshot_3P_vs_1P" )
			soundAlias = "Flesh.Light.BulletImpact_Headshot_3P_vs_3P"
		}
		else if ( damageType & damageTypes.largeCaliber ||  damageType & DF_GIB  )
		{
			EmitSoundOnEntityOnlyToPlayer( player, player, "Flesh.Heavy.BulletImpact_Headshot_3P_vs_1P" )
			soundAlias = "Flesh.Heavy.BulletImpact_Headshot_3P_vs_3P"
		}

		if ( soundAlias )
		{
			entity attacker = DamageInfo_GetAttacker( damageInfo )
			array<entity> pilotArray = GetPlayerArray()
			//Iterating because we need to not play this sound on 2 pilots and the function only allows for 1. Performance difference is negligible according to Eric M between this and adding a specific code function.
			foreach ( pilot in pilotArray )
			{
				if ( !IsValid( pilot ) )
					continue

				if ( pilot == player || pilot == attacker )
					continue

				EmitSoundOnEntityOnlyToPlayer( player, pilot, soundAlias )
			}
		}
	}
}


//entity function Wallrun_CreateCopyOfPilotModel( entity player )
//{
	//const string PLAYER_SETTINGS_FIELD = "bodymodel"

	// asset modelName
	// if ( player.IsTitan() )
	// {
	// 	modelName = GetPlayerSettingsAssetForClassName( player.s.storedPlayerSettings, PLAYER_SETTINGS_FIELD )
	// }
	// else
	// {
	// 	modelName = player.GetPlayerSettingsAsset( PLAYER_SETTINGS_FIELD )
	// }

	//entity model = CreatePropDynamic( modelName )

	//SetTeam( model, player.GetTeam() )

	//model.SetSkin( 0 )

	//RandomizeHead( model )

	//return model
//}
