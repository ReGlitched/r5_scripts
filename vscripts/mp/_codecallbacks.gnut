untyped


global function CodeCallback_Init
global function CodeCallback_DamagePlayerOrNPC
global function GameModeRulesShouldGiveTimerCredit
global function SetGameModeRulesShouldGiveTimerCredit
global function SetGameModeRulesEarnMeterOnDamage
global function GetDamageOrigin
global function CodeCallBack_ShouldTriggerSniperCam
//global function CodeCallback_ForceAIMissPlayer
global function CodeCallback_OnTouchHealthKit
global function CodeCallback_OnPlayerGrappled
global function CodeCallback_OnProjectileGrappled
global function DamageInfo_ScaleDamage
global function CodeCallback_CheckPassThroughAddsMods
global function SetTitanMeterGainScale

// r5 stuff
global function SvCodeCallbacksCommon_Init
global function EvoCurrentShieldToNextTier
global function CodeCallback_OnPhysicsAutoDisable
global function AddEntityCallback_OnPhysicsDisabled

struct AccumulatedDamageData
{
	float accumulatedDamage
	float lastDamageTime
}

struct
{
	float titanMeterGainScale = 0.0001
	bool functionref( entity, entity, var ) ShouldGiveTimerCreditGameModeRules
	void functionref( entity, entity, TitanDamage, float ) earnMeterOnDamageGameModeRulesCallback

	table<entity, AccumulatedDamageData> playerAccumulatedDamageData
	
	bool phaseRewindEnabled
	bool register_damage_to_ai
	bool register_dummie_kill_as_actual_kill
	bool flowstate_evo_shields
	bool firingrange_aimtrainerbycolombia
	
	float maxDamageHistoryTime
	
} file

// r5 stuff
void function SvCodeCallbacksCommon_Init()
{
	file.phaseRewindEnabled = GetCurrentPlaylistVarBool( "phaseRewindEnabled", true )
	file.register_damage_to_ai = GetCurrentPlaylistVarBool( "register_damage_to_ai", false )
	file.register_dummie_kill_as_actual_kill = GetCurrentPlaylistVarBool( "register_dummie_kill_as_actual_kill", false )
	file.flowstate_evo_shields = GetCurrentPlaylistVarBool( "flowstate_evo_shields", false )
	file.firingrange_aimtrainerbycolombia = GetCurrentPlaylistVarBool( "firingrange_aimtrainerbycolombia", false )
	file.maxDamageHistoryTime = GetCurrentPlaylistVarFloat( "max_damage_history_time", MAX_DAMAGE_HISTORY_TIME )
}

void function CodeCallback_Init()
{
	file.ShouldGiveTimerCreditGameModeRules = ShouldGiveTimerCredit_Default
	file.earnMeterOnDamageGameModeRulesCallback = GameModeRulesEarnMeterOnDamage_Default
	RegisterSignal( "DamagedPlayerOrNPC" )
	//RegisterSignal( "UpdateAccumulatedDamageAfterDelay" )

	AddCallback_OnClientConnected( OnClientConnected )
}

void function OnClientConnected( entity player )
{
	if( !IsValid( player ) )
		return

	printt( "[+] New player connected! ", player )

	//By CafeFPS

	//Wraith Q fix
	player.SetForceVisibleInPhaseShift( true )
	
	//Phase Rewind Record Positions
	if( file.phaseRewindEnabled )
		thread RecordPositions( player )

	//Record a networked int for Latency to show in scoreboard
	thread NetworkedIntLatencyThingy( player )	

	// AccumulatedDamageData damageData
	// file.playerAccumulatedDamageData[player] <- damageData
}

void function NetworkedIntLatencyThingy( entity player ) //(mk): 11/12/2024 - thingified it 
{
	if( !IsValid( player ) ) //was threaded off, check again.
		return 
		
	player.EndSignal( "OnDestroy" )
	
	int latency
	
	for( ; ; )
	{
		latency = int( player.GetLatency() * 1000 ) - 45	
		
		player.SetPlayerNetInt( "latency", ClampInt( latency, -1, 500 ) )
		
		wait 0.5
	}
}

// TODO: Get an equivalent callback happening on the client, so we can stop using ServerCallback_PlayerTookDamage which is always out of date to some degree.
// Damage code rewrote by: mkos
void function CodeCallback_DamagePlayerOrNPC( entity ent, var damageInfo )
{
	if( !IsValid( ent ) )
		return

	bool entIsPlayer = ent.IsPlayer()
	bool entIsNPC = ent.IsNPC()

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	entity inflictor = DamageInfo_GetInflictor( damageInfo )

	bool attackerIsPlayer = false
	bool attackerIsNPC = false

	if ( IsValid( attacker ) )
	{
		attackerIsPlayer = attacker.IsPlayer()
		attackerIsNPC = attacker.IsNPC()
	}

	// Set damage source correctly when npc grunts or titans try to melee us
	if ( attackerIsNPC && DamageInfo_GetCustomDamageType( damageInfo ) & DF_MELEE )
	{
		if ( IsValid( attacker ) )
		{
			if ( IsSpectre( attacker ) )
			{
				DamageInfo_SetDamageSourceIdentifier( damageInfo, eDamageSourceId.spectre_melee )
			}
			else if ( IsProwler( attacker ) )
			{
				DamageInfo_SetDamageSourceIdentifier( damageInfo, eDamageSourceId.prowler_melee )
			}
			else if ( IsSuperSpectre( attacker ) )
			{
				DamageInfo_SetDamageSourceIdentifier( damageInfo, eDamageSourceId.super_spectre_melee )
			}
			else
			{
				DamageInfo_SetDamageSourceIdentifier( damageInfo, eDamageSourceId.grunt_melee )
			}
		}
	}

	// if inflictor is trigger_hurt, set the identifier according to ent keyvalue
	if ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.invalid
			&& inflictor != null
			&& inflictor.GetClassName() == "trigger_hurt"
			&& inflictor.HasKey( "damageSourceName" ) )
		DamageInfo_SetDamageSourceIdentifier( damageInfo, eDamageSourceId[expect string( inflictor.kv.damageSourceName )] )

	if( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.burn && IsValid( inflictor ) && inflictor.GetClassName() == "trigger_hurt" )
		attackerIsNPC = true //force lava to damage shields
	
	#if VERBOSE_DAMAGE_PRINTOUTS
		printt( "CodeCallback_DamagePlayerOrNPC ent:", ent )
		printt( "    Attacker:", DamageInfo_GetAttacker( damageInfo ) )
		printt( "    Inflictor:", DamageInfo_GetInflictor( damageInfo ) )
		printt( "    Distance:", DamageInfo_GetDistFromAttackOrigin( damageInfo ) )
		printt( "    Original damage:", DamageInfo_GetDamage( damageInfo ) )
		printt( "    Hitbox:", DamageInfo_GetHitBox( damageInfo ) )
		int sourceID = DamageInfo_GetDamageSourceIdentifier( damageInfo )
		printt( "    SourceID:", sourceID )
		if ( sourceID == -1 )
			printt( "    SourceID: From Code (npc melee, etc)" )
		else
			printt( "    SourceID:", GetObitFromDamageSourceID( sourceID ) )

		PrintDamageFlags( DamageInfo_GetCustomDamageType( damageInfo ) )
	#endif

	if ( !ScriptCallback_ShouldEntTakeDamage( ent, damageInfo ) )
	{
		// EMP triggers on damage, but in some cases players are invlunerable (embark, disembark, etc...)
		if ( entIsPlayer && DamageInfo_GetDamageSourceIdentifier( damageInfo ) in level._empForcedCallbacks )
		{
			if ( ShouldPlayEMPEffectEvenWhenDamageIsZero( ent, attacker ) )
				EMP_DamagedPlayerOrNPC( ent, damageInfo )
		}

		DamageInfo_SetDamage( damageInfo, 0 )
		return
	}

	if ( ( IsAirDrone( ent ) ) && ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) in level._empForcedCallbacks ) )
	{
		EMP_DamagedPlayerOrNPC( ent, damageInfo )
		DamageInfo_SetDamage( damageInfo, 0 )
		return
	}

	if( ( ent.IsNPC() && !ent.IsNonCombatAI() ) && ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) in level._empForcedCallbacks ) )
	{
		EMP_DamagedPlayerOrNPC( ent, damageInfo )
	}
	// HACK helps trap/grenade weapons do damage to the correct entities (player who deployed it as well as the team opposite his)
	if ( IsValid( inflictor ) && "originalOwner" in inflictor.s )
	{
		local ogOwner = inflictor.s.originalOwner
		if ( IsValid( ogOwner ) )
		{
			// if the victim is the guy who damaged the trap, and he is not the ogOwner...
			if ( ent == attacker && ent != ogOwner )
			{
				// HACK to do this legit we need DamageInfo_SetAttacker( damageInfo )
				// victim should take damage from the original owner instead of the satchel attacker so he gets a kill credit
				ent.TakeDamage( DamageInfo_GetDamage( damageInfo ), ogOwner, inflictor, { weapon = DamageInfo_GetWeapon( damageInfo ), origin = DamageInfo_GetDamagePosition( damageInfo ), force = DamageInfo_GetDamageForce( damageInfo ), scriptType = DamageInfo_GetCustomDamageType( damageInfo ), damageSourceId = DamageInfo_GetDamageSourceIdentifier( damageInfo ) } )

				// now zero out the normal damage and return
				DamageInfo_SetDamage( damageInfo, 0 )
				return
			}
		}
	}

	if ( IsValid( inflictor ) )
	{
		if ( inflictor.IsProjectile() && entIsPlayer )
		{
			if ( inflictor.proj.damageScale != 1.0 )
			{
				DamageInfo_ScaleDamage( damageInfo, inflictor.proj.damageScale )
			}

			// Don't take damage from projectiles created before you where spawned.
			// if ( inflictor.GetProjectileCreationTime() < ent.s.respawnTime && ( Time() - ent.s.respawnTime ) < 2.0 )
			// {
				// DamageInfo_SetDamage( damageInfo, 0 )
				// return
			// }
		}

		if ( inflictor.e.onlyDamageEntitiesOnce == true || inflictor.e.onlyDamageEntitiesOncePerTick == true )
		{
			#if DEVELOPER
				mAssert( !inflictor.e.damagedEntities.contains(ent), "damagedEntities already contains ent " + string( ent ) )
			#endif
			inflictor.e.damagedEntities.append( ent )
		}
	}

	// Round damage to nearest full value
	DamageInfo_SetDamage( damageInfo, floor( DamageInfo_GetDamage( damageInfo ) + 0.5 ) )
	if ( DamageInfo_GetDamage( damageInfo ) <= 0 )
		return

	#if VERBOSE_DAMAGE_PRINTOUTS
		printt( "    rounded damage amount:", DamageInfo_GetDamage( damageInfo ) )
	#endif

	HandleLocationBasedDamage( ent, damageInfo )
	DamageInfo_SetDamage( damageInfo, floor( DamageInfo_GetDamage( damageInfo ) + 0.5 ) )
	#if VERBOSE_DAMAGE_PRINTOUTS
		printt( "    after location based damage:", DamageInfo_GetDamage( damageInfo ) )
	#endif

	RunClassDamageCallbacks( ent, damageInfo )
	DamageInfo_SetDamage( damageInfo, floor( DamageInfo_GetDamage( damageInfo ) + 0.5 ) )
	#if VERBOSE_DAMAGE_PRINTOUTS
		printt( "    after class damage callbacks:", DamageInfo_GetDamage( damageInfo ) )
	#endif
	if ( DamageInfo_GetDamage( damageInfo ) == 0 )
		return

	// use AddDamageByCallback( "classname", function ) to registed functions
	if ( IsValid( attacker ) )
	{
		string attackerClassName = attacker.GetClassName()
		if ( attackerClassName in svGlobal.damageByCallbacks )
		{
			foreach ( callbackFunc in svGlobal.damageByCallbacks[attackerClassName] )
			{
				callbackFunc( ent, damageInfo )
				if ( DamageInfo_GetDamage( damageInfo ) == 0 )
					return
			}
		}
	}

	float damageMultiplier = 1.0 + StatusEffect_GetSeverity( ent, eStatusEffect.damage_received_multiplier )

	if ( DamageInfo_GetWeapon( damageInfo ) != null ) 
	{
		if ( ent.GetShieldHealth() == 0 ) 
		{
			//unshielded (float)
			damageMultiplier = DamageInfo_GetWeapon(damageInfo).GetWeaponSettingFloat(eWeaponVar.damage_unshielded_scale)
		} 
		else 
		{
			//shielded (float)
			damageMultiplier = DamageInfo_GetWeapon(damageInfo).GetWeaponSettingFloat(eWeaponVar.damage_shield_scale)
		}
 	}

	if ( damageMultiplier != 1.0 )
		DamageInfo_ScaleDamage( damageInfo, damageMultiplier )

	// Added via AddEntityCallback_OnDamaged
	foreach ( callbackFunc in ent.e.entDamageCallbacks )
	{
		callbackFunc( ent, damageInfo )
	}
	#if VERBOSE_DAMAGE_PRINTOUTS
		printt( "    after AddEntityCallback_OnDamaged callbacks:", DamageInfo_GetDamage( damageInfo ) )
	#endif

	// use AddDamageCallbackSourceID( eDamageSourceId.xyz, function ) to register functions
	int damageSourceId = DamageInfo_GetDamageSourceIdentifier( damageInfo )
	if ( damageSourceId in shGlobal.damageSourceIdCallbacks )
	{
		foreach ( callbackFunc in shGlobal.damageSourceIdCallbacks[ damageSourceId ] )
		{
			callbackFunc( ent, damageInfo )
			damageSourceId = DamageInfo_GetDamageSourceIdentifier( damageInfo ) //callback may have changed the damageSourceId, so let's get that again.
		}
	}
	#if VERBOSE_DAMAGE_PRINTOUTS
		printt( "    after damageSourceID callbacks:", DamageInfo_GetDamage( damageInfo ) )
	#endif
	if ( DamageInfo_GetDamage( damageInfo ) == 0 )
		return

	#if VERBOSE_DAMAGE_PRINTOUTS
		printt( "    after class damage final callbacks:", DamageInfo_GetDamage( damageInfo ) )
	#endif
	if ( DamageInfo_GetDamage( damageInfo ) == 0 )
		return
	// save a bunch of stuff because bleedout messes with health

	float savedDamage = DamageInfo_GetDamage( damageInfo )
	int savedHealth = ent.GetHealth()
	bool wasBleedingOut = entIsPlayer && Bleedout_IsBleedingOut( ent )
	
	RunClassDamageFinalCallbacks( ent, damageInfo )
	
	if ( DamageInfo_GetCustomDamageType( damageInfo ) & DF_DOOMED_HEALTH_LOSS )
		DamageInfo_AddDamageFlags( damageInfo, DAMAGEFLAG_NOPAIN )

	#if TRACKER && SERVER && MP
			__TrackerStatsHook_Damage( ent, damageInfo )
	#endif

	if ( entIsPlayer )
	{		
		PlayerTookDamage( ent, damageInfo, attacker, inflictor, damageSourceId )

		ent.SetCloakFlicker( 0.5, 0.65 )
	}

	if( entIsNPC && attackerIsNPC )
	{
		if( !IsValid( ent ) )
			return
		
		if( ent.GetShieldHealth() > 0 )
		{
			DamageInfo_AddCustomDamageType( damageInfo, DF_SHIELD_DAMAGE )

			float shieldHealth = float( ent.GetShieldHealth() )
			if( shieldHealth )
			{
				DamageInfo_AddCustomDamageType( damageInfo, DF_SHIELD_DAMAGE )
			
				if(DamageInfo_GetDamage( damageInfo ) > ent.GetShieldHealth())
				{
					float passDamage = DamageInfo_GetDamage( damageInfo ) - ent.GetShieldHealth()
					ent.SetHealth( maxint(0, int(ent.GetHealth() - passDamage)) )
				}
			}

			float newShieldHealth = shieldHealth - DamageInfo_GetDamage( damageInfo )

			if(IsValid(ent))
				ent.SetShieldHealth( maxint( 0, int( newShieldHealth ) ) )

			if ( shieldHealth && newShieldHealth <= 0 )
				DamageInfo_AddCustomDamageType( damageInfo, DF_SHIELD_BREAK )

			DamageInfo_SetDamage( damageInfo, 0 )
		}
	}

	if (  ( entIsNPC && attackerIsPlayer ) ) //|| ( entIsPlayer && attackerIsNPC ) )
	{
		float damage = 0
		//AI bleedthrough fix By @CafeFPS (CafeFPS)
		if( ent.GetShieldHealth() > 0 )
		{
			//DamageInfo_AddCustomDamageType( damageInfo, DF_SHIELD_DAMAGE )
			damage = DamageInfo_GetDamage( damageInfo )
			float shieldHealth = float( ent.GetShieldHealth() )
			
			if( shieldHealth )
			{
				DamageInfo_AddCustomDamageType( damageInfo, DF_SHIELD_DAMAGE )
			
				if( damage > ent.GetShieldHealth() )
				{
					float passDamage = damage - ent.GetShieldHealth()
					ent.SetHealth( maxint( 0, int( ent.GetHealth() - passDamage ) ) )
				}
			}
			
			float newShieldHealth = shieldHealth - damage
			
			ent.SetShieldHealth( maxint( 0, int( newShieldHealth ) ) )

			if ( shieldHealth && newShieldHealth <= 0 )
			{
				DamageInfo_AddCustomDamageType( damageInfo, DF_SHIELD_BREAK )

				if( IsValid( attacker ) && IsValid( ent ) ) //same frame?
				{
					if( attacker != ent && attackerIsPlayer )
						EmitSoundOnEntityOnlyToPlayer( attacker, attacker, "humanshield_break_1p_vs_3p" )

					if( entIsPlayer )
						EmitSoundOnEntityOnlyToPlayer( ent, ent, "humanshield_break_3p_vs_1p" )
				}
			}

			if( attackerIsPlayer )
				PlayerDamageFeedback( ent, damageInfo )
			
			if( file.register_damage_to_ai && attackerIsPlayer )
			{
				attacker.p.playerDamageDealt = attacker.p.playerDamageDealt + damage
				attacker.SetPlayerNetInt( "damage", attacker.GetPlayerNetInt( "damage" ) + damage )
			}
			
			DamageInfo_SetDamage( damageInfo, 0) //hack, the damage value was only required for proper client display. Colombia
		} 
		else
		{
			if( attacker.IsPlayer() )
				PlayerDamageFeedback( ent, damageInfo )

			if( file.register_damage_to_ai && attacker.IsPlayer() )
			{
				attacker.p.playerDamageDealt = attacker.p.playerDamageDealt + DamageInfo_GetDamage( damageInfo )
				attacker.SetPlayerNetInt( "damage", attacker.GetPlayerNetInt( "damage" ) + DamageInfo_GetDamage( damageInfo ) )
			}
		}

		//(mk): was missing damage history for shields for non-players
		float actualDamageDone = damage ? damage : DamageInfo_GetDamage( damageInfo )
		
		if( !ent.IsPlayer() && file.register_dummie_kill_as_actual_kill && !file.firingrange_aimtrainerbycolombia )
			StoreDamageHistoryAndUpdate( ent, MAX_DAMAGE_HISTORY_TIME, actualDamageDone, attacker.GetOrigin(), DamageInfo_GetCustomDamageType( damageInfo ), damageSourceId, attacker, GetWeaponModsFromDamageInfo( damageInfo ) )

		float damageAmount = DamageInfo_GetDamage( damageInfo )
		bool isKillShot = (damageAmount >= ent.GetHealth() + ent.GetShieldHealth() )
	
		if ( isKillShot && attacker.IsPlayer() && !entIsPlayer )
		{
			DamageInfo_AddCustomDamageType( damageInfo, DF_KILLSHOT )
			EmitSoundOnEntityOnlyToPlayer( attacker, attacker, "flesh_bulletimpact_downedshot_1p_vs_3p" )
			
			if( file.register_dummie_kill_as_actual_kill && !file.firingrange_aimtrainerbycolombia )
			{
				if( is1v1EnabledAndAllowed() )
				{				
					if ( damageSourceId == eDamageSourceId.damagedef_suicide || damageSourceId == eDamageSourceId.damagedef_despawn )
						return
				}
				
				if( IsValid( ent ) )
					AddPlayerScore( attacker, "Sur_DownedPilot", ent )
				
				attacker.SetPlayerNetInt( "kills", attacker.GetPlayerNetInt( "kills" ) + 1 )
				
				#if TRACKER 
					Tracker_EndFight( ent, attacker, damageInfo )
				#endif 
			}

			if( IsValid( attacker ) && attacker.IsPlayer() && IsAlive( attacker ) && file.flowstate_evo_shields && Gamemode() == eGamemodes.SURVIVAL )
				EvoCurrentShieldToNextTier( damageInfo, attacker )
		}
	}

	#if VERBOSE_DAMAGE_PRINTOUTS
		printt( "    After player damage mod:", DamageInfo_GetDamage( damageInfo ) )
	#endif

	// Added via AddEntityCallback_OnPostDamaged
	foreach ( callbackFunc in ent.e.entPostDamageCallbacks )
	{
		callbackFunc( ent, damageInfo )
	}

	UpdateLastDamageTime( ent )
	
	UpdateAttackerInfo( ent, attacker, savedDamage )

	

	if ( !(DamageInfo_GetCustomDamageType( damageInfo ) & DF_DOOMED_HEALTH_LOSS) )
	{
		if ( attackerIsPlayer )
		{		
			if ( entIsPlayer )
			{
				attacker.p.currentTargetPlayerOrSoul_Ent = ent
				attacker.p.currentTargetPlayerOrSoul_LastHitTime = Time()
				attacker.p.playerDamageDealt += savedDamage
				attacker.SetPlayerNetInt( "damage", attacker.GetPlayerNetInt( "damage" ) + savedDamage )
			}
		}
	}

	#if VERBOSE_DAMAGE_PRINTOUTS
		printt( "    final damage done:", DamageInfo_GetDamage( damageInfo ) )
		printt( "	 health: " + ent.GetHealth() )
	#endif

	RunClassPostDamageCallbacks( ent, damageInfo )

	//pain sounds _base_gametype.nut, death sounds in _death_package.nut
	// this is after "post damage callbacks" so that it runs after battle chatter, thus battle chatter takes priority
	HandlePainSounds( ent, damageInfo )
	#if VERBOSE_DAMAGE_PRINTOUTS
		printt( "	 health after postdamage: " + ent.GetHealth() )
		PrintDamageFlags( DamageInfo_GetCustomDamageType( damageInfo ) )
	#endif

	int damageType = DamageInfo_GetCustomDamageType( damageInfo )
	
	if ( damageType & DF_SHIELD_DAMAGE && entIsPlayer )
	{
		if( ent.GetShieldHealth() > 0 || !( damageType & DF_BYPASS_SHIELD ) )
			DamageInfo_SetDamage( damageInfo, 0 ) // Do not damage the player, the damage value was only required for proper client display.	
	}
	
	#if VERBOSE_DAMAGE_PRINTOUTS
		printt( "	 health after shield damage flag : " + ent.GetHealth() )
	#endif
	
	#if SERVER && MP
		PIN_DamageDone( attacker, ent, DamageInfo_GetDamage( damageInfo ) )
	#endif

	attacker.Signal( "DamagedPlayerOrNPC" )
	ent.Signal( "TookDamage", { damageInfo = damageInfo } )
}

void function EarnMeterDamageConversion( var damageInfo, entity attacker, entity ent, float savedDamage )
{

}


bool function ShouldUseNonTitanHeavyArmorDamageScale( entity victim )
{
	if ( (victim.GetArmorType() != ARMOR_TYPE_HEAVY) )
		return false

	if ( victim.IsTitan() )
		return false

	if ( IsDropship( victim ) )
		return false

	return true
}

void function GameModeRulesEarnMeterOnDamage_Default( entity attacker, entity victim, TitanDamage titanDamage, float savedDamage )
{

}

void function SetTitanMeterGainScale( float scalar )
{
	file.titanMeterGainScale = scalar
}

#if MP
void function UpdateAccumulatedDamageAfterDelay( entity attacker )
{
	attacker.EndSignal( "OnDeath" )
	attacker.Signal( "UpdateAccumulatedDamageAfterDelay" )
	attacker.EndSignal( "UpdateAccumulatedDamageAfterDelay" )

	wait 0.25

	AccumulatedDamageData damageData = file.playerAccumulatedDamageData[attacker]

	if ( damageData.accumulatedDamage == 0 )
		return

	AddPlayerScore( attacker, "DamageTitan", null, "", int( max( damageData.accumulatedDamage * 100, 1 ) ) )
	damageData.accumulatedDamage = 0
}
#endif

void function SetGameModeRulesEarnMeterOnDamage( void functionref( entity, entity, TitanDamage, float ) rules )
{
	file.earnMeterOnDamageGameModeRulesCallback = rules
}

bool function ShouldGiveTimerCredit_Default( entity player, entity victim, var damageInfo )
{
	return false
}

bool function GameModeRulesShouldGiveTimerCredit( entity player, entity victim, var damageInfo )
{
	return file.ShouldGiveTimerCreditGameModeRules( player, victim, damageInfo )
}

void function SetGameModeRulesShouldGiveTimerCredit( bool functionref( entity, entity, var ) rules )
{
	file.ShouldGiveTimerCreditGameModeRules = rules
}

function TitanDamageFlinch( entity ent, damageInfo )
{
	if ( DamageInfo_GetCustomDamageType( damageInfo ) & DF_DOOMED_HEALTH_LOSS )
		return

	if ( TitanStagger( ent, damageInfo ) )
		return

	if ( DamageInfo_GetDamage( damageInfo ) >= TITAN_ADDITIVE_FLINCH_DAMAGE_THRESHOLD )
		AddFlinch( ent, damageInfo )
}

function PilotDamageFlinch( entity ent, damageInfo )
{
	//if ( DamageInfo_GetCustomDamageType( damageInfo ) & DF_DOOMED_HEALTH_LOSS )
	//	return

	float damage = DamageInfo_GetDamage( damageInfo )
	if ( damage >= 5 )
		AddFlinch( ent, damageInfo )
}

vector function GetDamageOrigin( damageInfo, entity victim = null )
{
	int damageSourceId = DamageInfo_GetDamageSourceIdentifier( damageInfo )

	entity inflictor = DamageInfo_GetInflictor( damageInfo )

	if ( inflictor == svGlobal.worldspawn )
		return DamageInfo_GetDamagePosition( damageInfo )

	vector damageOrigin = IsValid( inflictor ) ? inflictor.GetOrigin() : DamageInfo_GetDamagePosition( damageInfo )

	switch ( damageSourceId )
	{
		case damagedef_nuclear_core:
			//if ( IsValid( victim ) && victim.IsPlayer() && IsValid( victim.GetTitanSoulBeingRodeoed() ) )
			{
				damageOrigin += (RandomVecInDome( Vector( 0, 0, -1 ) ) * 300.0)
				damageOrigin += Vector( 0, 0, 128 )
			}
			break

		case eDamageSourceId.switchback_trap:
			if ( IsValid( victim ) && victim.IsPlayer() )
				damageOrigin = victim.EyePosition() + (RandomVecInDome( Vector( 0, 0, -1 ) ) * 300.0)
			break

		default:
			if ( DamageInfo_GetAttacker( damageInfo ) )
			{
				inflictor = DamageInfo_GetAttacker( damageInfo )
				damageOrigin = inflictor.GetWorldSpaceCenter()
			}
			break
	}

	return damageOrigin
}

/*
function TrackDPS( ent )
{
	ent.s.dpsTracking <- {}
	ent.s.dpsTracking.damage <- 0

	local startTime = Time()

	ent.WaitSignal( "Doomed" )

	local duration = Time() - startTime

	printt( "DPS:", ent.s.dpsTracking.damage / duration, duration )

	delete ent.s.dpsTracking
}

function UpdateDPS( ent, damageInfo )
{
	if ( GetDoomedState( ent ) )
		return

	if ( !( "dpsTracking" in ent.s ) )
		thread TrackDPS( ent )

	ent.s.dpsTracking.damage += DamageInfo_GetDamage( damageInfo )
}
*/


void function PlayerTookDamage( entity player, var damageInfo, entity attacker, entity inflictor, int damageSourceId )
{
	int hitBox = DamageInfo_GetHitBox( damageInfo )

	bool critHit = false

	if ( CritWeaponInDamageInfo( damageInfo ) )
		critHit = IsCriticalHit( attacker, player, hitBox, DamageInfo_GetDamage( damageInfo ), DamageInfo_GetDamageType( damageInfo ) )

	if ( critHit )
		DamageInfo_AddCustomDamageType( damageInfo, DF_CRITICAL )

	if ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == eDamageSourceId.fall )
		DamageInfo_SetForceKill( damageInfo, true )

	int shieldDamage = 0

	var takenDamage = Wallrun_PlayerTookDamage( player, damageInfo, attacker )

	if( takenDamage != null )
		shieldDamage = expect int( takenDamage )

	#if VERBOSE_DAMAGE_PRINTOUTS && DEVELOPER 
		Warning("shield damage: " + string( shieldDamage ) )
	#endif

	float damageAmount = DamageInfo_GetDamage( damageInfo )
	bool isKillShot = (damageAmount >= player.GetHealth() + shieldDamage)
	int damageType = DamageInfo_GetCustomDamageType( damageInfo )
	
	if ( isKillShot )
		damageType = (damageType | DF_KILLSHOT)

	vector attackerOrigin = <0,0,0>
	if ( IsValid( attacker ) )
	{
		if ( attacker.IsPlayer() )
			PlayerDamageFeedback( player, damageInfo, shieldDamage )

		attackerOrigin = attacker.GetOrigin()
	}

	array<string> weaponMods = GetWeaponModsFromDamageInfo( damageInfo )

	local eModSourceID = null
	foreach ( mod in weaponMods )
	{
		local modSourceID = GetModSourceID( mod )
		if ( modSourceID != null && modSourceID in modNameStrings )
			eModSourceID = modSourceID
	}

	if ( IsAlive( player ) )
	{
		float damageHistoryTime = file.maxDamageHistoryTime

		if ( shieldDamage == 0 && DamageInfo_GetDamage( damageInfo ) != 0 && IsValid( attacker ) ) //only send flesh damage here, shield damage send in Wallrun_PlayerTookDamage. Cafe
		{
			StoreDamageHistoryAndUpdate( player, damageHistoryTime, DamageInfo_GetDamage( damageInfo ), attacker.GetOrigin(), DamageInfo_GetCustomDamageType( damageInfo ), damageSourceId, attacker )
		}
	}

	if ( !(DamageInfo_GetCustomDamageType( damageInfo ) & DF_DOOMED_HEALTH_LOSS) )
	{
		TellClientPlayerTookDamage( player, damageInfo, attacker, eModSourceID, damageType, damageSourceId )
	}
	
	entity weapon = DamageInfo_GetWeapon( damageInfo )
	
	if( IsValid( weapon ) && weapon.HasMod( "blood_harvest" ) )
	{
		BloodHarvest_OnPlayerDamaged( player, damageInfo )
	}

	if( IsValid( weapon ) && weapon.HasMod( "incendiary_rounds" ) )
	{
		thread function () : ( attacker, weapon, player, damageSourceId)
		{
			Signal( player, "DamagedPlayerOrNPC" )
			EndSignal( player, "DamagedPlayerOrNPC" )
			EndSignal( player, "OnDeath" )
			EndSignal( player, "OnDestroy" )
			
			entity fx = StartParticleEffectOnEntity_ReturnEntity( player, GetParticleSystemIndex( $"P_fire_loop_sm" ), FX_PATTACH_ABSORIGIN_FOLLOW, 0 )
			
			entity fire = CreateEntity( "trigger_cylinder" )
			fire.SetRadius( 75 )
			fire.SetAboveHeight( 72 )
			fire.SetBelowHeight( 0 )
			fire.SetOrigin( player.GetOrigin() )
			DispatchSpawn( fire )
			fire.SetOwner( attacker )
			fire.SetEnterCallback( NPCOrPlayerWillStartBurning )
			fire.SetParent( player )
			
			OnThreadEnd(
				function() : ( fx, fire )
				{
					if(IsValid(fx))
						fx.Destroy()

					if(IsValid(fire))
						fire.Destroy()
				}
			)
			
			float endTime = Time() + 3
			
			while( true )
			{
				if( Time() >= endTime )
					break
				
				wait 0.15
				
				if( !IsValid( player ) || !IsValid( attacker ) )
					break
				
				player.TakeDamage( 1, attacker, null, { scriptType = DF_DOOMED_HEALTH_LOSS, damageSourceId = damageSourceId } )
			}
		}()
	}
	
	// if( IsValid( attacker ) && !player.IsPhaseShifted() )
	// {
		// PhaseShift( player, 0.0, 5 )
	// }
}

void function BloodHarvest_OnPlayerDamaged(entity victim, var damageInfo)
{
	if ( !IsValid(victim) || !victim.IsPlayer() || !IsAlive( victim ) ) 
		return

	entity attacker = InflictorOwner( DamageInfo_GetAttacker(damageInfo) )
	
	if( !IsValid( attacker ) || !attacker.IsPlayer() || !IsAlive( attacker ) )
		return

	int sourceId = DamageInfo_GetDamageSourceIdentifier( damageInfo )
	float damage = DamageInfo_GetDamage( damageInfo ) / 3

	float attshield = float( attacker.GetShieldHealth() )
	float atthealth = float( attacker.GetHealth() )
	
	if ( atthealth < attacker.GetMaxHealth() )
	{
		attacker.SetHealth( min( atthealth + damage, float( attacker.GetMaxHealth() ) ) )
	} 
	else if ( attshield < attacker.GetShieldHealthMax() )
	{
		attacker.SetShieldHealth( min( attshield + damage, float( attacker.GetShieldHealthMax() ) ) )
	}
}

void function NPCOrPlayerWillStartBurning( entity trigger, entity player )
{
	thread EntWillStartBurning_Thread(trigger, player)
}

void function EntWillStartBurning_Thread(entity trigger, entity player)
{
	if(!IsValid(player) || IsValid(player) && !player.IsPlayer() && !player.IsNPC() || 
		player == trigger.GetOwner() ) 
		return

			Signal( player, "DamagedPlayerOrNPC" )
			EndSignal( player, "DamagedPlayerOrNPC" )
			EndSignal( player, "OnDeath" )
			EndSignal( player, "OnDestroy" )
			
			entity fx = StartParticleEffectOnEntity_ReturnEntity( player, GetParticleSystemIndex( $"P_fire_loop_sm" ), FX_PATTACH_ABSORIGIN_FOLLOW, 0 )
			
			entity fire = CreateEntity( "trigger_cylinder" )
			fire.SetRadius( 75 )
			fire.SetAboveHeight( 72 )
			fire.SetBelowHeight( 0 )
			fire.SetOrigin( player.GetOrigin() )
			DispatchSpawn( fire )
			fire.SetOwner(player)
			fire.SetEnterCallback( NPCOrPlayerWillStartBurning )
			fire.SetParent( player )
			
			OnThreadEnd(
				function() : ( fx, fire )
				{
					if(IsValid(fx))
						fx.Destroy()

					if(IsValid(fire))
						fire.Destroy()
				}
			)
			
			float endTime = Time() + 3
			
			while( true )
			{
				if( Time() >= endTime )
					break
				
				wait 0.15
				
				if( !IsValid( player ) )
					break
				
				player.TakeDamage( 1, trigger.GetOwner(), null, { scriptType = DF_DOOMED_HEALTH_LOSS } )
			}
}

void function EvoCurrentShieldToNextTier( var damageInfo, entity attacker )
{
	LootData currentShield = EquipmentSlot_GetEquippedLootDataForSlot( attacker, "armor" )
	
	if( currentShield.tier == 4 )
		return
	
	int oldshield = attacker.GetShieldHealth()
	int newMaxShield = SURVIVAL_GetArmorShieldCapacity( currentShield.tier ) + FLOWSTATE_HWLTM_SHIELD_AMOUNT
	
	if( currentShield.tier == 0 )
		newMaxShield = SURVIVAL_GetArmorShieldCapacity( 1 )
	else if( currentShield.tier >= 7 )
		newMaxShield = attacker.GetShieldHealthMax() + FLOWSTATE_HWLTM_SHIELD_AMOUNT
	
	if( newMaxShield >= SURVIVAL_GetArmorShieldCapacity( currentShield.tier ) )
	{
		string nextShield = returnShieldNameForCurrentShieldName( currentShield )
		
		if( nextShield == "" )
		{
			attacker.SetShieldHealthMax( newMaxShield )
			attacker.SetShieldHealth( oldshield )
			Remote_CallFunction_Replay( attacker, "EvoShield_PlayFX", 7 )
			return
		}

		LootData nextShieldData = SURVIVAL_Loot_GetLootDataByRef( nextShield )

		if( currentShield.ref != "" )
			SURVIVAL_RemoveFromPlayerInventory(attacker, currentShield.ref, 1)

		Inventory_SetPlayerEquipment( attacker, nextShield, "armor" )
		Remote_CallFunction_Replay( attacker, "EvoShield_PlayFX", nextShieldData.tier )
	}

	attacker.SetShieldHealthMax( newMaxShield )
	attacker.SetShieldHealth( oldshield )
}

string function returnShieldNameForCurrentShieldName( LootData currentShield  )
{
	switch( currentShield.ref )
	{
		case "":
		return "armor_pickup_lv1"

		case "armor_pickup_lv1":
		return "armor_pickup_lv2"
		
		case "armor_pickup_lv2":
		return "armor_pickup_lv3"
		
		case "armor_pickup_lv3":
		return "armor_pickup_lv5"
		
		case "armor_pickup_lv5":
		return "armor_pickup_lv6"

		case "armor_pickup_lv6":
		return "armor_pickup_lv7"
		
		case "armor_pickup_lv7":
		return ""
	}
	
	return ""
}

function TellClientPlayerTookDamage( entity player, damageInfo, entity attacker, eModSourceID, int damageType, int damageSourceId )
{
	if ( !player.hasConnected )
		return

	local attackerEHandle = IsValid( attacker ) ? attacker.GetEncodedEHandle() : null
	local weaponEHandle = IsValid( DamageInfo_GetWeapon( damageInfo ) ) ? DamageInfo_GetWeapon( damageInfo ).GetEncodedEHandle() : null
	local damageOrigin = GetDamageOrigin( damageInfo, player )

	Remote_CallFunction_Replay(
		player,
		"ServerCallback_PlayerTookDamage",

		DamageInfo_GetDamage( damageInfo ),

		damageOrigin.x,
		damageOrigin.y,
		damageOrigin.z,

		damageType,
		damageSourceId,

		attackerEHandle
	)
}

// This only handles damage events. Whizbys can still cause snipercam to trigger without passing through this check.
function CodeCallBack_ShouldTriggerSniperCam( damageInfo )
{
	switch ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) )
	{
		case damagedef_titan_step:
		case eDamageSourceId.super_electric_smoke_screen:
			return false
	}

	return true
}

// bool function CodeCallback_ForceAIMissPlayer( entity npc, entity player )
// {
// 	return SPMP_Callback_ForceAIMissPlayer( npc, player )
// }

bool function CodeCallback_OnTouchHealthKit( entity player, entity ent )
{
	string entityClassName = ent.GetClassName()

	Assert( entityClassName in svGlobal.onTouchHealthKitCallbacks )

	array<bool functionref( entity player, entity healthpack )> callbackFuncs = svGlobal.onTouchHealthKitCallbacks[ entityClassName ]
	foreach ( callbackFunc in callbackFuncs )
	{
		bool result = callbackFunc( player, ent )
		if ( result )
			return result
	}

	return false
}

bool function ShouldPlayEMPEffectEvenWhenDamageIsZero( entity ent, entity attacker )
{
	if ( ent.IsTitan() && IsTitanWithinBubbleShield( ent ) )
		return false

	if  ( !IsValid( attacker ) )
		return true

	if ( attacker.GetTeam() != ent.GetTeam() )
		return true

	return false
}

void function CodeCallback_OnPlayerGrappled( entity player, entity victim )
{
	if ( victim.GetTeam() != player.GetTeam() )
	{
		if ( victim.p.lastGrappledTime + TITAN_GRAPPLE_DEBOUNCE_TIME < Time() )
		{
			if ( player.IsTitan() )
			{
				victim.TakeDamage( TITAN_GRAPPLE_DAMAGE, player, player, { origin = victim.EyePosition(), scriptType = DF_GIB, damageSourceId = eDamageSourceId.titan_grapple } )

				if ( victim.IsTitan() )
				{
					entity soul = victim.GetTitanSoul()
					if ( soul == null )
						soul = victim

					float fadeTime = 0.5
					StatusEffect_AddTimed( soul, eStatusEffect.dodge_speed_slow, 0.75, 0.9 + fadeTime, fadeTime )
					StatusEffect_AddTimed( soul, eStatusEffect.move_slow, 0.75, 0.9 + fadeTime, fadeTime )
				}
			}

			if ( victim.IsPlayer() )
			{
				if ( player.IsTitan() )
					MessageToPlayer( victim, eEventNotifications.Grapple_WasGrappled_ByTitan )
				else
					MessageToPlayer( victim, eEventNotifications.Grapple_WasGrappled_ByPilot )
			}
		}

		victim.p.lastGrappledTime = Time()
	}
}

void function CodeCallback_OnProjectileGrappled( entity player, entity projectile )
{

}

void function DamageInfo_ScaleDamage( var damageInfo, float scalar )
{
	DamageInfo_SetDamage( damageInfo, DamageInfo_GetDamage( damageInfo ) * scalar )
}

string function CodeCallback_CheckPassThroughAddsMods( entity player, entity hitEnt, string currWeaponName )
{
	if ( !IsValid( player ) )
		return ""

	if ( StatusEffect_GetSeverity( hitEnt, eStatusEffect.pass_through_amps_weapon ) > 0 )
	{
		array<string> mods = GetWeaponBurnMods( currWeaponName )
		if ( mods.len() > 0 )
			return mods[0]
	}
	return ""
}

void function Generic_NPCTookDamage( entity npc, damageInfo, TitanDamage titanDamage )
{
	Assert( !npc.IsTitan() )
	Assert( DamageInfo_GetDamage( damageInfo ) > 0 )
	Assert( IsAlive( npc ) )

	bool critHit = false
	if ( CritWeaponInDamageInfo( damageInfo ) )
		critHit = IsCriticalHit( DamageInfo_GetAttacker( damageInfo ), npc, DamageInfo_GetHitBox( damageInfo ), DamageInfo_GetDamage( damageInfo ), DamageInfo_GetDamageType( damageInfo ) )

	if ( critHit )
		DamageInfo_AddCustomDamageType( damageInfo, DF_CRITICAL )

	titanDamage.shieldDamage = NPCShieldHealthUpdate( npc, damageInfo, critHit )
}


int function NPCShieldHealthUpdate( entity npc, damageInfo, bool critHit )
{
	if ( npc.GetShieldHealth() <= 0 )
		return 0

	if ( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == damagedef_suicide )
		return 0

	if ( DamageInfo_GetForceKill( damageInfo ) )
	{
		npc.SetShieldHealth( 0 )
		return 0
	}
	else if ( DamageInfo_GetCustomDamageType( damageInfo ) & DF_BYPASS_SHIELD )
	{
		return 0
	}

	DamageInfo_AddCustomDamageType( damageInfo, DF_SHIELD_DAMAGE )
	return int( ShieldModifyDamage( npc, damageInfo ) )
}

void function CodeCallback_OnPhysicsAutoDisable( entity ent )
{
	foreach ( func in ent.e.onPhysicsDisabledCallbacks )
		func( ent )
}

void function AddEntityCallback_OnPhysicsDisabled( entity ent, void functionref( entity ent ) callbackFunc )
{
	Assert( !ent.e.onPhysicsDisabledCallbacks.contains( callbackFunc ), "Already added " + string( callbackFunc ) + " to entity" )

	ent.PhysicsSetAutoDisableNotifications( true )
	ent.e.onPhysicsDisabledCallbacks.append( callbackFunc )
}