#if SERVER
untyped
#endif

const bool PULSETRAIL = true

global function SonarShared_Init

#if SERVER
global function SonarStart
global function SonarEnd
global function SonarEnd_EndHighlight
global function LockOnWarningStart
global function LockOnWarningEnd
global function IncrementSonarPerTeam
global function DecrementSonarPerTeam
global function OnSonarTriggerLeaveInternal
global function AddSonarStartCallback
global function AddSonarDetectionForPropScript
global function RemoveSonarDetectionForPropScript
global function GetSonarRegisteredPropScripts
global function AddSonarDetectionForPropScriptWithProxy
global function RemoveSonarDetectionForPropScriptWithProxy
global function GetSonarRegisteredPropScriptFromProxy

#endif

#if CLIENT
global function SonarPulse
global function ServerCallback_SonarPulseFromPosition
global function ServerCallback_SonarPulseConeFromPosition
#endif

const asset FX_SONAR_TARGET = $"P_ar_target_sonar"
const asset FX_CAMERA_TARGET = $"P_ar_target_drone"
const asset FX_DRONE_TARGET = $"P_ar_foa_lockon"
const asset FX_HEAL_TARGET = $"P_ar_target_ally"

struct
{
	#if SERVER
		table< entity, array<int> >                              entitySonarHandles
		table< entity, int >                                     entityLockonHandles
		table< entity, array<entity> >                           entitySonarFXs
		table< int, table< entity, int > >                       teamSonarCount
		table< int, table< entity, int > >                       teamSonarDiamondsCount
		array< void functionref( entity, vector, int, entity ) > sonarStartCallbacks = []
		array< string >                                          disabledRefs
		int                                                      sonarRegisteredPropScriptsArrayID
		table<entity, entity>                                    sonarProxyToSonarPropScriptTable

	#endif //Server


} file

void function SonarShared_Init()
{
	RegisterSignal( "SonarPing" )
	PrecacheParticleSystem( $"P_ar_sonar_CP_amp" )
	PrecacheParticleSystem( $"P_ar_sonar_CP" )
	PrecacheParticleSystem( $"P_ar_sonar_plane_CP" )

	#if PULSETRAIL
	PrecacheParticleSystem( $"P_sonar_ground_detect" )
	#endif //PULSETRAIL

	//PrecacheParticleSystem( $"P_ar_holopulse_CP" )
	PrecacheParticleSystem( $"P_holo_screespace" )
	PrecacheParticleSystem( FX_SONAR_TARGET )
	PrecacheParticleSystem( FX_CAMERA_TARGET )
	PrecacheParticleSystem( FX_DRONE_TARGET )
               
                                          
       

	#if SERVER
		file.sonarRegisteredPropScriptsArrayID = CreateScriptManagedEntArray()
	#endif //SERVER

	#if CLIENT
		StatusEffect_RegisterEnabledCallback( eStatusEffect.sonar_detected, EntitySonarStatusEnabled )
		StatusEffect_RegisterDisabledCallback( eStatusEffect.sonar_detected, EntitySonarStatusDisabled )

		StatusEffect_RegisterEnabledCallback( eStatusEffect.lockon_detected, EntitySonarDetectedEnabled )
		StatusEffect_RegisterDisabledCallback( eStatusEffect.lockon_detected, EntitySonarDetectedDisabled )

		StatusEffect_RegisterEnabledCallback( eStatusEffect.sonar_blocked, EntitySonarBlockingEnabled )
		StatusEffect_RegisterDisabledCallback( eStatusEffect.sonar_blocked, EntitySonarBlockingDisabled )

		RegisterSignal( "EntitySonarDetectedDisabled" )
	#endif //CLIENT
}

#if SERVER
void function AddSonarStartCallback( void functionref( entity, vector, int, entity ) callback )
{
	file.sonarStartCallbacks.append( callback )
}

void function AddSonarDetectionForPropScript( entity propScript )
{
	propScript.Highlight_Enable()
	AddToScriptManagedEntArray( file.sonarRegisteredPropScriptsArrayID, propScript )
	AddNeurolinkDetectionForPropScript( propScript )
}

void function RemoveSonarDetectionForPropScript( entity propScript )
{
	RemoveFromScriptManagedEntArray( file.sonarRegisteredPropScriptsArrayID, propScript )
	RemoveNeurolinkDetectionForPropScript( propScript )
}

void function AddSonarDetectionForPropScriptWithProxy( entity propScript, entity proxy )
{
	AddToScriptManagedEntArray( file.sonarRegisteredPropScriptsArrayID, proxy )
	file.sonarProxyToSonarPropScriptTable[ proxy ] <- propScript
}

void function RemoveSonarDetectionForPropScriptWithProxy( entity propScript, entity proxy )
{
	RemoveFromScriptManagedEntArray( file.sonarRegisteredPropScriptsArrayID, propScript )
	delete file.sonarProxyToSonarPropScriptTable[ proxy ]
}

entity function GetSonarRegisteredPropScriptFromProxy( entity proxy )
{
	if ( proxy in file.sonarProxyToSonarPropScriptTable )
		return file.sonarProxyToSonarPropScriptTable[ proxy  ]

	return null
}

array<entity> function GetSonarRegisteredPropScripts( vector origin, float radius )
{
	array<entity> entities = GetScriptManagedEntArrayWithinCenter( file.sonarRegisteredPropScriptsArrayID, TEAM_ANY, origin, radius )
	return entities
}

void function OnSonarTriggerLeaveInternal( entity trigger, entity ent )
{
	if ( !ent.e.sonarTriggers.contains( trigger ) )
		return

	ent.e.sonarTriggers.fastremovebyvalue( trigger )
	SonarEnd( ent, trigger.GetTeam(), trigger.GetOwner() )
}

void function LockOnWarningStart( entity ent )
{
	ent.e.lockOnCount++

	if ( ent.e.lockOnCount == 1 )
	{
		int statusEffect = eStatusEffect.lockon_detected
		int statusEffectHandle = StatusEffect_AddEndless( ent, statusEffect, 1.0 )

		if ( ent in file.entityLockonHandles )
			file.entityLockonHandles[ ent ] = statusEffectHandle
		else
			file.entityLockonHandles[ ent ] <- statusEffectHandle
	}
}

void function LockOnWarningEnd( entity ent )
{
	if ( !IsValid( ent ) )
		return

	ent.e.lockOnCount--

	if ( ent.e.lockOnCount < 1 )
	{
		Assert( ent in file.entityLockonHandles )
		int statusEffectHandle = file.entityLockonHandles[ ent ]
		StatusEffect_Stop( ent, statusEffectHandle )
	}
}
bool function ShouldSonarGiveAssistCredit( entity victimEnt, entity sonarOwner )
{
	if ( !victimEnt.IsPlayer() )
		return false

	if ( !sonarOwner.IsPlayer() )
		return false

	if ( IsFriendlyTeam( victimEnt.GetTeam(), sonarOwner.GetTeam() ) )
		return false

	if ( ( victimEnt.GetTeam() == sonarOwner.GetTeam() ) && IsTeamRabid( sonarOwner.GetTeam() ) )
		return false

	ItemFlavor character = LoadoutSlot_GetItemFlavor( sonarOwner, Loadout_CharacterClass() )
	string characterRef = ItemFlavor_GetHumanReadableRef( character )
	string disabledRefs = GetCurrentPlaylistVarString( "disable_sonar_assist", " " )
	file.disabledRefs.extend( split( disabledRefs, WHITESPACE_CHARACTERS ) )

	return !file.disabledRefs.contains( characterRef )
}

void function SonarStart( entity ent, vector position, int sonarTeam, entity sonarOwner )
{
	IncrementScanDiamondsPerTeam( sonarTeam, ent )
	IncrementSonarPerTeam( sonarTeam, ent )
	ent.e.inSonarTriggerCount++

	if ( !(ent in file.entitySonarHandles) )
		file.entitySonarHandles[ent] <- []

	if ( !(ent in file.entitySonarFXs) )
		file.entitySonarFXs[ent] <- []

	ent.HighlightEnableForTeam( sonarTeam )

	if( file.teamSonarDiamondsCount[sonarTeam][ent] == 1 )
	{
		bool entHasLockVFX =  ent.IsPlayer() || ent.IsNPC()  || ent.IsPlayerDecoy()
	   // DISABLED dklein: Subtle intentional detail that decoys don't create the lock confirmation box

		if ( entHasLockVFX )
		{
			UpdatePlayerHighlightsSettings( ent )
			ent.SetCloakFlicker( 0.5, -1 )

			int fxid
			if ( IsValid( sonarOwner ) && PlayerHasPassive( sonarOwner, ePassives.PAS_CRYPTO ) )
				fxid = GetParticleSystemIndex( FX_CAMERA_TARGET )
			else
				fxid = GetParticleSystemIndex( FX_SONAR_TARGET )

			entity fx

			fx = StartParticleEffectOnEntity_ReturnEntity( ent, fxid, FX_PATTACH_POINT_FOLLOW_NOROTATE, ent.LookupAttachment( "CHESTFOCUS" ) )
			// fx.SetLOSBlockScan( true )

			SetTeam( fx, sonarTeam )
			fx.SetOwner( sonarOwner )
			fx.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY | ENTITY_VISIBLE_TO_OWNER
			Assert( !file.entitySonarFXs[ent].contains( fx ) )
			file.entitySonarFXs[ent].append( fx )
		}
	}

	if ( ent.e.inSonarTriggerCount == 1 )
	{
		//Run callbacks for sonar pulse start
		foreach ( callback in file.sonarStartCallbacks )
		{
			callback( ent, position, sonarTeam, sonarOwner )
		}

		int statusEffect       = eStatusEffect.sonar_detected
		int statusEffectHandle

		statusEffectHandle = StatusEffect_AddEndless( ent, statusEffect, 1.0 )

		//Fix for R5DEV-315341.  Since Seer's tac scan is so long, I added logic to turn sonar off/on as someone goes in/out of phase  (previously with it on, the lock VFX would show through phase).
		//The issue is that Seer can hit a Wraith, she goes into phase, Seer dies while shes in phase and when she comes out we go to turn sonar back on again and now the sonarOwner is invalid causing ShouldSonarGiveAssistCredit to fail.
		//Still want sonar to turn back on for the rest of his team if they're around so adding this guard here.
		if ( IsValid( sonarOwner ) )
		{
			if ( ShouldSonarGiveAssistCredit( ent, sonarOwner ) )
				AddAssistingPlayerToVictim( sonarOwner, ent, 9999.0 ) //HACK, crappy way of marking as an endless status effect.
		}

		Assert( !file.entitySonarHandles[ent].contains( statusEffectHandle ) )
		file.entitySonarHandles[ent].append( statusEffectHandle )
	}
}

void function SonarEnd_EndHighlight( entity ent, int team, entity sonarOwner )
{
	if ( !IsValid( ent ) )
		return

	Assert( ent.e.inSonarTriggerCount > 0, "Trying to End sonar when count is already 0.")
	DecrementSonarPerTeam( team, ent )
	ent.e.inSonarTriggerCount--

	if ( team in file.teamSonarCount )
	{
		if ( ent in file.teamSonarCount[team] )
		{
			if( IsValid( ent ) )
			{
				if ( (ent.e.inSonarTriggerCount < file.teamSonarCount[team][ent]) || (ent.e.inSonarTriggerCount <= 0) || (file.teamSonarCount[team][ent] <= 0) )
					ent.HighlightDisableForTeam( team )
			}
		}
	}

	if ( ent.e.inSonarTriggerCount < 1 )
	{
		Assert( ent in file.entitySonarHandles )
		if ( file.entitySonarHandles[ent].len() > 0 )
		{
			int statusEffectHandle = file.entitySonarHandles[ent][0]
			StatusEffect_Stop( ent, statusEffectHandle )
			file.entitySonarHandles[ent].fastremovebyvalue( statusEffectHandle )
		}
		ent.HighlightSetTeamBitField( 0 )

		if ( ent.IsPlayer() || ent.IsNPC() )
			ent.SetCloakFlicker( 0, 0 )
	}
}

void function SonarEnd( entity ent, int team, entity sonarOwner, bool endHighlight = true )
{
	if ( !IsValid( ent ) )
		return

	if( endHighlight )
	{
		SonarEnd_EndHighlight( ent, team, sonarOwner )
	}
	DecrementScanDiamondsPerTeam( team, ent )

	if( team in file.teamSonarDiamondsCount && ent in file.teamSonarDiamondsCount[team] && file.teamSonarDiamondsCount[team][ent] == 0 )
	{
		entity toDelete = null

		foreach ( fx in file.entitySonarFXs[ent] )
		{
			if ( !IsValid( fx ) )
				continue
			if ( fx.GetTeam() == team )
			{
				toDelete = fx
				break
			}
		}

		if ( toDelete != null )
		{
			toDelete.Destroy()
			file.entitySonarFXs[ent].fastremovebyvalue( toDelete )
		}

		if ( IsValid( sonarOwner ) )
		{
			if ( ShouldSonarGiveAssistCredit( ent, sonarOwner ) )
				ChangeAssistingPlayerCreditTimeForVictim( sonarOwner, ent )
		}
	}
}

void function IncrementScanCountTable( int team, entity ent, table< int, table< entity, int > > scanTable )
{
	if ( !(team in scanTable) )
		scanTable[team] <- {}
	if ( !(ent in scanTable[team]) )
		scanTable[team][ent] <- 0

	scanTable[team][ent]++
}

void function DecrementScanCountTable( int team, entity ent, table< int, table< entity, int > > scanTable )
{
	if ( team in scanTable )
	{
		if ( ent in scanTable[team] )
		{
			scanTable[team][ent]--

			if ( scanTable[team][ent] <= 0 )
				scanTable[team][ent] = 0
		}
	}
}

void function IncrementSonarPerTeam( int team, entity ent )
{
	IncrementScanCountTable( team, ent, file.teamSonarCount )
}

void function DecrementSonarPerTeam( int team, entity ent )
{
	DecrementScanCountTable( team, ent, file.teamSonarCount )
}

void function IncrementScanDiamondsPerTeam( int team, entity ent )
{
	IncrementScanCountTable( team, ent, file.teamSonarDiamondsCount )
}

void function DecrementScanDiamondsPerTeam( int team, entity ent )
{
	DecrementScanCountTable( team, ent, file.teamSonarDiamondsCount )
}
#endif //SERVER

#if CLIENT
const float AR_EFFECT_SIZE 		= 192.0 // coresponds with the size of the sphere model used for the AR effect
const float AR_EFFECT_SIZE_CONE = 80.0

void function ServerCallback_SonarPulseFromPosition( float x, float y,float z, float range, float speedScale = 1.0, bool hasDamageAmp = false )
{
	entity player = GetLocalViewPlayer()
	thread SonarPulse( player, SONAR_PULSE_SPACE + (SONAR_PULSE_SPEED * speedScale), <x,y,z>, range, hasDamageAmp )

	//If the player has the tracking vision passive register this sonar pulse with the tracking vision logic.
	if ( player.HasPassive( ePassives.PAS_TRACKING_VISION ) )
		TrackingVision_CreateSonarPulseArea( <x,y,z>, range, <0,0,0>, 360 )
}

void function ServerCallback_SonarPulseConeFromPosition( vector pulseConeOrigin, float pulseConeRange, vector pulseConeDir, float pulseConeFOV, int team, float speedScale, bool hasDamageAmp, bool showTrail )
{
	entity player = GetLocalViewPlayer()
	thread SonarPulseCone( player, SONAR_PULSE_SPACE + ( SONAR_PULSE_SPEED * speedScale ), pulseConeOrigin, pulseConeRange, pulseConeDir, 1, 0.25, hasDamageAmp, showTrail )

	//If the player has the tracking vision passive register this sonar pulse with the tracking vision logic.
	if ( player.HasPassive( ePassives.PAS_TRACKING_VISION ) && team == player.GetTeam() )
		TrackingVision_CreateSonarPulseArea( pulseConeOrigin, pulseConeRange, pulseConeDir, pulseConeFOV )
}

void function SonarPulse( entity player, float pulseSpeed, vector pulsePosition, float radius, bool hasDamageAmp )
{
	if ( hasDamageAmp )
	{
		int fxHandle = StartParticleEffectInWorldWithHandle( GetParticleSystemIndex( $"P_ar_sonar_CP_amp" ), pulsePosition, <0,0,0> )
		vector controlPoint = <radius / pulseSpeed, radius / AR_EFFECT_SIZE, 0.0>
		EffectSetControlPointVector( fxHandle, 1, controlPoint )
	}
	else
	{
		int fxHandle = StartParticleEffectInWorldWithHandle( GetParticleSystemIndex( $"P_ar_sonar_CP" ), pulsePosition, <0,0,0> )
		vector controlPoint = <radius / pulseSpeed, radius / AR_EFFECT_SIZE, 0.0>
		EffectSetControlPointVector( fxHandle, 1, controlPoint )
	}
}

void function SonarPulseCone( entity player, float pulseSpeed, vector pulsePosition, float radius, vector dir, int count, float interval, bool hasDamageAmp, bool showTrail )
{
	for ( int i = 0; i < count; i++ )
	{
		vector angles = VectorToAngles( dir )
		if ( hasDamageAmp )
		{
			int fxHandle = StartParticleEffectInWorldWithHandle( GetParticleSystemIndex( $"P_ar_sonar_plane_CP" ), pulsePosition, angles )
			vector controlPoint = <radius / pulseSpeed, radius / AR_EFFECT_SIZE_CONE, 0.0>
			EffectSetControlPointVector( fxHandle, 1, controlPoint )
		}
		else
		{
			int fxHandle = StartParticleEffectInWorldWithHandle( GetParticleSystemIndex( $"P_ar_sonar_plane_CP" ), pulsePosition, angles )
			vector controlPoint = <radius / pulseSpeed, radius / AR_EFFECT_SIZE_CONE, 0.0>
			EffectSetControlPointVector( fxHandle, 1, controlPoint )
		}

		#if PULSETRAIL
			if ( showTrail )
				thread SonarPulseConeTrail( player, dir, radius / pulseSpeed, radius )
		#endif //PULSETRAIL

		wait interval
	}
}

#if PULSETRAIL
void function SonarPulseConeTrail( entity player, vector dir, float duration, float radius )
{
	vector origin = player.EyePosition()
	entity mover = CreateClientsideScriptMover( $"mdl/dev/empty_model.rmdl", origin, VectorToAngles( dir ) )
	int fxHandle = StartParticleEffectOnEntity( mover, GetParticleSystemIndex( $"P_sonar_ground_detect" ), FX_PATTACH_POINT_FOLLOW, mover.LookupAttachment( "REF" ) )

	mover.NonPhysicsMoveTo( origin + dir * radius, duration, 0, 0 )
	wait duration

	EffectStop( fxHandle, false, true )

	wait 2

	mover.Destroy()
}
#endif //PULSETRAIL

void function EntitySonarStatusEnabled( entity ent, int statusEffect, bool actuallyChanged )
{
	ManageHighlightEntity( ent )

	EntitySonarDetectedEnabled( ent, statusEffect, actuallyChanged )
}

void function EntitySonarStatusDisabled( entity ent, int statusEffect, bool actuallyChanged )
{
	ManageHighlightEntity( ent )
	EntitySonarDetectedDisabled( ent, statusEffect, actuallyChanged )
}
void function EntitySonarDetectedEnabled( entity ent, int statusEffect, bool actuallyChanged )
{
	if ( ent == GetLocalViewPlayer() )
	{
		// player is already lockon highlighted
		if ( statusEffect == eStatusEffect.sonar_detected && StatusEffect_GetSeverity( ent, eStatusEffect.lockon_detected ) )
			return

		entity viewModelArm = ent.GetViewModelArmsAttachment()
		entity viewModelEntity = ent.GetViewModelEntity()
		entity firstPersonProxy = ent.GetFirstPersonProxy()
		entity predictedFirstPersonProxy = ent.GetPredictedFirstPersonProxy()

		//vector highlightColor = statusEffect == eStatusEffect.sonar_detected ? HIGHLIGHT_COLOR_ENEMY : <1,0,0>
		vector highlightColor = <1,0,0>
		if ( StatusEffect_GetSeverity( ent, eStatusEffect.damage_received_multiplier ) > 0.0 )
			highlightColor = <1,0,0>

		if ( IsValid( viewModelArm ) )
			SonarViewModelHighlight( viewModelArm, highlightColor )

		if ( IsValid( viewModelEntity ) )
			SonarViewModelHighlight( viewModelEntity, highlightColor )

		if ( IsValid( firstPersonProxy ) )
			SonarViewModelHighlight( firstPersonProxy, highlightColor )

		if ( IsValid( predictedFirstPersonProxy ) )
			SonarViewModelHighlight( predictedFirstPersonProxy, highlightColor )

		thread PlayLoopingSonarSound( ent )
	}
	else
	{
		ClInitHighlight( ent )
	}
}

void function EntitySonarDetectedDisabled( entity ent, int statusEffect, bool actuallyChanged )
{
	if ( ent == GetLocalViewPlayer() )
	{
		// player should have lockon highlighted
		if ( statusEffect == eStatusEffect.sonar_detected && StatusEffect_GetSeverity( ent, eStatusEffect.lockon_detected ) )
		{
			return
		}
		else if ( statusEffect == eStatusEffect.lockon_detected && StatusEffect_GetSeverity( ent, eStatusEffect.sonar_detected ) )
		{
			// restore sonar after lockon wears off
			EntitySonarDetectedEnabled( ent, eStatusEffect.sonar_detected, true )
			return
		}

		entity viewModelArm = ent.GetViewModelArmsAttachment()
		entity viewModelEntity = ent.GetViewModelEntity()
		entity firstPersonProxy = ent.GetFirstPersonProxy()
		entity predictedFirstPersonProxy = ent.GetPredictedFirstPersonProxy()

		if ( IsValid( viewModelArm ) )
			SonarViewModelClearHighlight( viewModelArm )

		if ( IsValid( viewModelEntity ) )
			SonarViewModelClearHighlight( viewModelEntity )

		if ( IsValid( firstPersonProxy ) )
			SonarViewModelClearHighlight( firstPersonProxy )

		if ( IsValid( predictedFirstPersonProxy ) )
			SonarViewModelClearHighlight( predictedFirstPersonProxy )

		ent.Signal( "EntitySonarDetectedDisabled" )
	}
	else
	{
		ClInitHighlight( ent )
	}
}

void function EntitySonarBlockingEnabled( entity ent, int statusEffect, bool actuallyChanged )
{
	if ( ent == GetLocalViewPlayer() )
	{
		// player is already lockon highlighted
		if ( statusEffect == eStatusEffect.sonar_detected && StatusEffect_GetSeverity( ent, eStatusEffect.lockon_detected ) )
			return

		//entity viewModelEntity = ent.GetViewModelEntity()
		//entity firstPersonProxy = ent.GetFirstPersonProxy()
		//entity predictedFirstPersonProxy = ent.GetPredictedFirstPersonProxy()

		//vector highlightColor = statusEffect == eStatusEffect.sonar_detected ? HIGHLIGHT_COLOR_ENEMY : <1,0,0>
		//if ( StatusEffect_GetSeverity( ent, eStatusEffect.damage_received_multiplier ) > 0.0 )
		//	highlightColor = <1,0,0>

		//if ( IsValid( viewModelEntity ) )
		//	SonarViewModelHighlight( viewModelEntity, highlightColor )

		//if ( IsValid( firstPersonProxy ) )
		//	SonarViewModelHighlight( firstPersonProxy, highlightColor )

		//if ( IsValid( predictedFirstPersonProxy ) )
		//	SonarViewModelHighlight( predictedFirstPersonProxy, highlightColor )

		thread PlayLoopingSonarSound( ent )
	}
	else
	{
		ClInitHighlight( ent )
	}
}

void function EntitySonarBlockingDisabled( entity ent, int statusEffect, bool actuallyChanged )
{
	if ( ent == GetLocalViewPlayer() )
	{
		// player should have lockon highlighted
		/*
		if ( statusEffect == eStatusEffect.sonar_detected && StatusEffect_GetSeverity( ent, eStatusEffect.lockon_detected ) )
		{
			return
		}
		else if ( statusEffect == eStatusEffect.lockon_detected && StatusEffect_GetSeverity( ent, eStatusEffect.sonar_detected ) )
		{
			// restore sonar after lockon wears off
			EntitySonarDetectedEnabled( ent, eStatusEffect.sonar_detected, true )
			return
		}
		*/

		entity viewModelEntity = ent.GetViewModelEntity()
		entity firstPersonProxy = ent.GetFirstPersonProxy()
		entity predictedFirstPersonProxy = ent.GetPredictedFirstPersonProxy()

		if ( IsValid( viewModelEntity ) )
			SonarViewModelClearHighlight( viewModelEntity )

		if ( IsValid( firstPersonProxy ) )
			SonarViewModelClearHighlight( firstPersonProxy )

		if ( IsValid( predictedFirstPersonProxy ) )
			SonarViewModelClearHighlight( predictedFirstPersonProxy )

		ent.Signal( "EntitySonarDetectedDisabled" )
	}
	else
	{
		ClInitHighlight( ent )
	}
}

void function PlayLoopingSonarSound( entity ent )
{
	EmitSoundOnEntity( ent, "HUD_MP_EnemySonarTag_Activated_1P" )

	ent.EndSignal( "EntitySonarDetectedDisabled" )
	ent.EndSignal( "OnDeath" )

	while ( true )
	{
		wait 1.5
		EmitSoundOnEntity( ent, "HUD_MP_EnemySonarTag_Flashed_1P" )
	}
}
#endif
